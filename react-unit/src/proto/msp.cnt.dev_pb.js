// source: msp.cnt.dev.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msp.cnt.dev.BatchCfg', null, global);
goog.exportSymbol('proto.msp.cnt.dev.BatchCfgList', null, global);
goog.exportSymbol('proto.msp.cnt.dev.BatchInfo', null, global);
goog.exportSymbol('proto.msp.cnt.dev.BatchProg', null, global);
goog.exportSymbol('proto.msp.cnt.dev.DevBasic', null, global);
goog.exportSymbol('proto.msp.cnt.dev.DevInfo', null, global);
goog.exportSymbol('proto.msp.cnt.dev.DevList', null, global);
goog.exportSymbol('proto.msp.cnt.dev.EDEVTYPE', null, global);
goog.exportSymbol('proto.msp.cnt.dev.EMMETH', null, global);
goog.exportSymbol('proto.msp.cnt.dev.FwInfo', null, global);
goog.exportSymbol('proto.msp.cnt.dev.FwList', null, global);
goog.exportSymbol('proto.msp.cnt.dev.PackageInfo', null, global);
goog.exportSymbol('proto.msp.cnt.dev.RegDev', null, global);
goog.exportSymbol('proto.msp.cnt.dev.RegDevList', null, global);
goog.exportSymbol('proto.msp.cnt.dev.SearchCfg', null, global);
goog.exportSymbol('proto.msp.cnt.dev.SearchDev', null, global);
goog.exportSymbol('proto.msp.cnt.dev.SearchDevList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.DevBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.DevBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.DevBasic.displayName = 'proto.msp.cnt.dev.DevBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.DevInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.DevInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.DevInfo.displayName = 'proto.msp.cnt.dev.DevInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.DevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.dev.DevList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.dev.DevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.DevList.displayName = 'proto.msp.cnt.dev.DevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.SearchCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.SearchCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.SearchCfg.displayName = 'proto.msp.cnt.dev.SearchCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.SearchDev = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.SearchDev, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.SearchDev.displayName = 'proto.msp.cnt.dev.SearchDev';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.SearchDevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.dev.SearchDevList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.dev.SearchDevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.SearchDevList.displayName = 'proto.msp.cnt.dev.SearchDevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.RegDev = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.RegDev, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.RegDev.displayName = 'proto.msp.cnt.dev.RegDev';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.RegDevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.dev.RegDevList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.dev.RegDevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.RegDevList.displayName = 'proto.msp.cnt.dev.RegDevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.FwInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.FwInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.FwInfo.displayName = 'proto.msp.cnt.dev.FwInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.FwList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.dev.FwList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.dev.FwList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.FwList.displayName = 'proto.msp.cnt.dev.FwList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.BatchCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.BatchCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.BatchCfg.displayName = 'proto.msp.cnt.dev.BatchCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.BatchCfgList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.dev.BatchCfgList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.dev.BatchCfgList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.BatchCfgList.displayName = 'proto.msp.cnt.dev.BatchCfgList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.BatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.BatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.BatchInfo.displayName = 'proto.msp.cnt.dev.BatchInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.BatchProg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.BatchProg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.BatchProg.displayName = 'proto.msp.cnt.dev.BatchProg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.dev.PackageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.dev.PackageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.dev.PackageInfo.displayName = 'proto.msp.cnt.dev.PackageInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.DevBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.DevBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.DevBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mac: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 7, ""),
    model: jspb.Message.getFieldWithDefault(msg, 8, ""),
    hwver: jspb.Message.getFieldWithDefault(msg, 9, ""),
    softver: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fwnum: jspb.Message.getFieldWithDefault(msg, 11, 0),
    port: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.DevBasic}
 */
proto.msp.cnt.dev.DevBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.DevBasic;
  return proto.msp.cnt.dev.DevBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.DevBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.DevBasic}
 */
proto.msp.cnt.dev.DevBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHwver(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFwnum(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.DevBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.DevBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.DevBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getHid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHwver();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFwnum();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 hid = 4;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getHid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setHid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 pid = 5;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string mac = 6;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sn = 7;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string model = 8;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string hwver = 9;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getHwver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setHwver = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string softver = 10;
 * @return {string}
 */
proto.msp.cnt.dev.DevBasic.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional fixed32 fwnum = 11;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getFwnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setFwnum = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 port = 12;
 * @return {number}
 */
proto.msp.cnt.dev.DevBasic.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevBasic} returns this
 */
proto.msp.cnt.dev.DevBasic.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.DevInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.DevInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.DevInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    portcap: jspb.Message.getFieldWithDefault(msg, 6, 0),
    base: (f = msg.getBase()) && proto.msp.cnt.dev.DevBasic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.DevInfo}
 */
proto.msp.cnt.dev.DevInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.DevInfo;
  return proto.msp.cnt.dev.DevInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.DevInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.DevInfo}
 */
proto.msp.cnt.dev.DevInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPortcap(value);
      break;
    case 7:
      var value = new proto.msp.cnt.dev.DevBasic;
      reader.readMessage(value,proto.msp.cnt.dev.DevBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.DevInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.DevInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.DevInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getPortcap();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.msp.cnt.dev.DevBasic.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.dev.DevInfo.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.cnt.dev.DevInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.cnt.dev.DevInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool online = 4;
 * @return {boolean}
 */
proto.msp.cnt.dev.DevInfo.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional fixed32 status = 5;
 * @return {number}
 */
proto.msp.cnt.dev.DevInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 portcap = 6;
 * @return {number}
 */
proto.msp.cnt.dev.DevInfo.prototype.getPortcap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.setPortcap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional DevBasic base = 7;
 * @return {?proto.msp.cnt.dev.DevBasic}
 */
proto.msp.cnt.dev.DevInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.cnt.dev.DevBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.dev.DevBasic, 7));
};


/**
 * @param {?proto.msp.cnt.dev.DevBasic|undefined} value
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
*/
proto.msp.cnt.dev.DevInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.dev.DevInfo} returns this
 */
proto.msp.cnt.dev.DevInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.dev.DevInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.dev.DevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.DevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.DevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.DevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.cnt.dev.DevInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.DevList}
 */
proto.msp.cnt.dev.DevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.DevList;
  return proto.msp.cnt.dev.DevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.DevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.DevList}
 */
proto.msp.cnt.dev.DevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.dev.DevInfo;
      reader.readMessage(value,proto.msp.cnt.dev.DevInfo.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.DevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.DevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.DevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.DevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.dev.DevInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DevInfo dev = 1;
 * @return {!Array<!proto.msp.cnt.dev.DevInfo>}
 */
proto.msp.cnt.dev.DevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.cnt.dev.DevInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.dev.DevInfo, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.dev.DevInfo>} value
 * @return {!proto.msp.cnt.dev.DevList} returns this
*/
proto.msp.cnt.dev.DevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.dev.DevInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.dev.DevInfo}
 */
proto.msp.cnt.dev.DevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.dev.DevInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.dev.DevList} returns this
 */
proto.msp.cnt.dev.DevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.SearchCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.SearchCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.SearchCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.SearchCfg}
 */
proto.msp.cnt.dev.SearchCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.SearchCfg;
  return proto.msp.cnt.dev.SearchCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.SearchCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.SearchCfg}
 */
proto.msp.cnt.dev.SearchCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.SearchCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.SearchCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.SearchCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
};


/**
 * optional fixed32 timeout = 1;
 * @return {number}
 */
proto.msp.cnt.dev.SearchCfg.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.SearchCfg} returns this
 */
proto.msp.cnt.dev.SearchCfg.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.SearchDev.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.SearchDev.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.SearchDev} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchDev.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    model: jspb.Message.getFieldWithDefault(msg, 3, ""),
    slot: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mac: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 7, ""),
    gw: jspb.Message.getFieldWithDefault(msg, 8, ""),
    runtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    regip: jspb.Message.getFieldWithDefault(msg, 10, ""),
    regport: jspb.Message.getFieldWithDefault(msg, 11, 0),
    softver: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.SearchDev}
 */
proto.msp.cnt.dev.SearchDev.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.SearchDev;
  return proto.msp.cnt.dev.SearchDev.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.SearchDev} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.SearchDev}
 */
proto.msp.cnt.dev.SearchDev.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMask(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGw(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRuntime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegip(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRegport(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.SearchDev.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.SearchDev.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.SearchDev} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchDev.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMask();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGw();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRuntime();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getRegip();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRegport();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model = 3;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 slot = 4;
 * @return {number}
 */
proto.msp.cnt.dev.SearchDev.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string mac = 5;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ip = 6;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mask = 7;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setMask = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string gw = 8;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getGw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setGw = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 runtime = 9;
 * @return {number}
 */
proto.msp.cnt.dev.SearchDev.prototype.getRuntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setRuntime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string regip = 10;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getRegip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setRegip = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional fixed32 regport = 11;
 * @return {number}
 */
proto.msp.cnt.dev.SearchDev.prototype.getRegport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setRegport = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string softver = 12;
 * @return {string}
 */
proto.msp.cnt.dev.SearchDev.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.SearchDev} returns this
 */
proto.msp.cnt.dev.SearchDev.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.dev.SearchDevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.SearchDevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.SearchDevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.SearchDevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchDevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.cnt.dev.SearchDev.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.SearchDevList}
 */
proto.msp.cnt.dev.SearchDevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.SearchDevList;
  return proto.msp.cnt.dev.SearchDevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.SearchDevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.SearchDevList}
 */
proto.msp.cnt.dev.SearchDevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.dev.SearchDev;
      reader.readMessage(value,proto.msp.cnt.dev.SearchDev.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.SearchDevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.SearchDevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.SearchDevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.SearchDevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.dev.SearchDev.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SearchDev dev = 1;
 * @return {!Array<!proto.msp.cnt.dev.SearchDev>}
 */
proto.msp.cnt.dev.SearchDevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.cnt.dev.SearchDev>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.dev.SearchDev, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.dev.SearchDev>} value
 * @return {!proto.msp.cnt.dev.SearchDevList} returns this
*/
proto.msp.cnt.dev.SearchDevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.dev.SearchDev=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.dev.SearchDev}
 */
proto.msp.cnt.dev.SearchDevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.dev.SearchDev, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.dev.SearchDevList} returns this
 */
proto.msp.cnt.dev.SearchDevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.RegDev.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.RegDev.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.RegDev} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.RegDev.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    regip: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.RegDev}
 */
proto.msp.cnt.dev.RegDev.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.RegDev;
  return proto.msp.cnt.dev.RegDev.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.RegDev} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.RegDev}
 */
proto.msp.cnt.dev.RegDev.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.RegDev.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.RegDev.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.RegDev} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.RegDev.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mac = 1;
 * @return {string}
 */
proto.msp.cnt.dev.RegDev.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.RegDev} returns this
 */
proto.msp.cnt.dev.RegDev.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.cnt.dev.RegDev.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.RegDev} returns this
 */
proto.msp.cnt.dev.RegDev.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string regip = 3;
 * @return {string}
 */
proto.msp.cnt.dev.RegDev.prototype.getRegip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.RegDev} returns this
 */
proto.msp.cnt.dev.RegDev.prototype.setRegip = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.dev.RegDevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.RegDevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.RegDevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.RegDevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.RegDevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.cnt.dev.RegDev.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.RegDevList}
 */
proto.msp.cnt.dev.RegDevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.RegDevList;
  return proto.msp.cnt.dev.RegDevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.RegDevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.RegDevList}
 */
proto.msp.cnt.dev.RegDevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.dev.RegDev;
      reader.readMessage(value,proto.msp.cnt.dev.RegDev.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.RegDevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.RegDevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.RegDevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.RegDevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.dev.RegDev.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RegDev dev = 1;
 * @return {!Array<!proto.msp.cnt.dev.RegDev>}
 */
proto.msp.cnt.dev.RegDevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.cnt.dev.RegDev>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.dev.RegDev, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.dev.RegDev>} value
 * @return {!proto.msp.cnt.dev.RegDevList} returns this
*/
proto.msp.cnt.dev.RegDevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.dev.RegDev=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.dev.RegDev}
 */
proto.msp.cnt.dev.RegDevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.dev.RegDev, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.dev.RegDevList} returns this
 */
proto.msp.cnt.dev.RegDevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.FwInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.FwInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.FwInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.FwInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    no: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    softver: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.FwInfo}
 */
proto.msp.cnt.dev.FwInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.FwInfo;
  return proto.msp.cnt.dev.FwInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.FwInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.FwInfo}
 */
proto.msp.cnt.dev.FwInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.FwInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.FwInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.FwInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.FwInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNo();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 no = 1;
 * @return {number}
 */
proto.msp.cnt.dev.FwInfo.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.FwInfo} returns this
 */
proto.msp.cnt.dev.FwInfo.prototype.setNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.cnt.dev.FwInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.FwInfo} returns this
 */
proto.msp.cnt.dev.FwInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string softver = 3;
 * @return {string}
 */
proto.msp.cnt.dev.FwInfo.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.FwInfo} returns this
 */
proto.msp.cnt.dev.FwInfo.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.dev.FwList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.FwList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.FwList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.FwList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.FwList.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fwList: jspb.Message.toObjectList(msg.getFwList(),
    proto.msp.cnt.dev.FwInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.FwList}
 */
proto.msp.cnt.dev.FwList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.FwList;
  return proto.msp.cnt.dev.FwList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.FwList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.FwList}
 */
proto.msp.cnt.dev.FwList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = new proto.msp.cnt.dev.FwInfo;
      reader.readMessage(value,proto.msp.cnt.dev.FwInfo.deserializeBinaryFromReader);
      msg.addFw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.FwList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.FwList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.FwList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.FwList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFwList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.cnt.dev.FwInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.dev.FwList.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.FwList} returns this
 */
proto.msp.cnt.dev.FwList.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FwInfo fw = 2;
 * @return {!Array<!proto.msp.cnt.dev.FwInfo>}
 */
proto.msp.cnt.dev.FwList.prototype.getFwList = function() {
  return /** @type{!Array<!proto.msp.cnt.dev.FwInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.dev.FwInfo, 2));
};


/**
 * @param {!Array<!proto.msp.cnt.dev.FwInfo>} value
 * @return {!proto.msp.cnt.dev.FwList} returns this
*/
proto.msp.cnt.dev.FwList.prototype.setFwList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.cnt.dev.FwInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.dev.FwInfo}
 */
proto.msp.cnt.dev.FwList.prototype.addFw = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.cnt.dev.FwInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.dev.FwList} returns this
 */
proto.msp.cnt.dev.FwList.prototype.clearFwList = function() {
  return this.setFwList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.BatchCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.BatchCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.BatchCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.BatchCfg}
 */
proto.msp.cnt.dev.BatchCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.BatchCfg;
  return proto.msp.cnt.dev.BatchCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.BatchCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.BatchCfg}
 */
proto.msp.cnt.dev.BatchCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.BatchCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.BatchCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.BatchCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.dev.BatchCfg.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.BatchCfg} returns this
 */
proto.msp.cnt.dev.BatchCfg.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.cnt.dev.BatchCfg.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.BatchCfg} returns this
 */
proto.msp.cnt.dev.BatchCfg.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.cnt.dev.BatchCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.BatchCfg} returns this
 */
proto.msp.cnt.dev.BatchCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.dev.BatchCfgList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.BatchCfgList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.BatchCfgList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.BatchCfgList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchCfgList.toObject = function(includeInstance, msg) {
  var f, obj = {
    meth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchList: jspb.Message.toObjectList(msg.getBatchList(),
    proto.msp.cnt.dev.BatchCfg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.BatchCfgList}
 */
proto.msp.cnt.dev.BatchCfgList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.BatchCfgList;
  return proto.msp.cnt.dev.BatchCfgList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.BatchCfgList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.BatchCfgList}
 */
proto.msp.cnt.dev.BatchCfgList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 2:
      var value = new proto.msp.cnt.dev.BatchCfg;
      reader.readMessage(value,proto.msp.cnt.dev.BatchCfg.deserializeBinaryFromReader);
      msg.addBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.BatchCfgList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.BatchCfgList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.BatchCfgList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchCfgList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.cnt.dev.BatchCfg.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 meth = 1;
 * @return {number}
 */
proto.msp.cnt.dev.BatchCfgList.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.BatchCfgList} returns this
 */
proto.msp.cnt.dev.BatchCfgList.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated BatchCfg batch = 2;
 * @return {!Array<!proto.msp.cnt.dev.BatchCfg>}
 */
proto.msp.cnt.dev.BatchCfgList.prototype.getBatchList = function() {
  return /** @type{!Array<!proto.msp.cnt.dev.BatchCfg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.dev.BatchCfg, 2));
};


/**
 * @param {!Array<!proto.msp.cnt.dev.BatchCfg>} value
 * @return {!proto.msp.cnt.dev.BatchCfgList} returns this
*/
proto.msp.cnt.dev.BatchCfgList.prototype.setBatchList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.cnt.dev.BatchCfg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.dev.BatchCfg}
 */
proto.msp.cnt.dev.BatchCfgList.prototype.addBatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.cnt.dev.BatchCfg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.dev.BatchCfgList} returns this
 */
proto.msp.cnt.dev.BatchCfgList.prototype.clearBatchList = function() {
  return this.setBatchList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.BatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.BatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.BatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    meth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.BatchInfo}
 */
proto.msp.cnt.dev.BatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.BatchInfo;
  return proto.msp.cnt.dev.BatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.BatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.BatchInfo}
 */
proto.msp.cnt.dev.BatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.BatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.BatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.BatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional fixed32 meth = 1;
 * @return {number}
 */
proto.msp.cnt.dev.BatchInfo.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.BatchInfo} returns this
 */
proto.msp.cnt.dev.BatchInfo.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.msp.cnt.dev.BatchInfo.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.BatchInfo} returns this
 */
proto.msp.cnt.dev.BatchInfo.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.BatchProg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.BatchProg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.BatchProg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchProg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.BatchProg}
 */
proto.msp.cnt.dev.BatchProg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.BatchProg;
  return proto.msp.cnt.dev.BatchProg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.BatchProg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.BatchProg}
 */
proto.msp.cnt.dev.BatchProg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.BatchProg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.BatchProg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.BatchProg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.BatchProg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.dev.BatchProg.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.BatchProg} returns this
 */
proto.msp.cnt.dev.BatchProg.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 meth = 2;
 * @return {number}
 */
proto.msp.cnt.dev.BatchProg.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.BatchProg} returns this
 */
proto.msp.cnt.dev.BatchProg.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 progress = 3;
 * @return {number}
 */
proto.msp.cnt.dev.BatchProg.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.dev.BatchProg} returns this
 */
proto.msp.cnt.dev.BatchProg.prototype.setProgress = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.dev.PackageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.dev.PackageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.dev.PackageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.PackageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detail: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.dev.PackageInfo}
 */
proto.msp.cnt.dev.PackageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.dev.PackageInfo;
  return proto.msp.cnt.dev.PackageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.dev.PackageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.dev.PackageInfo}
 */
proto.msp.cnt.dev.PackageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.dev.PackageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.dev.PackageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.dev.PackageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.dev.PackageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.dev.PackageInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.PackageInfo} returns this
 */
proto.msp.cnt.dev.PackageInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.msp.cnt.dev.PackageInfo.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.PackageInfo} returns this
 */
proto.msp.cnt.dev.PackageInfo.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string detail = 3;
 * @return {string}
 */
proto.msp.cnt.dev.PackageInfo.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.dev.PackageInfo} returns this
 */
proto.msp.cnt.dev.PackageInfo.prototype.setDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.msp.cnt.dev.EDEVTYPE = {
  EDEVALL: 0,
  EDEVASVR: 2,
  EDEVIN: 3,
  EDEVOUT: 4,
  EDEVBOX: 6,
  EDEVTX: 7,
  EDEVRX: 8,
  EDEVDEC: 9,
  EDEVVSVR: 15,
  EDEVNMC: 16,
  EDEV1837: 17,
  EDEVMPU: 18,
  EDEVDANTE: 19
};

/**
 * @enum {number}
 */
proto.msp.cnt.dev.EMMETH = {
  EMREBOOT: 0,
  EMRESTORE: 1,
  EMSETBOX: 2,
  EMUPGRADE: 3
};

goog.object.extend(exports, proto.msp.cnt.dev);
