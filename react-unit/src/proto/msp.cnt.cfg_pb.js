// source: msp.cnt.cfg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var msp_cnt_pb = require('./msp.cnt_pb.js');
goog.object.extend(proto, msp_cnt_pb);
goog.exportSymbol('proto.msp.cnt.cfg.BoxExt', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.BoxExtList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.DecMode', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.DecModeList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.GroupMems', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.Ids', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.Lancfg', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.NetCfg', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.NetCfgList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.PrePlan', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.PrePlans', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdBox', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdBoxList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdOutput', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdOutputList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdPort', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdPortList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.RdPortUpdate', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.Umt', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.UmtDec', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.UmtDecList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.UmtList', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.UmtState', null, global);
goog.exportSymbol('proto.msp.cnt.cfg.UmtStateList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.NetCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.NetCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.NetCfg.displayName = 'proto.msp.cnt.cfg.NetCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.NetCfgList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.NetCfgList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.NetCfgList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.NetCfgList.displayName = 'proto.msp.cnt.cfg.NetCfgList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.Lancfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.Lancfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.Lancfg.displayName = 'proto.msp.cnt.cfg.Lancfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.Umt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.Umt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.Umt.displayName = 'proto.msp.cnt.cfg.Umt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.UmtList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.UmtList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.UmtList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.UmtList.displayName = 'proto.msp.cnt.cfg.UmtList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.UmtState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.UmtState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.UmtState.displayName = 'proto.msp.cnt.cfg.UmtState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.UmtDec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.UmtDec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.UmtDec.displayName = 'proto.msp.cnt.cfg.UmtDec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.UmtDecList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.UmtDecList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.UmtDecList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.UmtDecList.displayName = 'proto.msp.cnt.cfg.UmtDecList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.UmtStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.UmtStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.UmtStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.UmtStateList.displayName = 'proto.msp.cnt.cfg.UmtStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.DecMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.DecMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.DecMode.displayName = 'proto.msp.cnt.cfg.DecMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.DecModeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.DecModeList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.DecModeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.DecModeList.displayName = 'proto.msp.cnt.cfg.DecModeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.RdBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdBox.displayName = 'proto.msp.cnt.cfg.RdBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdBoxList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.RdBoxList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.RdBoxList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdBoxList.displayName = 'proto.msp.cnt.cfg.RdBoxList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.RdPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdPort.displayName = 'proto.msp.cnt.cfg.RdPort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdPortList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.RdPortList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.RdPortList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdPortList.displayName = 'proto.msp.cnt.cfg.RdPortList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.RdOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdOutput.displayName = 'proto.msp.cnt.cfg.RdOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdOutputList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.RdOutputList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.RdOutputList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdOutputList.displayName = 'proto.msp.cnt.cfg.RdOutputList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.BoxExt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.BoxExt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.BoxExt.displayName = 'proto.msp.cnt.cfg.BoxExt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.BoxExtList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.BoxExtList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.BoxExtList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.BoxExtList.displayName = 'proto.msp.cnt.cfg.BoxExtList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.RdPortUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.cfg.RdPortUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.RdPortUpdate.displayName = 'proto.msp.cnt.cfg.RdPortUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.PrePlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.PrePlan.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.PrePlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.PrePlan.displayName = 'proto.msp.cnt.cfg.PrePlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.PrePlans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.PrePlans.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.PrePlans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.PrePlans.displayName = 'proto.msp.cnt.cfg.PrePlans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.GroupMems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.GroupMems.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.GroupMems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.GroupMems.displayName = 'proto.msp.cnt.cfg.GroupMems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.cfg.Ids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.cfg.Ids.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.cfg.Ids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.cfg.Ids.displayName = 'proto.msp.cnt.cfg.Ids';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.NetCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.NetCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.NetCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.NetCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    use: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    dhcp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    ip: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mask: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.NetCfg}
 */
proto.msp.cnt.cfg.NetCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.NetCfg;
  return proto.msp.cnt.cfg.NetCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.NetCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.NetCfg}
 */
proto.msp.cnt.cfg.NetCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUse(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDhcp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.NetCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.NetCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.NetCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.NetCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUse();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDhcp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getMask();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool use = 3;
 * @return {boolean}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getUse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setUse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool dhcp = 4;
 * @return {boolean}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getDhcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setDhcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string ip = 5;
 * @return {string}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed32 type = 6;
 * @return {number}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string mask = 7;
 * @return {string}
 */
proto.msp.cnt.cfg.NetCfg.prototype.getMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.NetCfg} returns this
 */
proto.msp.cnt.cfg.NetCfg.prototype.setMask = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.NetCfgList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.NetCfgList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.NetCfgList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.NetCfgList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.NetCfgList.toObject = function(includeInstance, msg) {
  var f, obj = {
    netList: jspb.Message.toObjectList(msg.getNetList(),
    proto.msp.cnt.cfg.NetCfg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.NetCfgList}
 */
proto.msp.cnt.cfg.NetCfgList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.NetCfgList;
  return proto.msp.cnt.cfg.NetCfgList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.NetCfgList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.NetCfgList}
 */
proto.msp.cnt.cfg.NetCfgList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.NetCfg;
      reader.readMessage(value,proto.msp.cnt.cfg.NetCfg.deserializeBinaryFromReader);
      msg.addNet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.NetCfgList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.NetCfgList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.NetCfgList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.NetCfgList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.NetCfg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NetCfg net = 1;
 * @return {!Array<!proto.msp.cnt.cfg.NetCfg>}
 */
proto.msp.cnt.cfg.NetCfgList.prototype.getNetList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.NetCfg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.NetCfg, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.NetCfg>} value
 * @return {!proto.msp.cnt.cfg.NetCfgList} returns this
*/
proto.msp.cnt.cfg.NetCfgList.prototype.setNetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.NetCfg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.NetCfg}
 */
proto.msp.cnt.cfg.NetCfgList.prototype.addNet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.NetCfg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.NetCfgList} returns this
 */
proto.msp.cnt.cfg.NetCfgList.prototype.clearNetList = function() {
  return this.setNetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.Lancfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.Lancfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.Lancfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Lancfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipout: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.Lancfg}
 */
proto.msp.cnt.cfg.Lancfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.Lancfg;
  return proto.msp.cnt.cfg.Lancfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.Lancfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.Lancfg}
 */
proto.msp.cnt.cfg.Lancfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.Lancfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.Lancfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.Lancfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Lancfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpout();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ipin = 1;
 * @return {string}
 */
proto.msp.cnt.cfg.Lancfg.prototype.getIpin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Lancfg} returns this
 */
proto.msp.cnt.cfg.Lancfg.prototype.setIpin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ipout = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.Lancfg.prototype.getIpout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Lancfg} returns this
 */
proto.msp.cnt.cfg.Lancfg.prototype.setIpout = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.Umt.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.Umt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.Umt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Umt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 4, ""),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0),
    user: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pass: jspb.Message.getFieldWithDefault(msg, 7, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    rtsp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ipcmedia: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mtmedia: jspb.Message.getFieldWithDefault(msg, 11, 0),
    conf: jspb.Message.getFieldWithDefault(msg, 12, 0),
    device: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.Umt}
 */
proto.msp.cnt.cfg.Umt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.Umt;
  return proto.msp.cnt.cfg.Umt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.Umt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.Umt}
 */
proto.msp.cnt.cfg.Umt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtsp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setIpcmedia(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMtmedia(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setConf(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.Umt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.Umt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.Umt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Umt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRtsp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIpcmedia();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getMtmedia();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getConf();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getDevice();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.Umt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ip = 4;
 * @return {string}
 */
proto.msp.cnt.cfg.Umt.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional fixed32 port = 5;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string user = 6;
 * @return {string}
 */
proto.msp.cnt.cfg.Umt.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string pass = 7;
 * @return {string}
 */
proto.msp.cnt.cfg.Umt.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool online = 8;
 * @return {boolean}
 */
proto.msp.cnt.cfg.Umt.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string rtsp = 9;
 * @return {string}
 */
proto.msp.cnt.cfg.Umt.prototype.getRtsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setRtsp = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional fixed32 ipcmedia = 10;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getIpcmedia = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setIpcmedia = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional fixed32 mtmedia = 11;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getMtmedia = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setMtmedia = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 conf = 12;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setConf = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 device = 13;
 * @return {number}
 */
proto.msp.cnt.cfg.Umt.prototype.getDevice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.Umt} returns this
 */
proto.msp.cnt.cfg.Umt.prototype.setDevice = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.UmtList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.UmtList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.UmtList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.UmtList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtList: jspb.Message.toObjectList(msg.getUmtList(),
    proto.msp.cnt.cfg.Umt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.UmtList}
 */
proto.msp.cnt.cfg.UmtList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.UmtList;
  return proto.msp.cnt.cfg.UmtList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.UmtList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.UmtList}
 */
proto.msp.cnt.cfg.UmtList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.Umt;
      reader.readMessage(value,proto.msp.cnt.cfg.Umt.deserializeBinaryFromReader);
      msg.addUmt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.UmtList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.UmtList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.UmtList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.Umt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Umt umt = 1;
 * @return {!Array<!proto.msp.cnt.cfg.Umt>}
 */
proto.msp.cnt.cfg.UmtList.prototype.getUmtList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.Umt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.Umt, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.Umt>} value
 * @return {!proto.msp.cnt.cfg.UmtList} returns this
*/
proto.msp.cnt.cfg.UmtList.prototype.setUmtList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.Umt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.Umt}
 */
proto.msp.cnt.cfg.UmtList.prototype.addUmt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.Umt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.UmtList} returns this
 */
proto.msp.cnt.cfg.UmtList.prototype.clearUmtList = function() {
  return this.setUmtList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.UmtState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.UmtState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.UmtState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.UmtState}
 */
proto.msp.cnt.cfg.UmtState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.UmtState;
  return proto.msp.cnt.cfg.UmtState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.UmtState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.UmtState}
 */
proto.msp.cnt.cfg.UmtState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.UmtState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.UmtState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.UmtState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtState} returns this
 */
proto.msp.cnt.cfg.UmtState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtState} returns this
 */
proto.msp.cnt.cfg.UmtState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.UmtDec.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.UmtDec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.UmtDec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtDec.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.UmtDec}
 */
proto.msp.cnt.cfg.UmtDec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.UmtDec;
  return proto.msp.cnt.cfg.UmtDec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.UmtDec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.UmtDec}
 */
proto.msp.cnt.cfg.UmtDec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.UmtDec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.UmtDec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.UmtDec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtDec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtDec.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtDec} returns this
 */
proto.msp.cnt.cfg.UmtDec.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtDec.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtDec} returns this
 */
proto.msp.cnt.cfg.UmtDec.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtDec.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtDec} returns this
 */
proto.msp.cnt.cfg.UmtDec.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.cnt.cfg.UmtDec.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.UmtDec} returns this
 */
proto.msp.cnt.cfg.UmtDec.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.UmtDecList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.UmtDecList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.UmtDecList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.UmtDecList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtDecList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtdecList: jspb.Message.toObjectList(msg.getUmtdecList(),
    proto.msp.cnt.cfg.UmtDec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.UmtDecList}
 */
proto.msp.cnt.cfg.UmtDecList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.UmtDecList;
  return proto.msp.cnt.cfg.UmtDecList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.UmtDecList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.UmtDecList}
 */
proto.msp.cnt.cfg.UmtDecList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.UmtDec;
      reader.readMessage(value,proto.msp.cnt.cfg.UmtDec.deserializeBinaryFromReader);
      msg.addUmtdec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.UmtDecList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.UmtDecList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.UmtDecList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtDecList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtdecList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.UmtDec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtDec umtdec = 1;
 * @return {!Array<!proto.msp.cnt.cfg.UmtDec>}
 */
proto.msp.cnt.cfg.UmtDecList.prototype.getUmtdecList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.UmtDec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.UmtDec, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.UmtDec>} value
 * @return {!proto.msp.cnt.cfg.UmtDecList} returns this
*/
proto.msp.cnt.cfg.UmtDecList.prototype.setUmtdecList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.UmtDec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.UmtDec}
 */
proto.msp.cnt.cfg.UmtDecList.prototype.addUmtdec = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.UmtDec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.UmtDecList} returns this
 */
proto.msp.cnt.cfg.UmtDecList.prototype.clearUmtdecList = function() {
  return this.setUmtdecList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.UmtStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.UmtStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.UmtStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.UmtStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateList: jspb.Message.toObjectList(msg.getStateList(),
    proto.msp.cnt.cfg.UmtState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.UmtStateList}
 */
proto.msp.cnt.cfg.UmtStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.UmtStateList;
  return proto.msp.cnt.cfg.UmtStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.UmtStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.UmtStateList}
 */
proto.msp.cnt.cfg.UmtStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.UmtState;
      reader.readMessage(value,proto.msp.cnt.cfg.UmtState.deserializeBinaryFromReader);
      msg.addState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.UmtStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.UmtStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.UmtStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.UmtStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.UmtState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtState state = 1;
 * @return {!Array<!proto.msp.cnt.cfg.UmtState>}
 */
proto.msp.cnt.cfg.UmtStateList.prototype.getStateList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.UmtState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.UmtState, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.UmtState>} value
 * @return {!proto.msp.cnt.cfg.UmtStateList} returns this
*/
proto.msp.cnt.cfg.UmtStateList.prototype.setStateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.UmtState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.UmtState}
 */
proto.msp.cnt.cfg.UmtStateList.prototype.addState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.UmtState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.UmtStateList} returns this
 */
proto.msp.cnt.cfg.UmtStateList.prototype.clearStateList = function() {
  return this.setStateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.DecMode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.DecMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.DecMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.DecMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    module: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.DecMode}
 */
proto.msp.cnt.cfg.DecMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.DecMode;
  return proto.msp.cnt.cfg.DecMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.DecMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.DecMode}
 */
proto.msp.cnt.cfg.DecMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.DecMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.DecMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.DecMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.DecMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.DecMode.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.DecMode} returns this
 */
proto.msp.cnt.cfg.DecMode.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.DecMode.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.DecMode} returns this
 */
proto.msp.cnt.cfg.DecMode.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 module = 3;
 * @return {number}
 */
proto.msp.cnt.cfg.DecMode.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.DecMode} returns this
 */
proto.msp.cnt.cfg.DecMode.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.DecModeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.DecModeList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.DecModeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.DecModeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.DecModeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    modeList: jspb.Message.toObjectList(msg.getModeList(),
    proto.msp.cnt.cfg.DecMode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.DecModeList}
 */
proto.msp.cnt.cfg.DecModeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.DecModeList;
  return proto.msp.cnt.cfg.DecModeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.DecModeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.DecModeList}
 */
proto.msp.cnt.cfg.DecModeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.DecMode;
      reader.readMessage(value,proto.msp.cnt.cfg.DecMode.deserializeBinaryFromReader);
      msg.addMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.DecModeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.DecModeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.DecModeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.DecModeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.DecMode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DecMode mode = 1;
 * @return {!Array<!proto.msp.cnt.cfg.DecMode>}
 */
proto.msp.cnt.cfg.DecModeList.prototype.getModeList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.DecMode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.DecMode, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.DecMode>} value
 * @return {!proto.msp.cnt.cfg.DecModeList} returns this
*/
proto.msp.cnt.cfg.DecModeList.prototype.setModeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.DecMode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.DecMode}
 */
proto.msp.cnt.cfg.DecModeList.prototype.addMode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.DecMode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.DecModeList} returns this
 */
proto.msp.cnt.cfg.DecModeList.prototype.clearModeList = function() {
  return this.setModeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdBox.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    main: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdBox}
 */
proto.msp.cnt.cfg.RdBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdBox;
  return proto.msp.cnt.cfg.RdBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdBox}
 */
proto.msp.cnt.cfg.RdBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getMain();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.msp.cnt.cfg.RdBox.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.RdBox} returns this
 */
proto.msp.cnt.cfg.RdBox.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 port = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.RdBox.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdBox} returns this
 */
proto.msp.cnt.cfg.RdBox.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool main = 3;
 * @return {boolean}
 */
proto.msp.cnt.cfg.RdBox.prototype.getMain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.RdBox} returns this
 */
proto.msp.cnt.cfg.RdBox.prototype.setMain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.RdBoxList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdBoxList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdBoxList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdBoxList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdBoxList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdboxList: jspb.Message.toObjectList(msg.getRdboxList(),
    proto.msp.cnt.cfg.RdBox.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdBoxList}
 */
proto.msp.cnt.cfg.RdBoxList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdBoxList;
  return proto.msp.cnt.cfg.RdBoxList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdBoxList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdBoxList}
 */
proto.msp.cnt.cfg.RdBoxList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.RdBox;
      reader.readMessage(value,proto.msp.cnt.cfg.RdBox.deserializeBinaryFromReader);
      msg.addRdbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdBoxList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdBoxList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdBoxList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdBoxList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.RdBox.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdBox rdbox = 1;
 * @return {!Array<!proto.msp.cnt.cfg.RdBox>}
 */
proto.msp.cnt.cfg.RdBoxList.prototype.getRdboxList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.RdBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.RdBox, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.RdBox>} value
 * @return {!proto.msp.cnt.cfg.RdBoxList} returns this
*/
proto.msp.cnt.cfg.RdBoxList.prototype.setRdboxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.RdBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.RdBox}
 */
proto.msp.cnt.cfg.RdBoxList.prototype.addRdbox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.RdBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.RdBoxList} returns this
 */
proto.msp.cnt.cfg.RdBoxList.prototype.clearRdboxList = function() {
  return this.setRdboxList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdPort.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdPort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdPort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPort.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lbox: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lslot: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lport: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lstate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fslot: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fport: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fstate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    module: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fit: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    phybox: jspb.Message.getFieldWithDefault(msg, 12, 0),
    phytype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    physlot: jspb.Message.getFieldWithDefault(msg, 14, 0),
    phyport: jspb.Message.getFieldWithDefault(msg, 15, 0),
    phystate: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdPort}
 */
proto.msp.cnt.cfg.RdPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdPort;
  return proto.msp.cnt.cfg.RdPort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdPort}
 */
proto.msp.cnt.cfg.RdPort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLbox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLslot(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLport(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLstate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFslot(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFport(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFstate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhybox(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhytype(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhyslot(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhyport(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhystate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdPort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdPort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getLbox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getLslot();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getLport();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getLstate();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getFslot();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getFport();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getFstate();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getFit();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPhybox();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getPhytype();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
  f = message.getPhyslot();
  if (f !== 0) {
    writer.writeFixed32(
      14,
      f
    );
  }
  f = message.getPhyport();
  if (f !== 0) {
    writer.writeFixed32(
      15,
      f
    );
  }
  f = message.getPhystate();
  if (f !== 0) {
    writer.writeFixed32(
      16,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 lbox = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getLbox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setLbox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 lslot = 4;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getLslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setLslot = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 lport = 5;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getLport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setLport = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 lstate = 6;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getLstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setLstate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 fslot = 7;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getFslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setFslot = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 fport = 8;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getFport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setFport = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 fstate = 9;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getFstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setFstate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 module = 10;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool fit = 11;
 * @return {boolean}
 */
proto.msp.cnt.cfg.RdPort.prototype.getFit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setFit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional fixed32 phybox = 12;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getPhybox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setPhybox = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 phytype = 13;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getPhytype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setPhytype = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional fixed32 physlot = 14;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getPhyslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setPhyslot = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional fixed32 phyport = 15;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getPhyport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setPhyport = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional fixed32 phystate = 16;
 * @return {number}
 */
proto.msp.cnt.cfg.RdPort.prototype.getPhystate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdPort} returns this
 */
proto.msp.cnt.cfg.RdPort.prototype.setPhystate = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.RdPortList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdPortList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdPortList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdPortList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPortList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdportList: jspb.Message.toObjectList(msg.getRdportList(),
    proto.msp.cnt.cfg.RdPort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdPortList}
 */
proto.msp.cnt.cfg.RdPortList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdPortList;
  return proto.msp.cnt.cfg.RdPortList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdPortList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdPortList}
 */
proto.msp.cnt.cfg.RdPortList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.RdPort;
      reader.readMessage(value,proto.msp.cnt.cfg.RdPort.deserializeBinaryFromReader);
      msg.addRdport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdPortList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdPortList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdPortList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPortList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.RdPort.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdPort rdport = 1;
 * @return {!Array<!proto.msp.cnt.cfg.RdPort>}
 */
proto.msp.cnt.cfg.RdPortList.prototype.getRdportList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.RdPort>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.RdPort, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.RdPort>} value
 * @return {!proto.msp.cnt.cfg.RdPortList} returns this
*/
proto.msp.cnt.cfg.RdPortList.prototype.setRdportList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.RdPort=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.RdPort}
 */
proto.msp.cnt.cfg.RdPortList.prototype.addRdport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.RdPort, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.RdPortList} returns this
 */
proto.msp.cnt.cfg.RdPortList.prototype.clearRdportList = function() {
  return this.setRdportList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    did: jspb.Message.getFieldWithDefault(msg, 2, 0),
    on: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    result: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdOutput}
 */
proto.msp.cnt.cfg.RdOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdOutput;
  return proto.msp.cnt.cfg.RdOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdOutput}
 */
proto.msp.cnt.cfg.RdOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getDid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getOn();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional fixed32 sid = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.RdOutput.prototype.getSid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdOutput} returns this
 */
proto.msp.cnt.cfg.RdOutput.prototype.setSid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 did = 2;
 * @return {number}
 */
proto.msp.cnt.cfg.RdOutput.prototype.getDid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.RdOutput} returns this
 */
proto.msp.cnt.cfg.RdOutput.prototype.setDid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool on = 3;
 * @return {boolean}
 */
proto.msp.cnt.cfg.RdOutput.prototype.getOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.cfg.RdOutput} returns this
 */
proto.msp.cnt.cfg.RdOutput.prototype.setOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string result = 4;
 * @return {string}
 */
proto.msp.cnt.cfg.RdOutput.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.RdOutput} returns this
 */
proto.msp.cnt.cfg.RdOutput.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.RdOutputList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdOutputList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdOutputList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdOutputList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdOutputList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdoutList: jspb.Message.toObjectList(msg.getRdoutList(),
    proto.msp.cnt.cfg.RdOutput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdOutputList}
 */
proto.msp.cnt.cfg.RdOutputList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdOutputList;
  return proto.msp.cnt.cfg.RdOutputList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdOutputList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdOutputList}
 */
proto.msp.cnt.cfg.RdOutputList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.RdOutput;
      reader.readMessage(value,proto.msp.cnt.cfg.RdOutput.deserializeBinaryFromReader);
      msg.addRdout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdOutputList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdOutputList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdOutputList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdOutputList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.RdOutput.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdOutput rdout = 1;
 * @return {!Array<!proto.msp.cnt.cfg.RdOutput>}
 */
proto.msp.cnt.cfg.RdOutputList.prototype.getRdoutList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.RdOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.RdOutput, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.RdOutput>} value
 * @return {!proto.msp.cnt.cfg.RdOutputList} returns this
*/
proto.msp.cnt.cfg.RdOutputList.prototype.setRdoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.RdOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.RdOutput}
 */
proto.msp.cnt.cfg.RdOutputList.prototype.addRdout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.RdOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.RdOutputList} returns this
 */
proto.msp.cnt.cfg.RdOutputList.prototype.clearRdoutList = function() {
  return this.setRdoutList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.BoxExt.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.BoxExt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.BoxExt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.BoxExt.toObject = function(includeInstance, msg) {
  var f, obj = {
    inid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.BoxExt}
 */
proto.msp.cnt.cfg.BoxExt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.BoxExt;
  return proto.msp.cnt.cfg.BoxExt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.BoxExt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.BoxExt}
 */
proto.msp.cnt.cfg.BoxExt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.BoxExt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.BoxExt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.BoxExt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.BoxExt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string inid = 1;
 * @return {string}
 */
proto.msp.cnt.cfg.BoxExt.prototype.getInid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.BoxExt} returns this
 */
proto.msp.cnt.cfg.BoxExt.prototype.setInid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string outid = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.BoxExt.prototype.getOutid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.BoxExt} returns this
 */
proto.msp.cnt.cfg.BoxExt.prototype.setOutid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.BoxExtList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.BoxExtList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.BoxExtList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.BoxExtList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.BoxExtList.toObject = function(includeInstance, msg) {
  var f, obj = {
    boxList: jspb.Message.toObjectList(msg.getBoxList(),
    proto.msp.cnt.cfg.BoxExt.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.BoxExtList}
 */
proto.msp.cnt.cfg.BoxExtList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.BoxExtList;
  return proto.msp.cnt.cfg.BoxExtList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.BoxExtList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.BoxExtList}
 */
proto.msp.cnt.cfg.BoxExtList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.BoxExt;
      reader.readMessage(value,proto.msp.cnt.cfg.BoxExt.deserializeBinaryFromReader);
      msg.addBox(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.BoxExtList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.BoxExtList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.BoxExtList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.BoxExtList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.BoxExt.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated BoxExt box = 1;
 * @return {!Array<!proto.msp.cnt.cfg.BoxExt>}
 */
proto.msp.cnt.cfg.BoxExtList.prototype.getBoxList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.BoxExt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.BoxExt, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.BoxExt>} value
 * @return {!proto.msp.cnt.cfg.BoxExtList} returns this
*/
proto.msp.cnt.cfg.BoxExtList.prototype.setBoxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.BoxExt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.BoxExt}
 */
proto.msp.cnt.cfg.BoxExtList.prototype.addBox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.BoxExt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.BoxExtList} returns this
 */
proto.msp.cnt.cfg.BoxExtList.prototype.clearBoxList = function() {
  return this.setBoxList([]);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.BoxExtList.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.BoxExtList} returns this
 */
proto.msp.cnt.cfg.BoxExtList.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.RdPortUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.RdPortUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPortUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && proto.msp.cnt.cfg.RdPort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.RdPortUpdate}
 */
proto.msp.cnt.cfg.RdPortUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.RdPortUpdate;
  return proto.msp.cnt.cfg.RdPortUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.RdPortUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.RdPortUpdate}
 */
proto.msp.cnt.cfg.RdPortUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.msp.cnt.cfg.RdPort;
      reader.readMessage(value,proto.msp.cnt.cfg.RdPort.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.RdPortUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.RdPortUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.RdPortUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.cnt.cfg.RdPort.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.RdPortUpdate} returns this
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RdPort context = 2;
 * @return {?proto.msp.cnt.cfg.RdPort}
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.getContext = function() {
  return /** @type{?proto.msp.cnt.cfg.RdPort} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.cfg.RdPort, 2));
};


/**
 * @param {?proto.msp.cnt.cfg.RdPort|undefined} value
 * @return {!proto.msp.cnt.cfg.RdPortUpdate} returns this
*/
proto.msp.cnt.cfg.RdPortUpdate.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.cfg.RdPortUpdate} returns this
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.cfg.RdPortUpdate.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.PrePlan.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.PrePlan.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.PrePlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.PrePlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.PrePlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enable: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    msp_cnt_pb.GroupMem.toObject, includeInstance),
    action: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.PrePlan}
 */
proto.msp.cnt.cfg.PrePlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.PrePlan;
  return proto.msp.cnt.cfg.PrePlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.PrePlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.PrePlan}
 */
proto.msp.cnt.cfg.PrePlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEnable(value);
      break;
    case 4:
      var value = new msp_cnt_pb.GroupMem;
      reader.readMessage(value,msp_cnt_pb.GroupMem.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.PrePlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.PrePlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.PrePlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.PrePlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnable();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      msp_cnt_pb.GroupMem.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.cfg.PrePlan.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
 */
proto.msp.cnt.cfg.PrePlan.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.cnt.cfg.PrePlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
 */
proto.msp.cnt.cfg.PrePlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 enable = 3;
 * @return {number}
 */
proto.msp.cnt.cfg.PrePlan.prototype.getEnable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
 */
proto.msp.cnt.cfg.PrePlan.prototype.setEnable = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated msp.cnt.GroupMem chn = 4;
 * @return {!Array<!proto.msp.cnt.GroupMem>}
 */
proto.msp.cnt.cfg.PrePlan.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.cnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, msp_cnt_pb.GroupMem, 4));
};


/**
 * @param {!Array<!proto.msp.cnt.GroupMem>} value
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
*/
proto.msp.cnt.cfg.PrePlan.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msp.cnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.GroupMem}
 */
proto.msp.cnt.cfg.PrePlan.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msp.cnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
 */
proto.msp.cnt.cfg.PrePlan.prototype.clearChnList = function() {
  return this.setChnList([]);
};


/**
 * optional fixed32 action = 5;
 * @return {number}
 */
proto.msp.cnt.cfg.PrePlan.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.cfg.PrePlan} returns this
 */
proto.msp.cnt.cfg.PrePlan.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.PrePlans.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.PrePlans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.PrePlans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.PrePlans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.PrePlans.toObject = function(includeInstance, msg) {
  var f, obj = {
    planList: jspb.Message.toObjectList(msg.getPlanList(),
    proto.msp.cnt.cfg.PrePlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.PrePlans}
 */
proto.msp.cnt.cfg.PrePlans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.PrePlans;
  return proto.msp.cnt.cfg.PrePlans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.PrePlans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.PrePlans}
 */
proto.msp.cnt.cfg.PrePlans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.cfg.PrePlan;
      reader.readMessage(value,proto.msp.cnt.cfg.PrePlan.deserializeBinaryFromReader);
      msg.addPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.PrePlans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.PrePlans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.PrePlans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.PrePlans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.cfg.PrePlan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PrePlan plan = 1;
 * @return {!Array<!proto.msp.cnt.cfg.PrePlan>}
 */
proto.msp.cnt.cfg.PrePlans.prototype.getPlanList = function() {
  return /** @type{!Array<!proto.msp.cnt.cfg.PrePlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.cfg.PrePlan, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.cfg.PrePlan>} value
 * @return {!proto.msp.cnt.cfg.PrePlans} returns this
*/
proto.msp.cnt.cfg.PrePlans.prototype.setPlanList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.cfg.PrePlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.PrePlan}
 */
proto.msp.cnt.cfg.PrePlans.prototype.addPlan = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.cfg.PrePlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.PrePlans} returns this
 */
proto.msp.cnt.cfg.PrePlans.prototype.clearPlanList = function() {
  return this.setPlanList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.GroupMems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.GroupMems.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.GroupMems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.GroupMems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.GroupMems.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    msp_cnt_pb.GroupMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.GroupMems}
 */
proto.msp.cnt.cfg.GroupMems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.GroupMems;
  return proto.msp.cnt.cfg.GroupMems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.GroupMems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.GroupMems}
 */
proto.msp.cnt.cfg.GroupMems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new msp_cnt_pb.GroupMem;
      reader.readMessage(value,msp_cnt_pb.GroupMem.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.GroupMems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.GroupMems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.GroupMems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.GroupMems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      msp_cnt_pb.GroupMem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated msp.cnt.GroupMem chn = 1;
 * @return {!Array<!proto.msp.cnt.GroupMem>}
 */
proto.msp.cnt.cfg.GroupMems.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.cnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, msp_cnt_pb.GroupMem, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.GroupMem>} value
 * @return {!proto.msp.cnt.cfg.GroupMems} returns this
*/
proto.msp.cnt.cfg.GroupMems.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.GroupMem}
 */
proto.msp.cnt.cfg.GroupMems.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.GroupMems} returns this
 */
proto.msp.cnt.cfg.GroupMems.prototype.clearChnList = function() {
  return this.setChnList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.cfg.Ids.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.cfg.Ids.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.cfg.Ids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.cfg.Ids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Ids.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.cfg.Ids}
 */
proto.msp.cnt.cfg.Ids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.cfg.Ids;
  return proto.msp.cnt.cfg.Ids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.cfg.Ids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.cfg.Ids}
 */
proto.msp.cnt.cfg.Ids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.cfg.Ids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.cfg.Ids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.cfg.Ids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.cfg.Ids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      1,
      f
    );
  }
};


/**
 * repeated fixed32 id = 1;
 * @return {!Array<number>}
 */
proto.msp.cnt.cfg.Ids.prototype.getIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.cnt.cfg.Ids} returns this
 */
proto.msp.cnt.cfg.Ids.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.cfg.Ids} returns this
 */
proto.msp.cnt.cfg.Ids.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.cfg.Ids} returns this
 */
proto.msp.cnt.cfg.Ids.prototype.clearIdList = function() {
  return this.setIdList([]);
};


goog.object.extend(exports, proto.msp.cnt.cfg);
