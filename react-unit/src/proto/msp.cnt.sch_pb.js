// source: msp.cnt.sch.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var msp_cnt_pb = require('./msp.cnt_pb.js');
goog.object.extend(proto, msp_cnt_pb);
goog.exportSymbol('proto.msp.cnt.sch.Poll', null, global);
goog.exportSymbol('proto.msp.cnt.sch.PollMem', null, global);
goog.exportSymbol('proto.msp.cnt.sch.PollMems', null, global);
goog.exportSymbol('proto.msp.cnt.sch.PollPrm', null, global);
goog.exportSymbol('proto.msp.cnt.sch.PollState', null, global);
goog.exportSymbol('proto.msp.cnt.sch.PollStates', null, global);
goog.exportSymbol('proto.msp.cnt.sch.Scheme', null, global);
goog.exportSymbol('proto.msp.cnt.sch.SchemeState', null, global);
goog.exportSymbol('proto.msp.cnt.sch.Schemes', null, global);
goog.exportSymbol('proto.msp.cnt.sch.Tswid', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.Scheme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.Scheme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.Scheme.displayName = 'proto.msp.cnt.sch.Scheme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.Schemes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sch.Schemes.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sch.Schemes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.Schemes.displayName = 'proto.msp.cnt.sch.Schemes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.Tswid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.Tswid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.Tswid.displayName = 'proto.msp.cnt.sch.Tswid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.PollPrm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.PollPrm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.PollPrm.displayName = 'proto.msp.cnt.sch.PollPrm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.Poll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sch.Poll.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sch.Poll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.Poll.displayName = 'proto.msp.cnt.sch.Poll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.PollMem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.PollMem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.PollMem.displayName = 'proto.msp.cnt.sch.PollMem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.PollMems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sch.PollMems.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sch.PollMems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.PollMems.displayName = 'proto.msp.cnt.sch.PollMems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.SchemeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.SchemeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.SchemeState.displayName = 'proto.msp.cnt.sch.SchemeState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.PollState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sch.PollState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.PollState.displayName = 'proto.msp.cnt.sch.PollState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sch.PollStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sch.PollStates.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sch.PollStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sch.PollStates.displayName = 'proto.msp.cnt.sch.PollStates';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.Scheme.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.Scheme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.Scheme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Scheme.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wndnum: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.Scheme}
 */
proto.msp.cnt.sch.Scheme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.Scheme;
  return proto.msp.cnt.sch.Scheme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.Scheme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.Scheme}
 */
proto.msp.cnt.sch.Scheme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWndnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.Scheme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.Scheme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.Scheme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Scheme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getWndnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.sch.Scheme.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sch.Scheme} returns this
 */
proto.msp.cnt.sch.Scheme.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.sch.Scheme.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Scheme} returns this
 */
proto.msp.cnt.sch.Scheme.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.cnt.sch.Scheme.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Scheme} returns this
 */
proto.msp.cnt.sch.Scheme.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 wndnum = 4;
 * @return {number}
 */
proto.msp.cnt.sch.Scheme.prototype.getWndnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Scheme} returns this
 */
proto.msp.cnt.sch.Scheme.prototype.setWndnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sch.Schemes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.Schemes.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.Schemes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.Schemes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Schemes.toObject = function(includeInstance, msg) {
  var f, obj = {
    isend: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    schemeList: jspb.Message.toObjectList(msg.getSchemeList(),
    proto.msp.cnt.sch.Scheme.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.Schemes}
 */
proto.msp.cnt.sch.Schemes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.Schemes;
  return proto.msp.cnt.sch.Schemes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.Schemes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.Schemes}
 */
proto.msp.cnt.sch.Schemes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsend(value);
      break;
    case 2:
      var value = new proto.msp.cnt.sch.Scheme;
      reader.readMessage(value,proto.msp.cnt.sch.Scheme.deserializeBinaryFromReader);
      msg.addScheme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.Schemes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.Schemes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.Schemes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Schemes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsend();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSchemeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.cnt.sch.Scheme.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isend = 1;
 * @return {boolean}
 */
proto.msp.cnt.sch.Schemes.prototype.getIsend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.sch.Schemes} returns this
 */
proto.msp.cnt.sch.Schemes.prototype.setIsend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Scheme scheme = 2;
 * @return {!Array<!proto.msp.cnt.sch.Scheme>}
 */
proto.msp.cnt.sch.Schemes.prototype.getSchemeList = function() {
  return /** @type{!Array<!proto.msp.cnt.sch.Scheme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sch.Scheme, 2));
};


/**
 * @param {!Array<!proto.msp.cnt.sch.Scheme>} value
 * @return {!proto.msp.cnt.sch.Schemes} returns this
*/
proto.msp.cnt.sch.Schemes.prototype.setSchemeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.cnt.sch.Scheme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sch.Scheme}
 */
proto.msp.cnt.sch.Schemes.prototype.addScheme = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.cnt.sch.Scheme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sch.Schemes} returns this
 */
proto.msp.cnt.sch.Schemes.prototype.clearSchemeList = function() {
  return this.setSchemeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.Tswid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.Tswid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.Tswid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Tswid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sceneid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.Tswid}
 */
proto.msp.cnt.sch.Tswid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.Tswid;
  return proto.msp.cnt.sch.Tswid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.Tswid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.Tswid}
 */
proto.msp.cnt.sch.Tswid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSceneid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.Tswid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.Tswid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.Tswid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Tswid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.sch.Tswid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Tswid} returns this
 */
proto.msp.cnt.sch.Tswid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 sceneid = 2;
 * @return {number}
 */
proto.msp.cnt.sch.Tswid.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Tswid} returns this
 */
proto.msp.cnt.sch.Tswid.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.cnt.sch.Tswid.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.Tswid} returns this
 */
proto.msp.cnt.sch.Tswid.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.PollPrm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.PollPrm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.PollPrm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollPrm.toObject = function(includeInstance, msg) {
  var f, obj = {
    keep: jspb.Message.getFieldWithDefault(msg, 1, 0),
    issame: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    interval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    beid: (f = msg.getBeid()) && proto.msp.cnt.sch.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.PollPrm}
 */
proto.msp.cnt.sch.PollPrm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.PollPrm;
  return proto.msp.cnt.sch.PollPrm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.PollPrm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.PollPrm}
 */
proto.msp.cnt.sch.PollPrm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setKeep(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setInterval(value);
      break;
    case 4:
      var value = new proto.msp.cnt.sch.Tswid;
      reader.readMessage(value,proto.msp.cnt.sch.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.PollPrm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.PollPrm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.PollPrm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollPrm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeep();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getIssame();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msp.cnt.sch.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 keep = 1;
 * @return {number}
 */
proto.msp.cnt.sch.PollPrm.prototype.getKeep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollPrm} returns this
 */
proto.msp.cnt.sch.PollPrm.prototype.setKeep = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool issame = 2;
 * @return {boolean}
 */
proto.msp.cnt.sch.PollPrm.prototype.getIssame = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.sch.PollPrm} returns this
 */
proto.msp.cnt.sch.PollPrm.prototype.setIssame = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 interval = 3;
 * @return {number}
 */
proto.msp.cnt.sch.PollPrm.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollPrm} returns this
 */
proto.msp.cnt.sch.PollPrm.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Tswid beid = 4;
 * @return {?proto.msp.cnt.sch.Tswid}
 */
proto.msp.cnt.sch.PollPrm.prototype.getBeid = function() {
  return /** @type{?proto.msp.cnt.sch.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.sch.Tswid, 4));
};


/**
 * @param {?proto.msp.cnt.sch.Tswid|undefined} value
 * @return {!proto.msp.cnt.sch.PollPrm} returns this
*/
proto.msp.cnt.sch.PollPrm.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.PollPrm} returns this
 */
proto.msp.cnt.sch.PollPrm.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.PollPrm.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sch.Poll.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.Poll.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.Poll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.Poll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Poll.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollmemList: jspb.Message.toObjectList(msg.getPollmemList(),
    proto.msp.cnt.sch.PollMem.toObject, includeInstance),
    param: (f = msg.getParam()) && proto.msp.cnt.sch.PollPrm.toObject(includeInstance, f),
    beid: (f = msg.getBeid()) && proto.msp.cnt.sch.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.Poll}
 */
proto.msp.cnt.sch.Poll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.Poll;
  return proto.msp.cnt.sch.Poll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.Poll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.Poll}
 */
proto.msp.cnt.sch.Poll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sch.PollMem;
      reader.readMessage(value,proto.msp.cnt.sch.PollMem.deserializeBinaryFromReader);
      msg.addPollmem(value);
      break;
    case 2:
      var value = new proto.msp.cnt.sch.PollPrm;
      reader.readMessage(value,proto.msp.cnt.sch.PollPrm.deserializeBinaryFromReader);
      msg.setParam(value);
      break;
    case 3:
      var value = new proto.msp.cnt.sch.Tswid;
      reader.readMessage(value,proto.msp.cnt.sch.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.Poll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.Poll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.Poll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.Poll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollmemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sch.PollMem.serializeBinaryToWriter
    );
  }
  f = message.getParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.cnt.sch.PollPrm.serializeBinaryToWriter
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.cnt.sch.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollMem pollmem = 1;
 * @return {!Array<!proto.msp.cnt.sch.PollMem>}
 */
proto.msp.cnt.sch.Poll.prototype.getPollmemList = function() {
  return /** @type{!Array<!proto.msp.cnt.sch.PollMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sch.PollMem, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sch.PollMem>} value
 * @return {!proto.msp.cnt.sch.Poll} returns this
*/
proto.msp.cnt.sch.Poll.prototype.setPollmemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sch.PollMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sch.PollMem}
 */
proto.msp.cnt.sch.Poll.prototype.addPollmem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sch.PollMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sch.Poll} returns this
 */
proto.msp.cnt.sch.Poll.prototype.clearPollmemList = function() {
  return this.setPollmemList([]);
};


/**
 * optional PollPrm param = 2;
 * @return {?proto.msp.cnt.sch.PollPrm}
 */
proto.msp.cnt.sch.Poll.prototype.getParam = function() {
  return /** @type{?proto.msp.cnt.sch.PollPrm} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.sch.PollPrm, 2));
};


/**
 * @param {?proto.msp.cnt.sch.PollPrm|undefined} value
 * @return {!proto.msp.cnt.sch.Poll} returns this
*/
proto.msp.cnt.sch.Poll.prototype.setParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.Poll} returns this
 */
proto.msp.cnt.sch.Poll.prototype.clearParam = function() {
  return this.setParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.Poll.prototype.hasParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tswid beid = 3;
 * @return {?proto.msp.cnt.sch.Tswid}
 */
proto.msp.cnt.sch.Poll.prototype.getBeid = function() {
  return /** @type{?proto.msp.cnt.sch.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.sch.Tswid, 3));
};


/**
 * @param {?proto.msp.cnt.sch.Tswid|undefined} value
 * @return {!proto.msp.cnt.sch.Poll} returns this
*/
proto.msp.cnt.sch.Poll.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.Poll} returns this
 */
proto.msp.cnt.sch.Poll.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.Poll.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.PollMem.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.PollMem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.PollMem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollMem.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.PollMem}
 */
proto.msp.cnt.sch.PollMem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.PollMem;
  return proto.msp.cnt.sch.PollMem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.PollMem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.PollMem}
 */
proto.msp.cnt.sch.PollMem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.PollMem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.PollMem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.PollMem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollMem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 interval = 1;
 * @return {number}
 */
proto.msp.cnt.sch.PollMem.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollMem} returns this
 */
proto.msp.cnt.sch.PollMem.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.sch.PollMem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollMem} returns this
 */
proto.msp.cnt.sch.PollMem.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.cnt.sch.PollMem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sch.PollMem} returns this
 */
proto.msp.cnt.sch.PollMem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sch.PollMems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.PollMems.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.PollMems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.PollMems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollMems.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollmemList: jspb.Message.toObjectList(msg.getPollmemList(),
    proto.msp.cnt.sch.PollMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.PollMems}
 */
proto.msp.cnt.sch.PollMems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.PollMems;
  return proto.msp.cnt.sch.PollMems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.PollMems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.PollMems}
 */
proto.msp.cnt.sch.PollMems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sch.PollMem;
      reader.readMessage(value,proto.msp.cnt.sch.PollMem.deserializeBinaryFromReader);
      msg.addPollmem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.PollMems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.PollMems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.PollMems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollMems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollmemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sch.PollMem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollMem pollmem = 1;
 * @return {!Array<!proto.msp.cnt.sch.PollMem>}
 */
proto.msp.cnt.sch.PollMems.prototype.getPollmemList = function() {
  return /** @type{!Array<!proto.msp.cnt.sch.PollMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sch.PollMem, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sch.PollMem>} value
 * @return {!proto.msp.cnt.sch.PollMems} returns this
*/
proto.msp.cnt.sch.PollMems.prototype.setPollmemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sch.PollMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sch.PollMem}
 */
proto.msp.cnt.sch.PollMems.prototype.addPollmem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sch.PollMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sch.PollMems} returns this
 */
proto.msp.cnt.sch.PollMems.prototype.clearPollmemList = function() {
  return this.setPollmemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.SchemeState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.SchemeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.SchemeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.SchemeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && msp_cnt_pb.ValueU32.toObject(includeInstance, f),
    scheme: (f = msg.getScheme()) && proto.msp.cnt.sch.Scheme.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.SchemeState}
 */
proto.msp.cnt.sch.SchemeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.SchemeState;
  return proto.msp.cnt.sch.SchemeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.SchemeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.SchemeState}
 */
proto.msp.cnt.sch.SchemeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new msp_cnt_pb.ValueU32;
      reader.readMessage(value,msp_cnt_pb.ValueU32.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.cnt.sch.Scheme;
      reader.readMessage(value,proto.msp.cnt.sch.Scheme.deserializeBinaryFromReader);
      msg.setScheme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.SchemeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.SchemeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.SchemeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.SchemeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      msp_cnt_pb.ValueU32.serializeBinaryToWriter
    );
  }
  f = message.getScheme();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.cnt.sch.Scheme.serializeBinaryToWriter
    );
  }
};


/**
 * optional msp.cnt.ValueU32 state = 1;
 * @return {?proto.msp.cnt.ValueU32}
 */
proto.msp.cnt.sch.SchemeState.prototype.getState = function() {
  return /** @type{?proto.msp.cnt.ValueU32} */ (
    jspb.Message.getWrapperField(this, msp_cnt_pb.ValueU32, 1));
};


/**
 * @param {?proto.msp.cnt.ValueU32|undefined} value
 * @return {!proto.msp.cnt.sch.SchemeState} returns this
*/
proto.msp.cnt.sch.SchemeState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.SchemeState} returns this
 */
proto.msp.cnt.sch.SchemeState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.SchemeState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scheme scheme = 2;
 * @return {?proto.msp.cnt.sch.Scheme}
 */
proto.msp.cnt.sch.SchemeState.prototype.getScheme = function() {
  return /** @type{?proto.msp.cnt.sch.Scheme} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.sch.Scheme, 2));
};


/**
 * @param {?proto.msp.cnt.sch.Scheme|undefined} value
 * @return {!proto.msp.cnt.sch.SchemeState} returns this
*/
proto.msp.cnt.sch.SchemeState.prototype.setScheme = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.SchemeState} returns this
 */
proto.msp.cnt.sch.SchemeState.prototype.clearScheme = function() {
  return this.setScheme(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.SchemeState.prototype.hasScheme = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.PollState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.PollState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.PollState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beid: (f = msg.getBeid()) && proto.msp.cnt.sch.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.PollState}
 */
proto.msp.cnt.sch.PollState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.PollState;
  return proto.msp.cnt.sch.PollState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.PollState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.PollState}
 */
proto.msp.cnt.sch.PollState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.msp.cnt.sch.Tswid;
      reader.readMessage(value,proto.msp.cnt.sch.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.PollState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.PollState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.PollState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.cnt.sch.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 state = 1;
 * @return {number}
 */
proto.msp.cnt.sch.PollState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollState} returns this
 */
proto.msp.cnt.sch.PollState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.sch.PollState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sch.PollState} returns this
 */
proto.msp.cnt.sch.PollState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Tswid beid = 3;
 * @return {?proto.msp.cnt.sch.Tswid}
 */
proto.msp.cnt.sch.PollState.prototype.getBeid = function() {
  return /** @type{?proto.msp.cnt.sch.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.sch.Tswid, 3));
};


/**
 * @param {?proto.msp.cnt.sch.Tswid|undefined} value
 * @return {!proto.msp.cnt.sch.PollState} returns this
*/
proto.msp.cnt.sch.PollState.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.sch.PollState} returns this
 */
proto.msp.cnt.sch.PollState.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.sch.PollState.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sch.PollStates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sch.PollStates.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sch.PollStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sch.PollStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollstateList: jspb.Message.toObjectList(msg.getPollstateList(),
    proto.msp.cnt.sch.PollState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sch.PollStates}
 */
proto.msp.cnt.sch.PollStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sch.PollStates;
  return proto.msp.cnt.sch.PollStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sch.PollStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sch.PollStates}
 */
proto.msp.cnt.sch.PollStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sch.PollState;
      reader.readMessage(value,proto.msp.cnt.sch.PollState.deserializeBinaryFromReader);
      msg.addPollstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sch.PollStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sch.PollStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sch.PollStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sch.PollStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sch.PollState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollState pollstate = 1;
 * @return {!Array<!proto.msp.cnt.sch.PollState>}
 */
proto.msp.cnt.sch.PollStates.prototype.getPollstateList = function() {
  return /** @type{!Array<!proto.msp.cnt.sch.PollState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sch.PollState, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sch.PollState>} value
 * @return {!proto.msp.cnt.sch.PollStates} returns this
*/
proto.msp.cnt.sch.PollStates.prototype.setPollstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sch.PollState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sch.PollState}
 */
proto.msp.cnt.sch.PollStates.prototype.addPollstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sch.PollState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sch.PollStates} returns this
 */
proto.msp.cnt.sch.PollStates.prototype.clearPollstateList = function() {
  return this.setPollstateList([]);
};


goog.object.extend(exports, proto.msp.cnt.sch);
