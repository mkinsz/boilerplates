// source: msp.cnt.sys.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msp.cnt.sys.AccessCode', null, global);
goog.exportSymbol('proto.msp.cnt.sys.CascChnl', null, global);
goog.exportSymbol('proto.msp.cnt.sys.CascChnls', null, global);
goog.exportSymbol('proto.msp.cnt.sys.CascPipe', null, global);
goog.exportSymbol('proto.msp.cnt.sys.CashChnlPrm', null, global);
goog.exportSymbol('proto.msp.cnt.sys.ELICENCEBIT', null, global);
goog.exportSymbol('proto.msp.cnt.sys.ELICENCEST', null, global);
goog.exportSymbol('proto.msp.cnt.sys.FileInfo', null, global);
goog.exportSymbol('proto.msp.cnt.sys.FileTrans', null, global);
goog.exportSymbol('proto.msp.cnt.sys.FilterForm', null, global);
goog.exportSymbol('proto.msp.cnt.sys.LicenceState', null, global);
goog.exportSymbol('proto.msp.cnt.sys.LicenceStateList', null, global);
goog.exportSymbol('proto.msp.cnt.sys.PlatInfo', null, global);
goog.exportSymbol('proto.msp.cnt.sys.PlatInfos', null, global);
goog.exportSymbol('proto.msp.cnt.sys.Recoder', null, global);
goog.exportSymbol('proto.msp.cnt.sys.RecoderBoard', null, global);
goog.exportSymbol('proto.msp.cnt.sys.RecoderBoards', null, global);
goog.exportSymbol('proto.msp.cnt.sys.Recoders', null, global);
goog.exportSymbol('proto.msp.cnt.sys.Resource', null, global);
goog.exportSymbol('proto.msp.cnt.sys.SysLicence', null, global);
goog.exportSymbol('proto.msp.cnt.sys.Time', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.FilterForm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.FilterForm.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.FilterForm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.FilterForm.displayName = 'proto.msp.cnt.sys.FilterForm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.Time.displayName = 'proto.msp.cnt.sys.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.AccessCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.AccessCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.AccessCode.displayName = 'proto.msp.cnt.sys.AccessCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.SysLicence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.SysLicence.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.SysLicence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.SysLicence.displayName = 'proto.msp.cnt.sys.SysLicence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.FileTrans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.FileTrans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.FileTrans.displayName = 'proto.msp.cnt.sys.FileTrans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.LicenceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.LicenceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.LicenceState.displayName = 'proto.msp.cnt.sys.LicenceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.LicenceStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.LicenceStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.LicenceStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.LicenceStateList.displayName = 'proto.msp.cnt.sys.LicenceStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.FileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.FileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.FileInfo.displayName = 'proto.msp.cnt.sys.FileInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.Resource.displayName = 'proto.msp.cnt.sys.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.Recoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.Recoder.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.Recoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.Recoder.displayName = 'proto.msp.cnt.sys.Recoder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.Recoders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.Recoders.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.Recoders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.Recoders.displayName = 'proto.msp.cnt.sys.Recoders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.RecoderBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.RecoderBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.RecoderBoard.displayName = 'proto.msp.cnt.sys.RecoderBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.RecoderBoards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.RecoderBoards.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.RecoderBoards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.RecoderBoards.displayName = 'proto.msp.cnt.sys.RecoderBoards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.PlatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.PlatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.PlatInfo.displayName = 'proto.msp.cnt.sys.PlatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.PlatInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.PlatInfos.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.PlatInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.PlatInfos.displayName = 'proto.msp.cnt.sys.PlatInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.CascChnl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.CascChnl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.CascChnl.displayName = 'proto.msp.cnt.sys.CascChnl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.CascChnls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.CascChnls.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.CascChnls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.CascChnls.displayName = 'proto.msp.cnt.sys.CascChnls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.CascPipe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.sys.CascPipe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.CascPipe.displayName = 'proto.msp.cnt.sys.CascPipe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.sys.CashChnlPrm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.sys.CashChnlPrm.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.sys.CashChnlPrm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.sys.CashChnlPrm.displayName = 'proto.msp.cnt.sys.CashChnlPrm';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.FilterForm.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.FilterForm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.FilterForm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.FilterForm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FilterForm.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ipList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.FilterForm}
 */
proto.msp.cnt.sys.FilterForm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.FilterForm;
  return proto.msp.cnt.sys.FilterForm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.FilterForm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.FilterForm}
 */
proto.msp.cnt.sys.FilterForm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.FilterForm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.FilterForm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.FilterForm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FilterForm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getIpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional fixed32 value = 1;
 * @return {number}
 */
proto.msp.cnt.sys.FilterForm.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.FilterForm} returns this
 */
proto.msp.cnt.sys.FilterForm.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string ip = 2;
 * @return {!Array<string>}
 */
proto.msp.cnt.sys.FilterForm.prototype.getIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msp.cnt.sys.FilterForm} returns this
 */
proto.msp.cnt.sys.FilterForm.prototype.setIpList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.FilterForm} returns this
 */
proto.msp.cnt.sys.FilterForm.prototype.addIp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.FilterForm} returns this
 */
proto.msp.cnt.sys.FilterForm.prototype.clearIpList = function() {
  return this.setIpList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    zone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    year: jspb.Message.getFieldWithDefault(msg, 2, 0),
    month: jspb.Message.getFieldWithDefault(msg, 3, 0),
    day: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hour: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    second: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.Time}
 */
proto.msp.cnt.sys.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.Time;
  return proto.msp.cnt.sys.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.Time}
 */
proto.msp.cnt.sys.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMonth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHour(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getHour();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
};


/**
 * optional string zone = 1;
 * @return {string}
 */
proto.msp.cnt.sys.Time.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 year = 2;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 month = 3;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 day = 4;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 hour = 5;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 minute = 6;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setMinute = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 second = 7;
 * @return {number}
 */
proto.msp.cnt.sys.Time.prototype.getSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Time} returns this
 */
proto.msp.cnt.sys.Time.prototype.setSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.AccessCode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.AccessCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.AccessCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.AccessCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opt: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.AccessCode}
 */
proto.msp.cnt.sys.AccessCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.AccessCode;
  return proto.msp.cnt.sys.AccessCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.AccessCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.AccessCode}
 */
proto.msp.cnt.sys.AccessCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.AccessCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.AccessCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.AccessCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.AccessCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpt();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.msp.cnt.sys.AccessCode.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.AccessCode} returns this
 */
proto.msp.cnt.sys.AccessCode.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool opt = 2;
 * @return {boolean}
 */
proto.msp.cnt.sys.AccessCode.prototype.getOpt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.sys.AccessCode} returns this
 */
proto.msp.cnt.sys.AccessCode.prototype.setOpt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.SysLicence.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.SysLicence.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.SysLicence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.SysLicence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.SysLicence.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    enccap: jspb.Message.getFieldWithDefault(msg, 6, 0),
    module: jspb.Message.getFieldWithDefault(msg, 7, 0),
    expdataList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.SysLicence}
 */
proto.msp.cnt.sys.SysLicence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.SysLicence;
  return proto.msp.cnt.sys.SysLicence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.SysLicence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.SysLicence}
 */
proto.msp.cnt.sys.SysLicence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEnccap(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setExpdataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.SysLicence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.SysLicence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.SysLicence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.SysLicence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getEnccap();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getExpdataList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      8,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.msp.cnt.sys.SysLicence.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.msp.cnt.sys.SysLicence.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.msp.cnt.sys.SysLicence.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.cnt.sys.SysLicence.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 state = 5;
 * @return {number}
 */
proto.msp.cnt.sys.SysLicence.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 enccap = 6;
 * @return {number}
 */
proto.msp.cnt.sys.SysLicence.prototype.getEnccap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setEnccap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 module = 7;
 * @return {number}
 */
proto.msp.cnt.sys.SysLicence.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated fixed32 expdata = 8;
 * @return {!Array<number>}
 */
proto.msp.cnt.sys.SysLicence.prototype.getExpdataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.setExpdataList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.addExpdata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.SysLicence} returns this
 */
proto.msp.cnt.sys.SysLicence.prototype.clearExpdataList = function() {
  return this.setExpdataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.FileTrans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.FileTrans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.FileTrans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FileTrans.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    path: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.FileTrans}
 */
proto.msp.cnt.sys.FileTrans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.FileTrans;
  return proto.msp.cnt.sys.FileTrans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.FileTrans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.FileTrans}
 */
proto.msp.cnt.sys.FileTrans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.FileTrans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.FileTrans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.FileTrans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FileTrans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.msp.cnt.sys.FileTrans.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.FileTrans} returns this
 */
proto.msp.cnt.sys.FileTrans.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 port = 2;
 * @return {number}
 */
proto.msp.cnt.sys.FileTrans.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.FileTrans} returns this
 */
proto.msp.cnt.sys.FileTrans.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.msp.cnt.sys.FileTrans.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.FileTrans} returns this
 */
proto.msp.cnt.sys.FileTrans.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.msp.cnt.sys.FileTrans.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.FileTrans} returns this
 */
proto.msp.cnt.sys.FileTrans.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.msp.cnt.sys.FileTrans.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.FileTrans} returns this
 */
proto.msp.cnt.sys.FileTrans.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.LicenceState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.LicenceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.LicenceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.LicenceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    effecdue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.LicenceState}
 */
proto.msp.cnt.sys.LicenceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.LicenceState;
  return proto.msp.cnt.sys.LicenceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.LicenceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.LicenceState}
 */
proto.msp.cnt.sys.LicenceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEffecdue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.LicenceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.LicenceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.LicenceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.LicenceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEffecdue();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 module = 1;
 * @return {number}
 */
proto.msp.cnt.sys.LicenceState.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.LicenceState} returns this
 */
proto.msp.cnt.sys.LicenceState.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool value = 2;
 * @return {boolean}
 */
proto.msp.cnt.sys.LicenceState.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.sys.LicenceState} returns this
 */
proto.msp.cnt.sys.LicenceState.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 effecdue = 3;
 * @return {number}
 */
proto.msp.cnt.sys.LicenceState.prototype.getEffecdue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.LicenceState} returns this
 */
proto.msp.cnt.sys.LicenceState.prototype.setEffecdue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.LicenceStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.LicenceStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.LicenceStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.LicenceStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.LicenceStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenceList: jspb.Message.toObjectList(msg.getLicenceList(),
    proto.msp.cnt.sys.LicenceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.LicenceStateList}
 */
proto.msp.cnt.sys.LicenceStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.LicenceStateList;
  return proto.msp.cnt.sys.LicenceStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.LicenceStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.LicenceStateList}
 */
proto.msp.cnt.sys.LicenceStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sys.LicenceState;
      reader.readMessage(value,proto.msp.cnt.sys.LicenceState.deserializeBinaryFromReader);
      msg.addLicence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.LicenceStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.LicenceStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.LicenceStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.LicenceStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sys.LicenceState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LicenceState licence = 1;
 * @return {!Array<!proto.msp.cnt.sys.LicenceState>}
 */
proto.msp.cnt.sys.LicenceStateList.prototype.getLicenceList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.LicenceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.LicenceState, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.LicenceState>} value
 * @return {!proto.msp.cnt.sys.LicenceStateList} returns this
*/
proto.msp.cnt.sys.LicenceStateList.prototype.setLicenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sys.LicenceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.LicenceState}
 */
proto.msp.cnt.sys.LicenceStateList.prototype.addLicence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sys.LicenceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.LicenceStateList} returns this
 */
proto.msp.cnt.sys.LicenceStateList.prototype.clearLicenceList = function() {
  return this.setLicenceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.FileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.FileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.FileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    checksum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    opt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.FileInfo}
 */
proto.msp.cnt.sys.FileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.FileInfo;
  return proto.msp.cnt.sys.FileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.FileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.FileInfo}
 */
proto.msp.cnt.sys.FileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChecksum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.FileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.FileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.FileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.FileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getChecksum();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 size = 1;
 * @return {number}
 */
proto.msp.cnt.sys.FileInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.FileInfo} returns this
 */
proto.msp.cnt.sys.FileInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 checksum = 2;
 * @return {number}
 */
proto.msp.cnt.sys.FileInfo.prototype.getChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.FileInfo} returns this
 */
proto.msp.cnt.sys.FileInfo.prototype.setChecksum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.cnt.sys.FileInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.FileInfo} returns this
 */
proto.msp.cnt.sys.FileInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 opt = 4;
 * @return {number}
 */
proto.msp.cnt.sys.FileInfo.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.FileInfo} returns this
 */
proto.msp.cnt.sys.FileInfo.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isuse: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.Resource}
 */
proto.msp.cnt.sys.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.Resource;
  return proto.msp.cnt.sys.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.Resource}
 */
proto.msp.cnt.sys.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setIsuse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getIsuse();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.cnt.sys.Resource.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Resource} returns this
 */
proto.msp.cnt.sys.Resource.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.cnt.sys.Resource.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Resource} returns this
 */
proto.msp.cnt.sys.Resource.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.cnt.sys.Resource.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Resource} returns this
 */
proto.msp.cnt.sys.Resource.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 isuse = 4;
 * @return {number}
 */
proto.msp.cnt.sys.Resource.prototype.getIsuse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Resource} returns this
 */
proto.msp.cnt.sys.Resource.prototype.setIsuse = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.Recoder.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.Recoder.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.Recoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.Recoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Recoder.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    states: jspb.Message.getFieldWithDefault(msg, 5, 0),
    resourceList: jspb.Message.toObjectList(msg.getResourceList(),
    proto.msp.cnt.sys.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.Recoder}
 */
proto.msp.cnt.sys.Recoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.Recoder;
  return proto.msp.cnt.sys.Recoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.Recoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.Recoder}
 */
proto.msp.cnt.sys.Recoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStates(value);
      break;
    case 6:
      var value = new proto.msp.cnt.sys.Resource;
      reader.readMessage(value,proto.msp.cnt.sys.Resource.deserializeBinaryFromReader);
      msg.addResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.Recoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.Recoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.Recoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Recoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getStates();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getResourceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.msp.cnt.sys.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.sys.Recoder.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.sys.Recoder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.cnt.sys.Recoder.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.cnt.sys.Recoder.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 states = 5;
 * @return {number}
 */
proto.msp.cnt.sys.Recoder.prototype.getStates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.setStates = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Resource resource = 6;
 * @return {!Array<!proto.msp.cnt.sys.Resource>}
 */
proto.msp.cnt.sys.Recoder.prototype.getResourceList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.Resource, 6));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.Resource>} value
 * @return {!proto.msp.cnt.sys.Recoder} returns this
*/
proto.msp.cnt.sys.Recoder.prototype.setResourceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msp.cnt.sys.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.Resource}
 */
proto.msp.cnt.sys.Recoder.prototype.addResource = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msp.cnt.sys.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.Recoder} returns this
 */
proto.msp.cnt.sys.Recoder.prototype.clearResourceList = function() {
  return this.setResourceList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.Recoders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.Recoders.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.Recoders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.Recoders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Recoders.toObject = function(includeInstance, msg) {
  var f, obj = {
    recoderList: jspb.Message.toObjectList(msg.getRecoderList(),
    proto.msp.cnt.sys.Recoder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.Recoders}
 */
proto.msp.cnt.sys.Recoders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.Recoders;
  return proto.msp.cnt.sys.Recoders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.Recoders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.Recoders}
 */
proto.msp.cnt.sys.Recoders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sys.Recoder;
      reader.readMessage(value,proto.msp.cnt.sys.Recoder.deserializeBinaryFromReader);
      msg.addRecoder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.Recoders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.Recoders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.Recoders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.Recoders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecoderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sys.Recoder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recoder recoder = 1;
 * @return {!Array<!proto.msp.cnt.sys.Recoder>}
 */
proto.msp.cnt.sys.Recoders.prototype.getRecoderList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.Recoder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.Recoder, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.Recoder>} value
 * @return {!proto.msp.cnt.sys.Recoders} returns this
*/
proto.msp.cnt.sys.Recoders.prototype.setRecoderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sys.Recoder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.Recoder}
 */
proto.msp.cnt.sys.Recoders.prototype.addRecoder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sys.Recoder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.Recoders} returns this
 */
proto.msp.cnt.sys.Recoders.prototype.clearRecoderList = function() {
  return this.setRecoderList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.RecoderBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.RecoderBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.RecoderBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    portnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.RecoderBoard}
 */
proto.msp.cnt.sys.RecoderBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.RecoderBoard;
  return proto.msp.cnt.sys.RecoderBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.RecoderBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.RecoderBoard}
 */
proto.msp.cnt.sys.RecoderBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPortnum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.RecoderBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.RecoderBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.RecoderBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getPortnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.RecoderBoard} returns this
 */
proto.msp.cnt.sys.RecoderBoard.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.RecoderBoard} returns this
 */
proto.msp.cnt.sys.RecoderBoard.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.RecoderBoard} returns this
 */
proto.msp.cnt.sys.RecoderBoard.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 portnum = 4;
 * @return {number}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.getPortnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.RecoderBoard} returns this
 */
proto.msp.cnt.sys.RecoderBoard.prototype.setPortnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 state = 5;
 * @return {number}
 */
proto.msp.cnt.sys.RecoderBoard.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.RecoderBoard} returns this
 */
proto.msp.cnt.sys.RecoderBoard.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.RecoderBoards.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.RecoderBoards.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.RecoderBoards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.RecoderBoards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.RecoderBoards.toObject = function(includeInstance, msg) {
  var f, obj = {
    recoderboardList: jspb.Message.toObjectList(msg.getRecoderboardList(),
    proto.msp.cnt.sys.RecoderBoard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.RecoderBoards}
 */
proto.msp.cnt.sys.RecoderBoards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.RecoderBoards;
  return proto.msp.cnt.sys.RecoderBoards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.RecoderBoards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.RecoderBoards}
 */
proto.msp.cnt.sys.RecoderBoards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sys.RecoderBoard;
      reader.readMessage(value,proto.msp.cnt.sys.RecoderBoard.deserializeBinaryFromReader);
      msg.addRecoderboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.RecoderBoards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.RecoderBoards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.RecoderBoards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.RecoderBoards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecoderboardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sys.RecoderBoard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RecoderBoard recoderboard = 1;
 * @return {!Array<!proto.msp.cnt.sys.RecoderBoard>}
 */
proto.msp.cnt.sys.RecoderBoards.prototype.getRecoderboardList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.RecoderBoard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.RecoderBoard, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.RecoderBoard>} value
 * @return {!proto.msp.cnt.sys.RecoderBoards} returns this
*/
proto.msp.cnt.sys.RecoderBoards.prototype.setRecoderboardList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sys.RecoderBoard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.RecoderBoard}
 */
proto.msp.cnt.sys.RecoderBoards.prototype.addRecoderboard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sys.RecoderBoard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.RecoderBoards} returns this
 */
proto.msp.cnt.sys.RecoderBoards.prototype.clearRecoderboardList = function() {
  return this.setRecoderboardList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.PlatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.PlatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.PlatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.PlatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mmsp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    box: jspb.Message.getFieldWithDefault(msg, 5, 0),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    enable: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 8, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 9, ""),
    port: jspb.Message.getFieldWithDefault(msg, 10, 0),
    username: jspb.Message.getFieldWithDefault(msg, 11, ""),
    password: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.PlatInfo}
 */
proto.msp.cnt.sys.PlatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.PlatInfo;
  return proto.msp.cnt.sys.PlatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.PlatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.PlatInfo}
 */
proto.msp.cnt.sys.PlatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMmsp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEnable(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.PlatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.PlatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.PlatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.PlatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMmsp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getEnable();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string mmsp = 1;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getMmsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setMmsp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string msp = 2;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getMsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setMsp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 box = 5;
 * @return {number}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 state = 6;
 * @return {number}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 enable = 7;
 * @return {number}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getEnable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setEnable = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string ip = 8;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string domain = 9;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional fixed32 port = 10;
 * @return {number}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string username = 11;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string password = 12;
 * @return {string}
 */
proto.msp.cnt.sys.PlatInfo.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.PlatInfo} returns this
 */
proto.msp.cnt.sys.PlatInfo.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.PlatInfos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.PlatInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.PlatInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.PlatInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.PlatInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    platinfoList: jspb.Message.toObjectList(msg.getPlatinfoList(),
    proto.msp.cnt.sys.PlatInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.PlatInfos}
 */
proto.msp.cnt.sys.PlatInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.PlatInfos;
  return proto.msp.cnt.sys.PlatInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.PlatInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.PlatInfos}
 */
proto.msp.cnt.sys.PlatInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sys.PlatInfo;
      reader.readMessage(value,proto.msp.cnt.sys.PlatInfo.deserializeBinaryFromReader);
      msg.addPlatinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.PlatInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.PlatInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.PlatInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.PlatInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sys.PlatInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlatInfo platinfo = 1;
 * @return {!Array<!proto.msp.cnt.sys.PlatInfo>}
 */
proto.msp.cnt.sys.PlatInfos.prototype.getPlatinfoList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.PlatInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.PlatInfo, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.PlatInfo>} value
 * @return {!proto.msp.cnt.sys.PlatInfos} returns this
*/
proto.msp.cnt.sys.PlatInfos.prototype.setPlatinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sys.PlatInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.PlatInfo}
 */
proto.msp.cnt.sys.PlatInfos.prototype.addPlatinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sys.PlatInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.PlatInfos} returns this
 */
proto.msp.cnt.sys.PlatInfos.prototype.clearPlatinfoList = function() {
  return this.setPlatinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.CascChnl.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.CascChnl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.CascChnl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascChnl.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cbox: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cslot: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cport: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cip: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.CascChnl}
 */
proto.msp.cnt.sys.CascChnl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.CascChnl;
  return proto.msp.cnt.sys.CascChnl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.CascChnl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.CascChnl}
 */
proto.msp.cnt.sys.CascChnl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCbox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCslot(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCport(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.CascChnl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.CascChnl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.CascChnl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascChnl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getCbox();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getCslot();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getCport();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getCip();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 cbox = 5;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getCbox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setCbox = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 cslot = 6;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getCslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setCslot = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 cport = 7;
 * @return {number}
 */
proto.msp.cnt.sys.CascChnl.prototype.getCport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setCport = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string cip = 8;
 * @return {string}
 */
proto.msp.cnt.sys.CascChnl.prototype.getCip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.CascChnl} returns this
 */
proto.msp.cnt.sys.CascChnl.prototype.setCip = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.CascChnls.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.CascChnls.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.CascChnls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.CascChnls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascChnls.toObject = function(includeInstance, msg) {
  var f, obj = {
    cascchnlList: jspb.Message.toObjectList(msg.getCascchnlList(),
    proto.msp.cnt.sys.CascChnl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.CascChnls}
 */
proto.msp.cnt.sys.CascChnls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.CascChnls;
  return proto.msp.cnt.sys.CascChnls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.CascChnls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.CascChnls}
 */
proto.msp.cnt.sys.CascChnls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.sys.CascChnl;
      reader.readMessage(value,proto.msp.cnt.sys.CascChnl.deserializeBinaryFromReader);
      msg.addCascchnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.CascChnls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.CascChnls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.CascChnls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascChnls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCascchnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.sys.CascChnl.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CascChnl cascchnl = 1;
 * @return {!Array<!proto.msp.cnt.sys.CascChnl>}
 */
proto.msp.cnt.sys.CascChnls.prototype.getCascchnlList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.CascChnl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.CascChnl, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.CascChnl>} value
 * @return {!proto.msp.cnt.sys.CascChnls} returns this
*/
proto.msp.cnt.sys.CascChnls.prototype.setCascchnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.sys.CascChnl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.CascChnl}
 */
proto.msp.cnt.sys.CascChnls.prototype.addCascchnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.sys.CascChnl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.CascChnls} returns this
 */
proto.msp.cnt.sys.CascChnls.prototype.clearCascchnlList = function() {
  return this.setCascchnlList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.CascPipe.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.CascPipe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.CascPipe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascPipe.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    param: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.CascPipe}
 */
proto.msp.cnt.sys.CascPipe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.CascPipe;
  return proto.msp.cnt.sys.CascPipe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.CascPipe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.CascPipe}
 */
proto.msp.cnt.sys.CascPipe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.CascPipe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.CascPipe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.CascPipe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CascPipe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.cnt.sys.CascPipe.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.CascPipe} returns this
 */
proto.msp.cnt.sys.CascPipe.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.msp.cnt.sys.CascPipe.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.CascPipe} returns this
 */
proto.msp.cnt.sys.CascPipe.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string param = 3;
 * @return {string}
 */
proto.msp.cnt.sys.CascPipe.prototype.getParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.sys.CascPipe} returns this
 */
proto.msp.cnt.sys.CascPipe.prototype.setParam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.sys.CashChnlPrm.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.sys.CashChnlPrm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.sys.CashChnlPrm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CashChnlPrm.toObject = function(includeInstance, msg) {
  var f, obj = {
    opt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cascchnlList: jspb.Message.toObjectList(msg.getCascchnlList(),
    proto.msp.cnt.sys.CascChnl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.sys.CashChnlPrm}
 */
proto.msp.cnt.sys.CashChnlPrm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.sys.CashChnlPrm;
  return proto.msp.cnt.sys.CashChnlPrm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.sys.CashChnlPrm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.sys.CashChnlPrm}
 */
proto.msp.cnt.sys.CashChnlPrm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOpt(value);
      break;
    case 2:
      var value = new proto.msp.cnt.sys.CascChnl;
      reader.readMessage(value,proto.msp.cnt.sys.CascChnl.deserializeBinaryFromReader);
      msg.addCascchnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.sys.CashChnlPrm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.sys.CashChnlPrm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.sys.CashChnlPrm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpt();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getCascchnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.cnt.sys.CascChnl.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 opt = 1;
 * @return {number}
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.sys.CashChnlPrm} returns this
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CascChnl cascchnl = 2;
 * @return {!Array<!proto.msp.cnt.sys.CascChnl>}
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.getCascchnlList = function() {
  return /** @type{!Array<!proto.msp.cnt.sys.CascChnl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.sys.CascChnl, 2));
};


/**
 * @param {!Array<!proto.msp.cnt.sys.CascChnl>} value
 * @return {!proto.msp.cnt.sys.CashChnlPrm} returns this
*/
proto.msp.cnt.sys.CashChnlPrm.prototype.setCascchnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.cnt.sys.CascChnl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.sys.CascChnl}
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.addCascchnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.cnt.sys.CascChnl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.sys.CashChnlPrm} returns this
 */
proto.msp.cnt.sys.CashChnlPrm.prototype.clearCascchnlList = function() {
  return this.setCascchnlList([]);
};


/**
 * @enum {number}
 */
proto.msp.cnt.sys.ELICENCEST = {
  ELICNONE: 0,
  ELICNOT: 20093,
  ELICEXP: 20094,
  ELICTYPEERR: 20095,
  ELICEHOSTERR: 20096,
  ELICEDATAERR: 20097
};

/**
 * @enum {number}
 */
proto.msp.cnt.sys.ELICENCEBIT = {
  ELICBITKVM: 0,
  ELICBITVIDEO: 1,
  ELICBITAUDIO: 2,
  ELICBITREST: 3,
  ELICBITZK: 4,
  ELICBITVS: 5
};

goog.object.extend(exports, proto.msp.cnt.sys);
