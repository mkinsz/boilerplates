// source: msp.mnt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.msp.mnt.AccessCode', null, global);
goog.exportSymbol('proto.msp.mnt.Advanced', null, global);
goog.exportSymbol('proto.msp.mnt.BackState', null, global);
goog.exportSymbol('proto.msp.mnt.BackTrans', null, global);
goog.exportSymbol('proto.msp.mnt.BackTransList', null, global);
goog.exportSymbol('proto.msp.mnt.BatchCfg', null, global);
goog.exportSymbol('proto.msp.mnt.BatchCfgList', null, global);
goog.exportSymbol('proto.msp.mnt.BatchInfo', null, global);
goog.exportSymbol('proto.msp.mnt.BatchProg', null, global);
goog.exportSymbol('proto.msp.mnt.BoxExt', null, global);
goog.exportSymbol('proto.msp.mnt.BoxExtList', null, global);
goog.exportSymbol('proto.msp.mnt.CascChnl', null, global);
goog.exportSymbol('proto.msp.mnt.CascChnls', null, global);
goog.exportSymbol('proto.msp.mnt.CascPipe', null, global);
goog.exportSymbol('proto.msp.mnt.CashChnlPrm', null, global);
goog.exportSymbol('proto.msp.mnt.ChnBasic', null, global);
goog.exportSymbol('proto.msp.mnt.ChnEdid', null, global);
goog.exportSymbol('proto.msp.mnt.ChnGroup', null, global);
goog.exportSymbol('proto.msp.mnt.ChnGroupList', null, global);
goog.exportSymbol('proto.msp.mnt.ChnGroupState', null, global);
goog.exportSymbol('proto.msp.mnt.ChnInfo', null, global);
goog.exportSymbol('proto.msp.mnt.ChnInfoList', null, global);
goog.exportSymbol('proto.msp.mnt.ChnList', null, global);
goog.exportSymbol('proto.msp.mnt.ChnMode', null, global);
goog.exportSymbol('proto.msp.mnt.ChnNetEnalbe', null, global);
goog.exportSymbol('proto.msp.mnt.ChnNetEnalbeList', null, global);
goog.exportSymbol('proto.msp.mnt.ComCfg', null, global);
goog.exportSymbol('proto.msp.mnt.ComPtz', null, global);
goog.exportSymbol('proto.msp.mnt.DecMode', null, global);
goog.exportSymbol('proto.msp.mnt.DecModeList', null, global);
goog.exportSymbol('proto.msp.mnt.DevBasic', null, global);
goog.exportSymbol('proto.msp.mnt.DevInfo', null, global);
goog.exportSymbol('proto.msp.mnt.DevList', null, global);
goog.exportSymbol('proto.msp.mnt.EDATAST', null, global);
goog.exportSymbol('proto.msp.mnt.EDEVTYPE', null, global);
goog.exportSymbol('proto.msp.mnt.ELICENCEBIT', null, global);
goog.exportSymbol('proto.msp.mnt.ELICENCEST', null, global);
goog.exportSymbol('proto.msp.mnt.EMMETH', null, global);
goog.exportSymbol('proto.msp.mnt.Edid', null, global);
goog.exportSymbol('proto.msp.mnt.EdidList', null, global);
goog.exportSymbol('proto.msp.mnt.FileInfo', null, global);
goog.exportSymbol('proto.msp.mnt.FileParam', null, global);
goog.exportSymbol('proto.msp.mnt.FileTrans', null, global);
goog.exportSymbol('proto.msp.mnt.FilterForm', null, global);
goog.exportSymbol('proto.msp.mnt.FwInfo', null, global);
goog.exportSymbol('proto.msp.mnt.FwList', null, global);
goog.exportSymbol('proto.msp.mnt.GroupMem', null, global);
goog.exportSymbol('proto.msp.mnt.GroupMemList', null, global);
goog.exportSymbol('proto.msp.mnt.GroupMems', null, global);
goog.exportSymbol('proto.msp.mnt.Head', null, global);
goog.exportSymbol('proto.msp.mnt.Ids', null, global);
goog.exportSymbol('proto.msp.mnt.Kdmid', null, global);
goog.exportSymbol('proto.msp.mnt.KvmCfgState', null, global);
goog.exportSymbol('proto.msp.mnt.KvmFile', null, global);
goog.exportSymbol('proto.msp.mnt.KvmFileNotify', null, global);
goog.exportSymbol('proto.msp.mnt.KvmGroup', null, global);
goog.exportSymbol('proto.msp.mnt.KvmGroupInfo', null, global);
goog.exportSymbol('proto.msp.mnt.KvmGroupList', null, global);
goog.exportSymbol('proto.msp.mnt.KvmInfo', null, global);
goog.exportSymbol('proto.msp.mnt.KvmInfoList', null, global);
goog.exportSymbol('proto.msp.mnt.KvmPush', null, global);
goog.exportSymbol('proto.msp.mnt.KvmState', null, global);
goog.exportSymbol('proto.msp.mnt.KvmStateList', null, global);
goog.exportSymbol('proto.msp.mnt.KvmTv', null, global);
goog.exportSymbol('proto.msp.mnt.Lancfg', null, global);
goog.exportSymbol('proto.msp.mnt.LicenceState', null, global);
goog.exportSymbol('proto.msp.mnt.LicenceStateList', null, global);
goog.exportSymbol('proto.msp.mnt.Login', null, global);
goog.exportSymbol('proto.msp.mnt.LoginAck', null, global);
goog.exportSymbol('proto.msp.mnt.MergeWnd', null, global);
goog.exportSymbol('proto.msp.mnt.MergeWnds', null, global);
goog.exportSymbol('proto.msp.mnt.MonitorInfo', null, global);
goog.exportSymbol('proto.msp.mnt.Msg', null, global);
goog.exportSymbol('proto.msp.mnt.NetCfg', null, global);
goog.exportSymbol('proto.msp.mnt.NetCfgList', null, global);
goog.exportSymbol('proto.msp.mnt.Notify', null, global);
goog.exportSymbol('proto.msp.mnt.OPCODE', null, global);
goog.exportSymbol('proto.msp.mnt.OSD', null, global);
goog.exportSymbol('proto.msp.mnt.OSDCtrl', null, global);
goog.exportSymbol('proto.msp.mnt.OSDList', null, global);
goog.exportSymbol('proto.msp.mnt.OsdFile', null, global);
goog.exportSymbol('proto.msp.mnt.OsdStatus', null, global);
goog.exportSymbol('proto.msp.mnt.OsdStatusList', null, global);
goog.exportSymbol('proto.msp.mnt.PTZCODE', null, global);
goog.exportSymbol('proto.msp.mnt.PackageInfo', null, global);
goog.exportSymbol('proto.msp.mnt.PcBdInfo', null, global);
goog.exportSymbol('proto.msp.mnt.PcBdInfoList', null, global);
goog.exportSymbol('proto.msp.mnt.PcInfo', null, global);
goog.exportSymbol('proto.msp.mnt.PcInfoList', null, global);
goog.exportSymbol('proto.msp.mnt.PcList', null, global);
goog.exportSymbol('proto.msp.mnt.PlatInfo', null, global);
goog.exportSymbol('proto.msp.mnt.PlatInfos', null, global);
goog.exportSymbol('proto.msp.mnt.PlatSn', null, global);
goog.exportSymbol('proto.msp.mnt.Poll', null, global);
goog.exportSymbol('proto.msp.mnt.PollMem', null, global);
goog.exportSymbol('proto.msp.mnt.PollMems', null, global);
goog.exportSymbol('proto.msp.mnt.PollPrm', null, global);
goog.exportSymbol('proto.msp.mnt.PollState', null, global);
goog.exportSymbol('proto.msp.mnt.PollStates', null, global);
goog.exportSymbol('proto.msp.mnt.PowerPrm', null, global);
goog.exportSymbol('proto.msp.mnt.PowerPrms', null, global);
goog.exportSymbol('proto.msp.mnt.PrePlan', null, global);
goog.exportSymbol('proto.msp.mnt.PrePlans', null, global);
goog.exportSymbol('proto.msp.mnt.Property', null, global);
goog.exportSymbol('proto.msp.mnt.Ptz', null, global);
goog.exportSymbol('proto.msp.mnt.PushCfg', null, global);
goog.exportSymbol('proto.msp.mnt.Query', null, global);
goog.exportSymbol('proto.msp.mnt.QueryChn', null, global);
goog.exportSymbol('proto.msp.mnt.QueryChnList', null, global);
goog.exportSymbol('proto.msp.mnt.RdBox', null, global);
goog.exportSymbol('proto.msp.mnt.RdBoxList', null, global);
goog.exportSymbol('proto.msp.mnt.RdOutput', null, global);
goog.exportSymbol('proto.msp.mnt.RdOutputList', null, global);
goog.exportSymbol('proto.msp.mnt.RdPort', null, global);
goog.exportSymbol('proto.msp.mnt.RdPortList', null, global);
goog.exportSymbol('proto.msp.mnt.RdPortUpdate', null, global);
goog.exportSymbol('proto.msp.mnt.RealPlay', null, global);
goog.exportSymbol('proto.msp.mnt.Recoder', null, global);
goog.exportSymbol('proto.msp.mnt.RecoderBoard', null, global);
goog.exportSymbol('proto.msp.mnt.RecoderBoards', null, global);
goog.exportSymbol('proto.msp.mnt.Recoders', null, global);
goog.exportSymbol('proto.msp.mnt.Rect', null, global);
goog.exportSymbol('proto.msp.mnt.RegDev', null, global);
goog.exportSymbol('proto.msp.mnt.RegDevList', null, global);
goog.exportSymbol('proto.msp.mnt.Reorder', null, global);
goog.exportSymbol('proto.msp.mnt.Resource', null, global);
goog.exportSymbol('proto.msp.mnt.Scheme', null, global);
goog.exportSymbol('proto.msp.mnt.SchemeState', null, global);
goog.exportSymbol('proto.msp.mnt.Schemes', null, global);
goog.exportSymbol('proto.msp.mnt.SearchCfg', null, global);
goog.exportSymbol('proto.msp.mnt.SearchDev', null, global);
goog.exportSymbol('proto.msp.mnt.SearchDevList', null, global);
goog.exportSymbol('proto.msp.mnt.String', null, global);
goog.exportSymbol('proto.msp.mnt.Subwindow', null, global);
goog.exportSymbol('proto.msp.mnt.SysLicence', null, global);
goog.exportSymbol('proto.msp.mnt.Time', null, global);
goog.exportSymbol('proto.msp.mnt.TransCfg', null, global);
goog.exportSymbol('proto.msp.mnt.Tswid', null, global);
goog.exportSymbol('proto.msp.mnt.TvBack', null, global);
goog.exportSymbol('proto.msp.mnt.TvBackList', null, global);
goog.exportSymbol('proto.msp.mnt.TvBasic', null, global);
goog.exportSymbol('proto.msp.mnt.TvCell', null, global);
goog.exportSymbol('proto.msp.mnt.TvCellList', null, global);
goog.exportSymbol('proto.msp.mnt.TvInfo', null, global);
goog.exportSymbol('proto.msp.mnt.TvList', null, global);
goog.exportSymbol('proto.msp.mnt.TvState', null, global);
goog.exportSymbol('proto.msp.mnt.Umt', null, global);
goog.exportSymbol('proto.msp.mnt.UmtChn', null, global);
goog.exportSymbol('proto.msp.mnt.UmtChnList', null, global);
goog.exportSymbol('proto.msp.mnt.UmtChnState', null, global);
goog.exportSymbol('proto.msp.mnt.UmtChnStateList', null, global);
goog.exportSymbol('proto.msp.mnt.UmtDec', null, global);
goog.exportSymbol('proto.msp.mnt.UmtDecList', null, global);
goog.exportSymbol('proto.msp.mnt.UmtGroup', null, global);
goog.exportSymbol('proto.msp.mnt.UmtGroupList', null, global);
goog.exportSymbol('proto.msp.mnt.UmtList', null, global);
goog.exportSymbol('proto.msp.mnt.UmtState', null, global);
goog.exportSymbol('proto.msp.mnt.UmtStateList', null, global);
goog.exportSymbol('proto.msp.mnt.User', null, global);
goog.exportSymbol('proto.msp.mnt.UserList', null, global);
goog.exportSymbol('proto.msp.mnt.UserLockState', null, global);
goog.exportSymbol('proto.msp.mnt.UserRes', null, global);
goog.exportSymbol('proto.msp.mnt.UserResList', null, global);
goog.exportSymbol('proto.msp.mnt.UserState', null, global);
goog.exportSymbol('proto.msp.mnt.UserStateList', null, global);
goog.exportSymbol('proto.msp.mnt.ValueU32', null, global);
goog.exportSymbol('proto.msp.mnt.WinState', null, global);
goog.exportSymbol('proto.msp.mnt.Window', null, global);
goog.exportSymbol('proto.msp.mnt.Windows', null, global);
goog.exportSymbol('proto.msp.mnt.WndDesc', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Msg.displayName = 'proto.msp.mnt.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Head = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Head, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Head.displayName = 'proto.msp.mnt.Head';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.String.displayName = 'proto.msp.mnt.String';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Query.displayName = 'proto.msp.mnt.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ValueU32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ValueU32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ValueU32.displayName = 'proto.msp.mnt.ValueU32';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TransCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.TransCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TransCfg.displayName = 'proto.msp.mnt.TransCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Notify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Notify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Notify.displayName = 'proto.msp.mnt.Notify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.GroupMem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.GroupMem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.GroupMem.displayName = 'proto.msp.mnt.GroupMem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.NetCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.NetCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.NetCfg.displayName = 'proto.msp.mnt.NetCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.NetCfgList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.NetCfgList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.NetCfgList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.NetCfgList.displayName = 'proto.msp.mnt.NetCfgList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Lancfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Lancfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Lancfg.displayName = 'proto.msp.mnt.Lancfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Umt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Umt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Umt.displayName = 'proto.msp.mnt.Umt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtList.displayName = 'proto.msp.mnt.UmtList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UmtState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtState.displayName = 'proto.msp.mnt.UmtState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtDec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UmtDec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtDec.displayName = 'proto.msp.mnt.UmtDec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtDecList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtDecList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtDecList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtDecList.displayName = 'proto.msp.mnt.UmtDecList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtStateList.displayName = 'proto.msp.mnt.UmtStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.DecMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.DecMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.DecMode.displayName = 'proto.msp.mnt.DecMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.DecModeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.DecModeList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.DecModeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.DecModeList.displayName = 'proto.msp.mnt.DecModeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RdBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdBox.displayName = 'proto.msp.mnt.RdBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdBoxList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.RdBoxList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.RdBoxList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdBoxList.displayName = 'proto.msp.mnt.RdBoxList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RdPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdPort.displayName = 'proto.msp.mnt.RdPort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdPortList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.RdPortList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.RdPortList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdPortList.displayName = 'proto.msp.mnt.RdPortList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RdOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdOutput.displayName = 'proto.msp.mnt.RdOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdOutputList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.RdOutputList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.RdOutputList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdOutputList.displayName = 'proto.msp.mnt.RdOutputList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BoxExt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BoxExt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BoxExt.displayName = 'proto.msp.mnt.BoxExt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BoxExtList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.BoxExtList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.BoxExtList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BoxExtList.displayName = 'proto.msp.mnt.BoxExtList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RdPortUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RdPortUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RdPortUpdate.displayName = 'proto.msp.mnt.RdPortUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PrePlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PrePlan.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PrePlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PrePlan.displayName = 'proto.msp.mnt.PrePlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PrePlans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PrePlans.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PrePlans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PrePlans.displayName = 'proto.msp.mnt.PrePlans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.GroupMems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.GroupMems.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.GroupMems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.GroupMems.displayName = 'proto.msp.mnt.GroupMems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Ids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Ids.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Ids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Ids.displayName = 'proto.msp.mnt.Ids';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.QueryChn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.QueryChn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.QueryChn.displayName = 'proto.msp.mnt.QueryChn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.QueryChnList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.QueryChnList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.QueryChnList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.QueryChnList.displayName = 'proto.msp.mnt.QueryChnList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnBasic.displayName = 'proto.msp.mnt.ChnBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnInfo.displayName = 'proto.msp.mnt.ChnInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.ChnInfoList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.ChnInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnInfoList.displayName = 'proto.msp.mnt.ChnInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnGroup.displayName = 'proto.msp.mnt.ChnGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnGroupState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnGroupState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnGroupState.displayName = 'proto.msp.mnt.ChnGroupState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.ChnGroupList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.ChnGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnGroupList.displayName = 'proto.msp.mnt.ChnGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.GroupMemList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.GroupMemList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.GroupMemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.GroupMemList.displayName = 'proto.msp.mnt.GroupMemList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnNetEnalbe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnNetEnalbe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnNetEnalbe.displayName = 'proto.msp.mnt.ChnNetEnalbe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnNetEnalbeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.ChnNetEnalbeList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.ChnNetEnalbeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnNetEnalbeList.displayName = 'proto.msp.mnt.ChnNetEnalbeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnMode.displayName = 'proto.msp.mnt.ChnMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnEdid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ChnEdid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnEdid.displayName = 'proto.msp.mnt.ChnEdid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Edid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Edid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Edid.displayName = 'proto.msp.mnt.Edid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.EdidList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.EdidList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.EdidList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.EdidList.displayName = 'proto.msp.mnt.EdidList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UmtGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtGroup.displayName = 'proto.msp.mnt.UmtGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtGroupList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtGroupList.displayName = 'proto.msp.mnt.UmtGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtChn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UmtChn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtChn.displayName = 'proto.msp.mnt.UmtChn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtChnList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtChnList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtChnList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtChnList.displayName = 'proto.msp.mnt.UmtChnList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtChnState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UmtChnState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtChnState.displayName = 'proto.msp.mnt.UmtChnState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UmtChnStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UmtChnStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UmtChnStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UmtChnStateList.displayName = 'proto.msp.mnt.UmtChnStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ComCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ComCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ComCfg.displayName = 'proto.msp.mnt.ComCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ComPtz = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.ComPtz, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ComPtz.displayName = 'proto.msp.mnt.ComPtz';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Property.displayName = 'proto.msp.mnt.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.DevBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.DevBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.DevBasic.displayName = 'proto.msp.mnt.DevBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.DevInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.DevInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.DevInfo.displayName = 'proto.msp.mnt.DevInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.DevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.DevList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.DevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.DevList.displayName = 'proto.msp.mnt.DevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.SearchCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.SearchCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.SearchCfg.displayName = 'proto.msp.mnt.SearchCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.SearchDev = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.SearchDev, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.SearchDev.displayName = 'proto.msp.mnt.SearchDev';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.SearchDevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.SearchDevList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.SearchDevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.SearchDevList.displayName = 'proto.msp.mnt.SearchDevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RegDev = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RegDev, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RegDev.displayName = 'proto.msp.mnt.RegDev';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RegDevList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.RegDevList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.RegDevList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RegDevList.displayName = 'proto.msp.mnt.RegDevList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FwInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.FwInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FwInfo.displayName = 'proto.msp.mnt.FwInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FwList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.FwList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.FwList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FwList.displayName = 'proto.msp.mnt.FwList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BatchCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BatchCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BatchCfg.displayName = 'proto.msp.mnt.BatchCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BatchCfgList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.BatchCfgList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.BatchCfgList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BatchCfgList.displayName = 'proto.msp.mnt.BatchCfgList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BatchInfo.displayName = 'proto.msp.mnt.BatchInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BatchProg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BatchProg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BatchProg.displayName = 'proto.msp.mnt.BatchProg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PackageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PackageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PackageInfo.displayName = 'proto.msp.mnt.PackageInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Advanced = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Advanced, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Advanced.displayName = 'proto.msp.mnt.Advanced';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmTv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmTv.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmTv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmTv.displayName = 'proto.msp.mnt.KvmTv';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmInfo.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmInfo.displayName = 'proto.msp.mnt.KvmInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmInfoList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmInfoList.displayName = 'proto.msp.mnt.KvmInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.MonitorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.MonitorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.MonitorInfo.displayName = 'proto.msp.mnt.MonitorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmPush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.KvmPush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmPush.displayName = 'proto.msp.mnt.KvmPush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PushCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PushCfg.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PushCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PushCfg.displayName = 'proto.msp.mnt.PushCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.KvmGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmGroup.displayName = 'proto.msp.mnt.KvmGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmGroupList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmGroupList.displayName = 'proto.msp.mnt.KvmGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmGroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmGroupInfo.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmGroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmGroupInfo.displayName = 'proto.msp.mnt.KvmGroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FileParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.FileParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FileParam.displayName = 'proto.msp.mnt.FileParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmFile.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmFile.displayName = 'proto.msp.mnt.KvmFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmFileNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmFileNotify.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmFileNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmFileNotify.displayName = 'proto.msp.mnt.KvmFileNotify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmCfgState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.KvmCfgState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmCfgState.displayName = 'proto.msp.mnt.KvmCfgState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.KvmState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmState.displayName = 'proto.msp.mnt.KvmState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.KvmStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.KvmStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.KvmStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.KvmStateList.displayName = 'proto.msp.mnt.KvmStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PowerPrm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PowerPrm.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PowerPrm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PowerPrm.displayName = 'proto.msp.mnt.PowerPrm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.ChnList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.ChnList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.ChnList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.ChnList.displayName = 'proto.msp.mnt.ChnList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PowerPrms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PowerPrms.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PowerPrms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PowerPrms.displayName = 'proto.msp.mnt.PowerPrms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PcInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PcInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PcInfo.displayName = 'proto.msp.mnt.PcInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PcInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PcInfoList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PcInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PcInfoList.displayName = 'proto.msp.mnt.PcInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PcList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PcList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PcList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PcList.displayName = 'proto.msp.mnt.PcList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Scheme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Scheme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Scheme.displayName = 'proto.msp.mnt.Scheme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Schemes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Schemes.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Schemes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Schemes.displayName = 'proto.msp.mnt.Schemes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Tswid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Tswid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Tswid.displayName = 'proto.msp.mnt.Tswid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PollPrm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PollPrm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PollPrm.displayName = 'proto.msp.mnt.PollPrm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Poll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Poll.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Poll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Poll.displayName = 'proto.msp.mnt.Poll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PollMem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PollMem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PollMem.displayName = 'proto.msp.mnt.PollMem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PollMems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PollMems.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PollMems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PollMems.displayName = 'proto.msp.mnt.PollMems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.SchemeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.SchemeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.SchemeState.displayName = 'proto.msp.mnt.SchemeState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PollState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PollState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PollState.displayName = 'proto.msp.mnt.PollState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PollStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PollStates.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PollStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PollStates.displayName = 'proto.msp.mnt.PollStates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FilterForm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.FilterForm.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.FilterForm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FilterForm.displayName = 'proto.msp.mnt.FilterForm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Time.displayName = 'proto.msp.mnt.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.AccessCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.AccessCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.AccessCode.displayName = 'proto.msp.mnt.AccessCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.SysLicence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.SysLicence.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.SysLicence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.SysLicence.displayName = 'proto.msp.mnt.SysLicence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.LicenceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.LicenceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.LicenceState.displayName = 'proto.msp.mnt.LicenceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.LicenceStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.LicenceStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.LicenceStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.LicenceStateList.displayName = 'proto.msp.mnt.LicenceStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.FileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FileInfo.displayName = 'proto.msp.mnt.FileInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Resource.displayName = 'proto.msp.mnt.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Recoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Recoder.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Recoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Recoder.displayName = 'proto.msp.mnt.Recoder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Recoders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Recoders.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Recoders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Recoders.displayName = 'proto.msp.mnt.Recoders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RecoderBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RecoderBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RecoderBoard.displayName = 'proto.msp.mnt.RecoderBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RecoderBoards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.RecoderBoards.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.RecoderBoards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RecoderBoards.displayName = 'proto.msp.mnt.RecoderBoards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PlatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PlatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PlatInfo.displayName = 'proto.msp.mnt.PlatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PlatInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PlatInfos.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PlatInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PlatInfos.displayName = 'proto.msp.mnt.PlatInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.CascChnl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.CascChnl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.CascChnl.displayName = 'proto.msp.mnt.CascChnl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.CascChnls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.CascChnls.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.CascChnls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.CascChnls.displayName = 'proto.msp.mnt.CascChnls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.CascPipe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.CascPipe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.CascPipe.displayName = 'proto.msp.mnt.CascPipe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.CashChnlPrm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.CashChnlPrm.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.CashChnlPrm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.CashChnlPrm.displayName = 'proto.msp.mnt.CashChnlPrm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.TvBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvBasic.displayName = 'proto.msp.mnt.TvBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.TvList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.TvList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvList.displayName = 'proto.msp.mnt.TvList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvCell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.TvCell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvCell.displayName = 'proto.msp.mnt.TvCell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvCellList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.TvCellList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.TvCellList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvCellList.displayName = 'proto.msp.mnt.TvCellList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.TvInfo.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.TvInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvInfo.displayName = 'proto.msp.mnt.TvInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvBack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.TvBack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvBack.displayName = 'proto.msp.mnt.TvBack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvBackList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.TvBackList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.TvBackList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvBackList.displayName = 'proto.msp.mnt.TvBackList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BackTrans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BackTrans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BackTrans.displayName = 'proto.msp.mnt.BackTrans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BackTransList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.BackTransList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.BackTransList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BackTransList.displayName = 'proto.msp.mnt.BackTransList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.BackState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.BackState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.BackState.displayName = 'proto.msp.mnt.BackState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OSD = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.OSD, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OSD.displayName = 'proto.msp.mnt.OSD';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OSDList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.OSDList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.OSDList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OSDList.displayName = 'proto.msp.mnt.OSDList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OsdStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.OsdStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OsdStatus.displayName = 'proto.msp.mnt.OsdStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OsdStatusList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.OsdStatusList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.OsdStatusList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OsdStatusList.displayName = 'proto.msp.mnt.OsdStatusList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.FileTrans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.FileTrans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.FileTrans.displayName = 'proto.msp.mnt.FileTrans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OsdFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.OsdFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OsdFile.displayName = 'proto.msp.mnt.OsdFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.OSDCtrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.OSDCtrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.OSDCtrl.displayName = 'proto.msp.mnt.OSDCtrl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.TvState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.TvState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.TvState.displayName = 'proto.msp.mnt.TvState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Login.displayName = 'proto.msp.mnt.Login';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.LoginAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.LoginAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.LoginAck.displayName = 'proto.msp.mnt.LoginAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PlatSn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PlatSn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PlatSn.displayName = 'proto.msp.mnt.PlatSn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Kdmid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Kdmid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Kdmid.displayName = 'proto.msp.mnt.Kdmid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.User.displayName = 'proto.msp.mnt.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UserRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserRes.displayName = 'proto.msp.mnt.UserRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserResList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UserResList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UserResList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserResList.displayName = 'proto.msp.mnt.UserResList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UserList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserList.displayName = 'proto.msp.mnt.UserList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserLockState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UserLockState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserLockState.displayName = 'proto.msp.mnt.UserLockState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.UserState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserState.displayName = 'proto.msp.mnt.UserState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.UserStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.UserStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.UserStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.UserStateList.displayName = 'proto.msp.mnt.UserStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.WinState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.WinState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.WinState.displayName = 'proto.msp.mnt.WinState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Subwindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Subwindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Subwindow.displayName = 'proto.msp.mnt.Subwindow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.MergeWnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.MergeWnd.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.MergeWnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.MergeWnd.displayName = 'proto.msp.mnt.MergeWnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.MergeWnds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.MergeWnds.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.MergeWnds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.MergeWnds.displayName = 'proto.msp.mnt.MergeWnds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Rect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Rect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Rect.displayName = 'proto.msp.mnt.Rect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Window = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Window, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Window.displayName = 'proto.msp.mnt.Window';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Windows = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.Windows.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.Windows, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Windows.displayName = 'proto.msp.mnt.Windows';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.WndDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.WndDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.WndDesc.displayName = 'proto.msp.mnt.WndDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Reorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Reorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Reorder.displayName = 'proto.msp.mnt.Reorder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.Ptz = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.Ptz, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.Ptz.displayName = 'proto.msp.mnt.Ptz';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.RealPlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.RealPlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.RealPlay.displayName = 'proto.msp.mnt.RealPlay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PcBdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.mnt.PcBdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PcBdInfo.displayName = 'proto.msp.mnt.PcBdInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.mnt.PcBdInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.mnt.PcBdInfoList.repeatedFields_, null);
};
goog.inherits(proto.msp.mnt.PcBdInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.mnt.PcBdInfoList.displayName = 'proto.msp.mnt.PcBdInfoList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: (f = msg.getHead()) && proto.msp.mnt.Head.toObject(includeInstance, f),
    body: (f = msg.getBody()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Msg}
 */
proto.msp.mnt.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Msg;
  return proto.msp.mnt.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Msg}
 */
proto.msp.mnt.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Head;
      reader.readMessage(value,proto.msp.mnt.Head.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.Head.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional Head head = 1;
 * @return {?proto.msp.mnt.Head}
 */
proto.msp.mnt.Msg.prototype.getHead = function() {
  return /** @type{?proto.msp.mnt.Head} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Head, 1));
};


/**
 * @param {?proto.msp.mnt.Head|undefined} value
 * @return {!proto.msp.mnt.Msg} returns this
*/
proto.msp.mnt.Msg.prototype.setHead = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Msg} returns this
 */
proto.msp.mnt.Msg.prototype.clearHead = function() {
  return this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Msg.prototype.hasHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Any body = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.msp.mnt.Msg.prototype.getBody = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.msp.mnt.Msg} returns this
*/
proto.msp.mnt.Msg.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Msg} returns this
 */
proto.msp.mnt.Msg.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Msg.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Head.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Head.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Head} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Head.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    err: jspb.Message.getFieldWithDefault(msg, 3, ""),
    len: jspb.Message.getFieldWithDefault(msg, 4, 0),
    serial: jspb.Message.getFieldWithDefault(msg, 5, 0),
    context: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Head}
 */
proto.msp.mnt.Head.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Head;
  return proto.msp.mnt.Head.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Head} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Head}
 */
proto.msp.mnt.Head.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLen(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSerial(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Head.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Head.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Head} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Head.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getSerial();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getContext();
  if (f !== 0) {
    writer.writeFixed64(
      6,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.msp.mnt.Head.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.msp.mnt.Head.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string err = 3;
 * @return {string}
 */
proto.msp.mnt.Head.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setErr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 len = 4;
 * @return {number}
 */
proto.msp.mnt.Head.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setLen = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 serial = 5;
 * @return {number}
 */
proto.msp.mnt.Head.prototype.getSerial = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setSerial = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed64 context = 6;
 * @return {number}
 */
proto.msp.mnt.Head.prototype.getContext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Head} returns this
 */
proto.msp.mnt.Head.prototype.setContext = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.String.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.String}
 */
proto.msp.mnt.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.String;
  return proto.msp.mnt.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.String}
 */
proto.msp.mnt.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.msp.mnt.String.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.String} returns this
 */
proto.msp.mnt.String.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0),
    exid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Query}
 */
proto.msp.mnt.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Query;
  return proto.msp.mnt.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Query}
 */
proto.msp.mnt.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSubid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setExid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSubid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getExid();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.Query.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.Query.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 subid = 3;
 * @return {number}
 */
proto.msp.mnt.Query.prototype.getSubid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setSubid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 offset = 4;
 * @return {number}
 */
proto.msp.mnt.Query.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 size = 5;
 * @return {number}
 */
proto.msp.mnt.Query.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 exid = 6;
 * @return {number}
 */
proto.msp.mnt.Query.prototype.getExid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Query} returns this
 */
proto.msp.mnt.Query.prototype.setExid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ValueU32.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ValueU32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ValueU32} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ValueU32.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.ValueU32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ValueU32;
  return proto.msp.mnt.ValueU32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ValueU32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.ValueU32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ValueU32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ValueU32.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ValueU32} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ValueU32.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
};


/**
 * optional fixed32 value = 1;
 * @return {number}
 */
proto.msp.mnt.ValueU32.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ValueU32} returns this
 */
proto.msp.mnt.ValueU32.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TransCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TransCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TransCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TransCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    opt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TransCfg}
 */
proto.msp.mnt.TransCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TransCfg;
  return proto.msp.mnt.TransCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TransCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TransCfg}
 */
proto.msp.mnt.TransCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TransCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TransCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TransCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TransCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.TransCfg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.TransCfg} returns this
 */
proto.msp.mnt.TransCfg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.mnt.TransCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TransCfg} returns this
 */
proto.msp.mnt.TransCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 size = 3;
 * @return {number}
 */
proto.msp.mnt.TransCfg.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TransCfg} returns this
 */
proto.msp.mnt.TransCfg.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 opt = 4;
 * @return {number}
 */
proto.msp.mnt.TransCfg.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TransCfg} returns this
 */
proto.msp.mnt.TransCfg.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Notify.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Notify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Notify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Notify.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Notify}
 */
proto.msp.mnt.Notify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Notify;
  return proto.msp.mnt.Notify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Notify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Notify}
 */
proto.msp.mnt.Notify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Notify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Notify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Notify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Notify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.msp.mnt.Notify.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Notify} returns this
 */
proto.msp.mnt.Notify.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.Notify.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Notify} returns this
 */
proto.msp.mnt.Notify.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.GroupMem.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.GroupMem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.GroupMem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nextid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    online: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.GroupMem}
 */
proto.msp.mnt.GroupMem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.GroupMem;
  return proto.msp.mnt.GroupMem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.GroupMem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.GroupMem}
 */
proto.msp.mnt.GroupMem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNextid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.GroupMem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.GroupMem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.GroupMem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getNextid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getOnline();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.GroupMem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMem} returns this
 */
proto.msp.mnt.GroupMem.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 nextid = 2;
 * @return {number}
 */
proto.msp.mnt.GroupMem.prototype.getNextid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMem} returns this
 */
proto.msp.mnt.GroupMem.prototype.setNextid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.GroupMem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.GroupMem} returns this
 */
proto.msp.mnt.GroupMem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 groupid = 4;
 * @return {number}
 */
proto.msp.mnt.GroupMem.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMem} returns this
 */
proto.msp.mnt.GroupMem.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 online = 5;
 * @return {number}
 */
proto.msp.mnt.GroupMem.prototype.getOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMem} returns this
 */
proto.msp.mnt.GroupMem.prototype.setOnline = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.NetCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.NetCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.NetCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.NetCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    use: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    dhcp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    ip: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mask: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.NetCfg}
 */
proto.msp.mnt.NetCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.NetCfg;
  return proto.msp.mnt.NetCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.NetCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.NetCfg}
 */
proto.msp.mnt.NetCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUse(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDhcp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.NetCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.NetCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.NetCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.NetCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUse();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDhcp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getMask();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.NetCfg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.NetCfg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool use = 3;
 * @return {boolean}
 */
proto.msp.mnt.NetCfg.prototype.getUse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setUse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool dhcp = 4;
 * @return {boolean}
 */
proto.msp.mnt.NetCfg.prototype.getDhcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setDhcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string ip = 5;
 * @return {string}
 */
proto.msp.mnt.NetCfg.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed32 type = 6;
 * @return {number}
 */
proto.msp.mnt.NetCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string mask = 7;
 * @return {string}
 */
proto.msp.mnt.NetCfg.prototype.getMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.NetCfg} returns this
 */
proto.msp.mnt.NetCfg.prototype.setMask = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.NetCfgList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.NetCfgList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.NetCfgList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.NetCfgList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.NetCfgList.toObject = function(includeInstance, msg) {
  var f, obj = {
    netList: jspb.Message.toObjectList(msg.getNetList(),
    proto.msp.mnt.NetCfg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.NetCfgList}
 */
proto.msp.mnt.NetCfgList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.NetCfgList;
  return proto.msp.mnt.NetCfgList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.NetCfgList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.NetCfgList}
 */
proto.msp.mnt.NetCfgList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.NetCfg;
      reader.readMessage(value,proto.msp.mnt.NetCfg.deserializeBinaryFromReader);
      msg.addNet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.NetCfgList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.NetCfgList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.NetCfgList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.NetCfgList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.NetCfg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NetCfg net = 1;
 * @return {!Array<!proto.msp.mnt.NetCfg>}
 */
proto.msp.mnt.NetCfgList.prototype.getNetList = function() {
  return /** @type{!Array<!proto.msp.mnt.NetCfg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.NetCfg, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.NetCfg>} value
 * @return {!proto.msp.mnt.NetCfgList} returns this
*/
proto.msp.mnt.NetCfgList.prototype.setNetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.NetCfg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.NetCfg}
 */
proto.msp.mnt.NetCfgList.prototype.addNet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.NetCfg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.NetCfgList} returns this
 */
proto.msp.mnt.NetCfgList.prototype.clearNetList = function() {
  return this.setNetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Lancfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Lancfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Lancfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Lancfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipout: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Lancfg}
 */
proto.msp.mnt.Lancfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Lancfg;
  return proto.msp.mnt.Lancfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Lancfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Lancfg}
 */
proto.msp.mnt.Lancfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Lancfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Lancfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Lancfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Lancfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpout();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ipin = 1;
 * @return {string}
 */
proto.msp.mnt.Lancfg.prototype.getIpin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Lancfg} returns this
 */
proto.msp.mnt.Lancfg.prototype.setIpin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ipout = 2;
 * @return {string}
 */
proto.msp.mnt.Lancfg.prototype.getIpout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Lancfg} returns this
 */
proto.msp.mnt.Lancfg.prototype.setIpout = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Umt.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Umt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Umt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Umt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 4, ""),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0),
    user: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pass: jspb.Message.getFieldWithDefault(msg, 7, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    rtsp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ipcmedia: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mtmedia: jspb.Message.getFieldWithDefault(msg, 11, 0),
    conf: jspb.Message.getFieldWithDefault(msg, 12, 0),
    device: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Umt}
 */
proto.msp.mnt.Umt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Umt;
  return proto.msp.mnt.Umt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Umt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Umt}
 */
proto.msp.mnt.Umt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtsp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setIpcmedia(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMtmedia(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setConf(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Umt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Umt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Umt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Umt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRtsp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIpcmedia();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getMtmedia();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getConf();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getDevice();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.Umt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ip = 4;
 * @return {string}
 */
proto.msp.mnt.Umt.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional fixed32 port = 5;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string user = 6;
 * @return {string}
 */
proto.msp.mnt.Umt.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string pass = 7;
 * @return {string}
 */
proto.msp.mnt.Umt.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool online = 8;
 * @return {boolean}
 */
proto.msp.mnt.Umt.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string rtsp = 9;
 * @return {string}
 */
proto.msp.mnt.Umt.prototype.getRtsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setRtsp = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional fixed32 ipcmedia = 10;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getIpcmedia = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setIpcmedia = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional fixed32 mtmedia = 11;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getMtmedia = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setMtmedia = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 conf = 12;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setConf = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 device = 13;
 * @return {number}
 */
proto.msp.mnt.Umt.prototype.getDevice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Umt} returns this
 */
proto.msp.mnt.Umt.prototype.setDevice = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtList: jspb.Message.toObjectList(msg.getUmtList(),
    proto.msp.mnt.Umt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtList}
 */
proto.msp.mnt.UmtList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtList;
  return proto.msp.mnt.UmtList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtList}
 */
proto.msp.mnt.UmtList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Umt;
      reader.readMessage(value,proto.msp.mnt.Umt.deserializeBinaryFromReader);
      msg.addUmt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.Umt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Umt umt = 1;
 * @return {!Array<!proto.msp.mnt.Umt>}
 */
proto.msp.mnt.UmtList.prototype.getUmtList = function() {
  return /** @type{!Array<!proto.msp.mnt.Umt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Umt, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.Umt>} value
 * @return {!proto.msp.mnt.UmtList} returns this
*/
proto.msp.mnt.UmtList.prototype.setUmtList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.Umt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Umt}
 */
proto.msp.mnt.UmtList.prototype.addUmt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.Umt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtList} returns this
 */
proto.msp.mnt.UmtList.prototype.clearUmtList = function() {
  return this.setUmtList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtState}
 */
proto.msp.mnt.UmtState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtState;
  return proto.msp.mnt.UmtState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtState}
 */
proto.msp.mnt.UmtState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.UmtState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtState} returns this
 */
proto.msp.mnt.UmtState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.UmtState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtState} returns this
 */
proto.msp.mnt.UmtState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtDec.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtDec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtDec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtDec.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtDec}
 */
proto.msp.mnt.UmtDec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtDec;
  return proto.msp.mnt.UmtDec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtDec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtDec}
 */
proto.msp.mnt.UmtDec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtDec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtDec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtDec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtDec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.UmtDec.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtDec} returns this
 */
proto.msp.mnt.UmtDec.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.mnt.UmtDec.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtDec} returns this
 */
proto.msp.mnt.UmtDec.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.mnt.UmtDec.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtDec} returns this
 */
proto.msp.mnt.UmtDec.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.mnt.UmtDec.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtDec} returns this
 */
proto.msp.mnt.UmtDec.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtDecList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtDecList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtDecList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtDecList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtDecList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtdecList: jspb.Message.toObjectList(msg.getUmtdecList(),
    proto.msp.mnt.UmtDec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtDecList}
 */
proto.msp.mnt.UmtDecList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtDecList;
  return proto.msp.mnt.UmtDecList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtDecList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtDecList}
 */
proto.msp.mnt.UmtDecList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtDec;
      reader.readMessage(value,proto.msp.mnt.UmtDec.deserializeBinaryFromReader);
      msg.addUmtdec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtDecList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtDecList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtDecList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtDecList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtdecList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UmtDec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtDec umtdec = 1;
 * @return {!Array<!proto.msp.mnt.UmtDec>}
 */
proto.msp.mnt.UmtDecList.prototype.getUmtdecList = function() {
  return /** @type{!Array<!proto.msp.mnt.UmtDec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UmtDec, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UmtDec>} value
 * @return {!proto.msp.mnt.UmtDecList} returns this
*/
proto.msp.mnt.UmtDecList.prototype.setUmtdecList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UmtDec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UmtDec}
 */
proto.msp.mnt.UmtDecList.prototype.addUmtdec = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UmtDec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtDecList} returns this
 */
proto.msp.mnt.UmtDecList.prototype.clearUmtdecList = function() {
  return this.setUmtdecList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateList: jspb.Message.toObjectList(msg.getStateList(),
    proto.msp.mnt.UmtState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtStateList}
 */
proto.msp.mnt.UmtStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtStateList;
  return proto.msp.mnt.UmtStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtStateList}
 */
proto.msp.mnt.UmtStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtState;
      reader.readMessage(value,proto.msp.mnt.UmtState.deserializeBinaryFromReader);
      msg.addState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UmtState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtState state = 1;
 * @return {!Array<!proto.msp.mnt.UmtState>}
 */
proto.msp.mnt.UmtStateList.prototype.getStateList = function() {
  return /** @type{!Array<!proto.msp.mnt.UmtState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UmtState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UmtState>} value
 * @return {!proto.msp.mnt.UmtStateList} returns this
*/
proto.msp.mnt.UmtStateList.prototype.setStateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UmtState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UmtState}
 */
proto.msp.mnt.UmtStateList.prototype.addState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UmtState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtStateList} returns this
 */
proto.msp.mnt.UmtStateList.prototype.clearStateList = function() {
  return this.setStateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.DecMode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.DecMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.DecMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DecMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.DecMode}
 */
proto.msp.mnt.DecMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.DecMode;
  return proto.msp.mnt.DecMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.DecMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.DecMode}
 */
proto.msp.mnt.DecMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.DecMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.DecMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.DecMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DecMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.mnt.DecMode.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DecMode} returns this
 */
proto.msp.mnt.DecMode.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.mnt.DecMode.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DecMode} returns this
 */
proto.msp.mnt.DecMode.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 mode = 3;
 * @return {number}
 */
proto.msp.mnt.DecMode.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DecMode} returns this
 */
proto.msp.mnt.DecMode.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.DecModeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.DecModeList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.DecModeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.DecModeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DecModeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    modeList: jspb.Message.toObjectList(msg.getModeList(),
    proto.msp.mnt.DecMode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.DecModeList}
 */
proto.msp.mnt.DecModeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.DecModeList;
  return proto.msp.mnt.DecModeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.DecModeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.DecModeList}
 */
proto.msp.mnt.DecModeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.DecMode;
      reader.readMessage(value,proto.msp.mnt.DecMode.deserializeBinaryFromReader);
      msg.addMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.DecModeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.DecModeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.DecModeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DecModeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.DecMode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DecMode mode = 1;
 * @return {!Array<!proto.msp.mnt.DecMode>}
 */
proto.msp.mnt.DecModeList.prototype.getModeList = function() {
  return /** @type{!Array<!proto.msp.mnt.DecMode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.DecMode, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.DecMode>} value
 * @return {!proto.msp.mnt.DecModeList} returns this
*/
proto.msp.mnt.DecModeList.prototype.setModeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.DecMode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.DecMode}
 */
proto.msp.mnt.DecModeList.prototype.addMode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.DecMode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.DecModeList} returns this
 */
proto.msp.mnt.DecModeList.prototype.clearModeList = function() {
  return this.setModeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdBox.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    main: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdBox}
 */
proto.msp.mnt.RdBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdBox;
  return proto.msp.mnt.RdBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdBox}
 */
proto.msp.mnt.RdBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getMain();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.msp.mnt.RdBox.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RdBox} returns this
 */
proto.msp.mnt.RdBox.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 port = 2;
 * @return {number}
 */
proto.msp.mnt.RdBox.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdBox} returns this
 */
proto.msp.mnt.RdBox.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool main = 3;
 * @return {boolean}
 */
proto.msp.mnt.RdBox.prototype.getMain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.RdBox} returns this
 */
proto.msp.mnt.RdBox.prototype.setMain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.RdBoxList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdBoxList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdBoxList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdBoxList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdBoxList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdboxList: jspb.Message.toObjectList(msg.getRdboxList(),
    proto.msp.mnt.RdBox.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdBoxList}
 */
proto.msp.mnt.RdBoxList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdBoxList;
  return proto.msp.mnt.RdBoxList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdBoxList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdBoxList}
 */
proto.msp.mnt.RdBoxList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.RdBox;
      reader.readMessage(value,proto.msp.mnt.RdBox.deserializeBinaryFromReader);
      msg.addRdbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdBoxList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdBoxList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdBoxList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdBoxList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.RdBox.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdBox rdbox = 1;
 * @return {!Array<!proto.msp.mnt.RdBox>}
 */
proto.msp.mnt.RdBoxList.prototype.getRdboxList = function() {
  return /** @type{!Array<!proto.msp.mnt.RdBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.RdBox, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.RdBox>} value
 * @return {!proto.msp.mnt.RdBoxList} returns this
*/
proto.msp.mnt.RdBoxList.prototype.setRdboxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.RdBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.RdBox}
 */
proto.msp.mnt.RdBoxList.prototype.addRdbox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.RdBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.RdBoxList} returns this
 */
proto.msp.mnt.RdBoxList.prototype.clearRdboxList = function() {
  return this.setRdboxList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdPort.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdPort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdPort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPort.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lbox: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lslot: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lport: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lstate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fslot: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fport: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fstate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    module: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fit: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    phybox: jspb.Message.getFieldWithDefault(msg, 12, 0),
    phytype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    physlot: jspb.Message.getFieldWithDefault(msg, 14, 0),
    phyport: jspb.Message.getFieldWithDefault(msg, 15, 0),
    phystate: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdPort}
 */
proto.msp.mnt.RdPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdPort;
  return proto.msp.mnt.RdPort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdPort}
 */
proto.msp.mnt.RdPort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLbox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLslot(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLport(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLstate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFslot(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFport(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFstate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhybox(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhytype(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhyslot(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhyport(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPhystate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdPort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdPort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getLbox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getLslot();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getLport();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getLstate();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getFslot();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getFport();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getFstate();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getFit();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPhybox();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getPhytype();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
  f = message.getPhyslot();
  if (f !== 0) {
    writer.writeFixed32(
      14,
      f
    );
  }
  f = message.getPhyport();
  if (f !== 0) {
    writer.writeFixed32(
      15,
      f
    );
  }
  f = message.getPhystate();
  if (f !== 0) {
    writer.writeFixed32(
      16,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 lbox = 2;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getLbox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setLbox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 lslot = 4;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getLslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setLslot = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 lport = 5;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getLport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setLport = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 lstate = 6;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getLstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setLstate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 fslot = 7;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getFslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setFslot = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 fport = 8;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getFport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setFport = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 fstate = 9;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getFstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setFstate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 module = 10;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool fit = 11;
 * @return {boolean}
 */
proto.msp.mnt.RdPort.prototype.getFit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setFit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional fixed32 phybox = 12;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getPhybox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setPhybox = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 phytype = 13;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getPhytype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setPhytype = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional fixed32 physlot = 14;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getPhyslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setPhyslot = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional fixed32 phyport = 15;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getPhyport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setPhyport = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional fixed32 phystate = 16;
 * @return {number}
 */
proto.msp.mnt.RdPort.prototype.getPhystate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdPort} returns this
 */
proto.msp.mnt.RdPort.prototype.setPhystate = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.RdPortList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdPortList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdPortList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdPortList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPortList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdportList: jspb.Message.toObjectList(msg.getRdportList(),
    proto.msp.mnt.RdPort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdPortList}
 */
proto.msp.mnt.RdPortList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdPortList;
  return proto.msp.mnt.RdPortList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdPortList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdPortList}
 */
proto.msp.mnt.RdPortList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.RdPort;
      reader.readMessage(value,proto.msp.mnt.RdPort.deserializeBinaryFromReader);
      msg.addRdport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdPortList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdPortList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdPortList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPortList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.RdPort.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdPort rdport = 1;
 * @return {!Array<!proto.msp.mnt.RdPort>}
 */
proto.msp.mnt.RdPortList.prototype.getRdportList = function() {
  return /** @type{!Array<!proto.msp.mnt.RdPort>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.RdPort, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.RdPort>} value
 * @return {!proto.msp.mnt.RdPortList} returns this
*/
proto.msp.mnt.RdPortList.prototype.setRdportList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.RdPort=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.RdPort}
 */
proto.msp.mnt.RdPortList.prototype.addRdport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.RdPort, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.RdPortList} returns this
 */
proto.msp.mnt.RdPortList.prototype.clearRdportList = function() {
  return this.setRdportList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    did: jspb.Message.getFieldWithDefault(msg, 2, 0),
    on: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    result: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdOutput}
 */
proto.msp.mnt.RdOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdOutput;
  return proto.msp.mnt.RdOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdOutput}
 */
proto.msp.mnt.RdOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getDid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getOn();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional fixed32 sid = 1;
 * @return {number}
 */
proto.msp.mnt.RdOutput.prototype.getSid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdOutput} returns this
 */
proto.msp.mnt.RdOutput.prototype.setSid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 did = 2;
 * @return {number}
 */
proto.msp.mnt.RdOutput.prototype.getDid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RdOutput} returns this
 */
proto.msp.mnt.RdOutput.prototype.setDid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool on = 3;
 * @return {boolean}
 */
proto.msp.mnt.RdOutput.prototype.getOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.RdOutput} returns this
 */
proto.msp.mnt.RdOutput.prototype.setOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string result = 4;
 * @return {string}
 */
proto.msp.mnt.RdOutput.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RdOutput} returns this
 */
proto.msp.mnt.RdOutput.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.RdOutputList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdOutputList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdOutputList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdOutputList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdOutputList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rdoutList: jspb.Message.toObjectList(msg.getRdoutList(),
    proto.msp.mnt.RdOutput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdOutputList}
 */
proto.msp.mnt.RdOutputList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdOutputList;
  return proto.msp.mnt.RdOutputList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdOutputList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdOutputList}
 */
proto.msp.mnt.RdOutputList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.RdOutput;
      reader.readMessage(value,proto.msp.mnt.RdOutput.deserializeBinaryFromReader);
      msg.addRdout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdOutputList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdOutputList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdOutputList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdOutputList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRdoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.RdOutput.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RdOutput rdout = 1;
 * @return {!Array<!proto.msp.mnt.RdOutput>}
 */
proto.msp.mnt.RdOutputList.prototype.getRdoutList = function() {
  return /** @type{!Array<!proto.msp.mnt.RdOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.RdOutput, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.RdOutput>} value
 * @return {!proto.msp.mnt.RdOutputList} returns this
*/
proto.msp.mnt.RdOutputList.prototype.setRdoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.RdOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.RdOutput}
 */
proto.msp.mnt.RdOutputList.prototype.addRdout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.RdOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.RdOutputList} returns this
 */
proto.msp.mnt.RdOutputList.prototype.clearRdoutList = function() {
  return this.setRdoutList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BoxExt.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BoxExt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BoxExt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BoxExt.toObject = function(includeInstance, msg) {
  var f, obj = {
    inid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BoxExt}
 */
proto.msp.mnt.BoxExt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BoxExt;
  return proto.msp.mnt.BoxExt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BoxExt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BoxExt}
 */
proto.msp.mnt.BoxExt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BoxExt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BoxExt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BoxExt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BoxExt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string inid = 1;
 * @return {string}
 */
proto.msp.mnt.BoxExt.prototype.getInid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BoxExt} returns this
 */
proto.msp.mnt.BoxExt.prototype.setInid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string outid = 2;
 * @return {string}
 */
proto.msp.mnt.BoxExt.prototype.getOutid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BoxExt} returns this
 */
proto.msp.mnt.BoxExt.prototype.setOutid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.BoxExtList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BoxExtList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BoxExtList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BoxExtList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BoxExtList.toObject = function(includeInstance, msg) {
  var f, obj = {
    boxList: jspb.Message.toObjectList(msg.getBoxList(),
    proto.msp.mnt.BoxExt.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BoxExtList}
 */
proto.msp.mnt.BoxExtList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BoxExtList;
  return proto.msp.mnt.BoxExtList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BoxExtList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BoxExtList}
 */
proto.msp.mnt.BoxExtList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.BoxExt;
      reader.readMessage(value,proto.msp.mnt.BoxExt.deserializeBinaryFromReader);
      msg.addBox(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BoxExtList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BoxExtList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BoxExtList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BoxExtList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.BoxExt.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated BoxExt box = 1;
 * @return {!Array<!proto.msp.mnt.BoxExt>}
 */
proto.msp.mnt.BoxExtList.prototype.getBoxList = function() {
  return /** @type{!Array<!proto.msp.mnt.BoxExt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.BoxExt, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.BoxExt>} value
 * @return {!proto.msp.mnt.BoxExtList} returns this
*/
proto.msp.mnt.BoxExtList.prototype.setBoxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.BoxExt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.BoxExt}
 */
proto.msp.mnt.BoxExtList.prototype.addBox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.BoxExt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.BoxExtList} returns this
 */
proto.msp.mnt.BoxExtList.prototype.clearBoxList = function() {
  return this.setBoxList([]);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.msp.mnt.BoxExtList.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BoxExtList} returns this
 */
proto.msp.mnt.BoxExtList.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RdPortUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RdPortUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RdPortUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPortUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && proto.msp.mnt.RdPort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RdPortUpdate}
 */
proto.msp.mnt.RdPortUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RdPortUpdate;
  return proto.msp.mnt.RdPortUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RdPortUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RdPortUpdate}
 */
proto.msp.mnt.RdPortUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.msp.mnt.RdPort;
      reader.readMessage(value,proto.msp.mnt.RdPort.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RdPortUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RdPortUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RdPortUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RdPortUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.RdPort.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.msp.mnt.RdPortUpdate.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RdPortUpdate} returns this
 */
proto.msp.mnt.RdPortUpdate.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RdPort context = 2;
 * @return {?proto.msp.mnt.RdPort}
 */
proto.msp.mnt.RdPortUpdate.prototype.getContext = function() {
  return /** @type{?proto.msp.mnt.RdPort} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.RdPort, 2));
};


/**
 * @param {?proto.msp.mnt.RdPort|undefined} value
 * @return {!proto.msp.mnt.RdPortUpdate} returns this
*/
proto.msp.mnt.RdPortUpdate.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.RdPortUpdate} returns this
 */
proto.msp.mnt.RdPortUpdate.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.RdPortUpdate.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PrePlan.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PrePlan.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PrePlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PrePlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PrePlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enable: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.mnt.GroupMem.toObject, includeInstance),
    action: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PrePlan}
 */
proto.msp.mnt.PrePlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PrePlan;
  return proto.msp.mnt.PrePlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PrePlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PrePlan}
 */
proto.msp.mnt.PrePlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEnable(value);
      break;
    case 4:
      var value = new proto.msp.mnt.GroupMem;
      reader.readMessage(value,proto.msp.mnt.GroupMem.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PrePlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PrePlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PrePlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PrePlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnable();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.msp.mnt.GroupMem.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.PrePlan.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PrePlan} returns this
 */
proto.msp.mnt.PrePlan.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.PrePlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PrePlan} returns this
 */
proto.msp.mnt.PrePlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 enable = 3;
 * @return {number}
 */
proto.msp.mnt.PrePlan.prototype.getEnable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PrePlan} returns this
 */
proto.msp.mnt.PrePlan.prototype.setEnable = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated GroupMem chn = 4;
 * @return {!Array<!proto.msp.mnt.GroupMem>}
 */
proto.msp.mnt.PrePlan.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.mnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.GroupMem, 4));
};


/**
 * @param {!Array<!proto.msp.mnt.GroupMem>} value
 * @return {!proto.msp.mnt.PrePlan} returns this
*/
proto.msp.mnt.PrePlan.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msp.mnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.GroupMem}
 */
proto.msp.mnt.PrePlan.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msp.mnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PrePlan} returns this
 */
proto.msp.mnt.PrePlan.prototype.clearChnList = function() {
  return this.setChnList([]);
};


/**
 * optional fixed32 action = 5;
 * @return {number}
 */
proto.msp.mnt.PrePlan.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PrePlan} returns this
 */
proto.msp.mnt.PrePlan.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PrePlans.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PrePlans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PrePlans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PrePlans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PrePlans.toObject = function(includeInstance, msg) {
  var f, obj = {
    planList: jspb.Message.toObjectList(msg.getPlanList(),
    proto.msp.mnt.PrePlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PrePlans}
 */
proto.msp.mnt.PrePlans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PrePlans;
  return proto.msp.mnt.PrePlans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PrePlans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PrePlans}
 */
proto.msp.mnt.PrePlans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PrePlan;
      reader.readMessage(value,proto.msp.mnt.PrePlan.deserializeBinaryFromReader);
      msg.addPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PrePlans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PrePlans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PrePlans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PrePlans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PrePlan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PrePlan plan = 1;
 * @return {!Array<!proto.msp.mnt.PrePlan>}
 */
proto.msp.mnt.PrePlans.prototype.getPlanList = function() {
  return /** @type{!Array<!proto.msp.mnt.PrePlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PrePlan, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PrePlan>} value
 * @return {!proto.msp.mnt.PrePlans} returns this
*/
proto.msp.mnt.PrePlans.prototype.setPlanList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PrePlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PrePlan}
 */
proto.msp.mnt.PrePlans.prototype.addPlan = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PrePlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PrePlans} returns this
 */
proto.msp.mnt.PrePlans.prototype.clearPlanList = function() {
  return this.setPlanList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.GroupMems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.GroupMems.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.GroupMems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.GroupMems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMems.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.mnt.GroupMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.GroupMems}
 */
proto.msp.mnt.GroupMems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.GroupMems;
  return proto.msp.mnt.GroupMems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.GroupMems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.GroupMems}
 */
proto.msp.mnt.GroupMems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.GroupMem;
      reader.readMessage(value,proto.msp.mnt.GroupMem.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.GroupMems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.GroupMems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.GroupMems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.GroupMem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupMem chn = 1;
 * @return {!Array<!proto.msp.mnt.GroupMem>}
 */
proto.msp.mnt.GroupMems.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.mnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.GroupMem, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.GroupMem>} value
 * @return {!proto.msp.mnt.GroupMems} returns this
*/
proto.msp.mnt.GroupMems.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.GroupMem}
 */
proto.msp.mnt.GroupMems.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.GroupMems} returns this
 */
proto.msp.mnt.GroupMems.prototype.clearChnList = function() {
  return this.setChnList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Ids.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Ids.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Ids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Ids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Ids.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Ids}
 */
proto.msp.mnt.Ids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Ids;
  return proto.msp.mnt.Ids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Ids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Ids}
 */
proto.msp.mnt.Ids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Ids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Ids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Ids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Ids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      1,
      f
    );
  }
};


/**
 * repeated fixed32 id = 1;
 * @return {!Array<number>}
 */
proto.msp.mnt.Ids.prototype.getIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.Ids} returns this
 */
proto.msp.mnt.Ids.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Ids} returns this
 */
proto.msp.mnt.Ids.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Ids} returns this
 */
proto.msp.mnt.Ids.prototype.clearIdList = function() {
  return this.setIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.QueryChn.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.QueryChn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.QueryChn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.QueryChn.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    alias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.QueryChn}
 */
proto.msp.mnt.QueryChn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.QueryChn;
  return proto.msp.mnt.QueryChn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.QueryChn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.QueryChn}
 */
proto.msp.mnt.QueryChn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.QueryChn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.QueryChn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.QueryChn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.QueryChn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.QueryChn.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.QueryChn} returns this
 */
proto.msp.mnt.QueryChn.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.msp.mnt.QueryChn.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.QueryChn} returns this
 */
proto.msp.mnt.QueryChn.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string alias = 3;
 * @return {string}
 */
proto.msp.mnt.QueryChn.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.QueryChn} returns this
 */
proto.msp.mnt.QueryChn.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.mnt.QueryChn.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.QueryChn} returns this
 */
proto.msp.mnt.QueryChn.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.QueryChnList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.QueryChnList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.QueryChnList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.QueryChnList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.QueryChnList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.mnt.QueryChn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.QueryChnList}
 */
proto.msp.mnt.QueryChnList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.QueryChnList;
  return proto.msp.mnt.QueryChnList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.QueryChnList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.QueryChnList}
 */
proto.msp.mnt.QueryChnList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.QueryChn;
      reader.readMessage(value,proto.msp.mnt.QueryChn.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.QueryChnList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.QueryChnList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.QueryChnList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.QueryChnList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.QueryChn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryChn chn = 1;
 * @return {!Array<!proto.msp.mnt.QueryChn>}
 */
proto.msp.mnt.QueryChnList.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.mnt.QueryChn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.QueryChn, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.QueryChn>} value
 * @return {!proto.msp.mnt.QueryChnList} returns this
*/
proto.msp.mnt.QueryChnList.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.QueryChn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.QueryChn}
 */
proto.msp.mnt.QueryChnList.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.QueryChn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.QueryChnList} returns this
 */
proto.msp.mnt.QueryChnList.prototype.clearChnList = function() {
  return this.setChnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chntype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    porttype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    line: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    signal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    hid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    audiotype: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnBasic}
 */
proto.msp.mnt.ChnBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnBasic;
  return proto.msp.mnt.ChnBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnBasic}
 */
proto.msp.mnt.ChnBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChntype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPorttype(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLine(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignal(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAudiotype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getChntype();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getPorttype();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLine();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSignal();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAudiotype();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.ChnBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.ChnBasic.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 chntype = 3;
 * @return {number}
 */
proto.msp.mnt.ChnBasic.prototype.getChntype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setChntype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 porttype = 4;
 * @return {number}
 */
proto.msp.mnt.ChnBasic.prototype.getPorttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setPorttype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool online = 5;
 * @return {boolean}
 */
proto.msp.mnt.ChnBasic.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool line = 6;
 * @return {boolean}
 */
proto.msp.mnt.ChnBasic.prototype.getLine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setLine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool signal = 7;
 * @return {boolean}
 */
proto.msp.mnt.ChnBasic.prototype.getSignal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setSignal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string hid = 8;
 * @return {string}
 */
proto.msp.mnt.ChnBasic.prototype.getHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setHid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 audiotype = 9;
 * @return {number}
 */
proto.msp.mnt.ChnBasic.prototype.getAudiotype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnBasic} returns this
 */
proto.msp.mnt.ChnBasic.prototype.setAudiotype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.msp.mnt.ChnBasic.toObject(includeInstance, f),
    resw: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resh: jspb.Message.getFieldWithDefault(msg, 3, 0),
    streamnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    avsync: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    aid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    anum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    astate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ause: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnInfo}
 */
proto.msp.mnt.ChnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnInfo;
  return proto.msp.mnt.ChnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnInfo}
 */
proto.msp.mnt.ChnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ChnBasic;
      reader.readMessage(value,proto.msp.mnt.ChnBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setResw(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setResh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStreamnum(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvsync(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAstate(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.ChnBasic.serializeBinaryToWriter
    );
  }
  f = message.getResw();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getResh();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getStreamnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getAvsync();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAid();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getAnum();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getAstate();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getAuse();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional ChnBasic base = 1;
 * @return {?proto.msp.mnt.ChnBasic}
 */
proto.msp.mnt.ChnInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.mnt.ChnBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.ChnBasic, 1));
};


/**
 * @param {?proto.msp.mnt.ChnBasic|undefined} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
*/
proto.msp.mnt.ChnInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.ChnInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 resw = 2;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getResw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setResw = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 resh = 3;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getResh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setResh = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 streamnum = 4;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getStreamnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setStreamnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool avsync = 5;
 * @return {boolean}
 */
proto.msp.mnt.ChnInfo.prototype.getAvsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setAvsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional fixed32 aid = 6;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setAid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 anum = 7;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getAnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setAnum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 astate = 8;
 * @return {number}
 */
proto.msp.mnt.ChnInfo.prototype.getAstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setAstate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool ause = 9;
 * @return {boolean}
 */
proto.msp.mnt.ChnInfo.prototype.getAuse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnInfo} returns this
 */
proto.msp.mnt.ChnInfo.prototype.setAuse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.ChnInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.mnt.ChnInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnInfoList}
 */
proto.msp.mnt.ChnInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnInfoList;
  return proto.msp.mnt.ChnInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnInfoList}
 */
proto.msp.mnt.ChnInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ChnInfo;
      reader.readMessage(value,proto.msp.mnt.ChnInfo.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.ChnInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnInfo chn = 1;
 * @return {!Array<!proto.msp.mnt.ChnInfo>}
 */
proto.msp.mnt.ChnInfoList.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.mnt.ChnInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.ChnInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.ChnInfo>} value
 * @return {!proto.msp.mnt.ChnInfoList} returns this
*/
proto.msp.mnt.ChnInfoList.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.ChnInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.ChnInfo}
 */
proto.msp.mnt.ChnInfoList.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.ChnInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.ChnInfoList} returns this
 */
proto.msp.mnt.ChnInfoList.prototype.clearChnList = function() {
  return this.setChnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    parentid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnGroup}
 */
proto.msp.mnt.ChnGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnGroup;
  return proto.msp.mnt.ChnGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnGroup}
 */
proto.msp.mnt.ChnGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNextid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getNextid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getParentid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.ChnGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.ChnGroup} returns this
 */
proto.msp.mnt.ChnGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.ChnGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnGroup} returns this
 */
proto.msp.mnt.ChnGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 nextid = 3;
 * @return {number}
 */
proto.msp.mnt.ChnGroup.prototype.getNextid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnGroup} returns this
 */
proto.msp.mnt.ChnGroup.prototype.setNextid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 parentid = 4;
 * @return {number}
 */
proto.msp.mnt.ChnGroup.prototype.getParentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnGroup} returns this
 */
proto.msp.mnt.ChnGroup.prototype.setParentid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnGroupState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnGroupState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnGroupState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroupState.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.msp.mnt.ChnGroup.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnGroupState}
 */
proto.msp.mnt.ChnGroupState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnGroupState;
  return proto.msp.mnt.ChnGroupState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnGroupState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnGroupState}
 */
proto.msp.mnt.ChnGroupState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ChnGroup;
      reader.readMessage(value,proto.msp.mnt.ChnGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnGroupState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnGroupState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnGroupState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroupState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.ChnGroup.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional ChnGroup group = 1;
 * @return {?proto.msp.mnt.ChnGroup}
 */
proto.msp.mnt.ChnGroupState.prototype.getGroup = function() {
  return /** @type{?proto.msp.mnt.ChnGroup} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.ChnGroup, 1));
};


/**
 * @param {?proto.msp.mnt.ChnGroup|undefined} value
 * @return {!proto.msp.mnt.ChnGroupState} returns this
*/
proto.msp.mnt.ChnGroupState.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.ChnGroupState} returns this
 */
proto.msp.mnt.ChnGroupState.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.ChnGroupState.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.ChnGroupState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnGroupState} returns this
 */
proto.msp.mnt.ChnGroupState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.ChnGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chngroupList: jspb.Message.toObjectList(msg.getChngroupList(),
    proto.msp.mnt.ChnGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnGroupList}
 */
proto.msp.mnt.ChnGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnGroupList;
  return proto.msp.mnt.ChnGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnGroupList}
 */
proto.msp.mnt.ChnGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ChnGroup;
      reader.readMessage(value,proto.msp.mnt.ChnGroup.deserializeBinaryFromReader);
      msg.addChngroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChngroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.ChnGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnGroup chngroup = 1;
 * @return {!Array<!proto.msp.mnt.ChnGroup>}
 */
proto.msp.mnt.ChnGroupList.prototype.getChngroupList = function() {
  return /** @type{!Array<!proto.msp.mnt.ChnGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.ChnGroup, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.ChnGroup>} value
 * @return {!proto.msp.mnt.ChnGroupList} returns this
*/
proto.msp.mnt.ChnGroupList.prototype.setChngroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.ChnGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.ChnGroup}
 */
proto.msp.mnt.ChnGroupList.prototype.addChngroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.ChnGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.ChnGroupList} returns this
 */
proto.msp.mnt.ChnGroupList.prototype.clearChngroupList = function() {
  return this.setChngroupList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.GroupMemList.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.GroupMemList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.GroupMemList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.GroupMemList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMemList.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupmenList: jspb.Message.toObjectList(msg.getGroupmenList(),
    proto.msp.mnt.GroupMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.GroupMemList}
 */
proto.msp.mnt.GroupMemList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.GroupMemList;
  return proto.msp.mnt.GroupMemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.GroupMemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.GroupMemList}
 */
proto.msp.mnt.GroupMemList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 3:
      var value = new proto.msp.mnt.GroupMem;
      reader.readMessage(value,proto.msp.mnt.GroupMem.deserializeBinaryFromReader);
      msg.addGroupmen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.GroupMemList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.GroupMemList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.GroupMemList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.GroupMemList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getGroupmenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msp.mnt.GroupMem.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.GroupMemList.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMemList} returns this
 */
proto.msp.mnt.GroupMemList.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.GroupMemList.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.GroupMemList} returns this
 */
proto.msp.mnt.GroupMemList.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated GroupMem groupmen = 3;
 * @return {!Array<!proto.msp.mnt.GroupMem>}
 */
proto.msp.mnt.GroupMemList.prototype.getGroupmenList = function() {
  return /** @type{!Array<!proto.msp.mnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.GroupMem, 3));
};


/**
 * @param {!Array<!proto.msp.mnt.GroupMem>} value
 * @return {!proto.msp.mnt.GroupMemList} returns this
*/
proto.msp.mnt.GroupMemList.prototype.setGroupmenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.mnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.GroupMem}
 */
proto.msp.mnt.GroupMemList.prototype.addGroupmen = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.mnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.GroupMemList} returns this
 */
proto.msp.mnt.GroupMemList.prototype.clearGroupmenList = function() {
  return this.setGroupmenList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnNetEnalbe.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnNetEnalbe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnNetEnalbe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnNetEnalbe.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnNetEnalbe}
 */
proto.msp.mnt.ChnNetEnalbe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnNetEnalbe;
  return proto.msp.mnt.ChnNetEnalbe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnNetEnalbe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnNetEnalbe}
 */
proto.msp.mnt.ChnNetEnalbe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnNetEnalbe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnNetEnalbe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnNetEnalbe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnNetEnalbe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.ChnNetEnalbe.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnNetEnalbe} returns this
 */
proto.msp.mnt.ChnNetEnalbe.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool enable = 2;
 * @return {boolean}
 */
proto.msp.mnt.ChnNetEnalbe.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ChnNetEnalbe} returns this
 */
proto.msp.mnt.ChnNetEnalbe.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.ChnNetEnalbeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnNetEnalbeList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnNetEnalbeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnNetEnalbeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnNetEnalbeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnnetnableList: jspb.Message.toObjectList(msg.getChnnetnableList(),
    proto.msp.mnt.ChnNetEnalbe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnNetEnalbeList}
 */
proto.msp.mnt.ChnNetEnalbeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnNetEnalbeList;
  return proto.msp.mnt.ChnNetEnalbeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnNetEnalbeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnNetEnalbeList}
 */
proto.msp.mnt.ChnNetEnalbeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ChnNetEnalbe;
      reader.readMessage(value,proto.msp.mnt.ChnNetEnalbe.deserializeBinaryFromReader);
      msg.addChnnetnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnNetEnalbeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnNetEnalbeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnNetEnalbeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnNetEnalbeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnnetnableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.ChnNetEnalbe.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnNetEnalbe chnnetnable = 1;
 * @return {!Array<!proto.msp.mnt.ChnNetEnalbe>}
 */
proto.msp.mnt.ChnNetEnalbeList.prototype.getChnnetnableList = function() {
  return /** @type{!Array<!proto.msp.mnt.ChnNetEnalbe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.ChnNetEnalbe, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.ChnNetEnalbe>} value
 * @return {!proto.msp.mnt.ChnNetEnalbeList} returns this
*/
proto.msp.mnt.ChnNetEnalbeList.prototype.setChnnetnableList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.ChnNetEnalbe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.ChnNetEnalbe}
 */
proto.msp.mnt.ChnNetEnalbeList.prototype.addChnnetnable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.ChnNetEnalbe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.ChnNetEnalbeList} returns this
 */
proto.msp.mnt.ChnNetEnalbeList.prototype.clearChnnetnableList = function() {
  return this.setChnnetnableList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnMode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    module: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hdmi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    line: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnMode}
 */
proto.msp.mnt.ChnMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnMode;
  return proto.msp.mnt.ChnMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnMode}
 */
proto.msp.mnt.ChnMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHdmi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getHdmi();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.ChnMode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnMode} returns this
 */
proto.msp.mnt.ChnMode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 module = 2;
 * @return {number}
 */
proto.msp.mnt.ChnMode.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnMode} returns this
 */
proto.msp.mnt.ChnMode.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 hdmi = 3;
 * @return {number}
 */
proto.msp.mnt.ChnMode.prototype.getHdmi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnMode} returns this
 */
proto.msp.mnt.ChnMode.prototype.setHdmi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 line = 4;
 * @return {number}
 */
proto.msp.mnt.ChnMode.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnMode} returns this
 */
proto.msp.mnt.ChnMode.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnEdid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnEdid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnEdid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnEdid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    edid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnEdid}
 */
proto.msp.mnt.ChnEdid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnEdid;
  return proto.msp.mnt.ChnEdid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnEdid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnEdid}
 */
proto.msp.mnt.ChnEdid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEdid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnEdid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnEdid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnEdid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnEdid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEdid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.ChnEdid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ChnEdid} returns this
 */
proto.msp.mnt.ChnEdid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string edid = 2;
 * @return {string}
 */
proto.msp.mnt.ChnEdid.prototype.getEdid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.ChnEdid} returns this
 */
proto.msp.mnt.ChnEdid.prototype.setEdid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Edid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Edid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Edid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Edid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    module: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cfg: jspb.Message.getFieldWithDefault(msg, 5, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Edid}
 */
proto.msp.mnt.Edid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Edid;
  return proto.msp.mnt.Edid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Edid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Edid}
 */
proto.msp.mnt.Edid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCfg(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Edid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Edid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Edid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Edid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCfg();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Edid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 width = 2;
 * @return {number}
 */
proto.msp.mnt.Edid.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 height = 3;
 * @return {number}
 */
proto.msp.mnt.Edid.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string module = 4;
 * @return {string}
 */
proto.msp.mnt.Edid.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setModule = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string cfg = 5;
 * @return {string}
 */
proto.msp.mnt.Edid.prototype.getCfg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setCfg = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string desc = 6;
 * @return {string}
 */
proto.msp.mnt.Edid.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Edid} returns this
 */
proto.msp.mnt.Edid.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.EdidList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.EdidList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.EdidList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.EdidList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.EdidList.toObject = function(includeInstance, msg) {
  var f, obj = {
    edidList: jspb.Message.toObjectList(msg.getEdidList(),
    proto.msp.mnt.Edid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.EdidList}
 */
proto.msp.mnt.EdidList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.EdidList;
  return proto.msp.mnt.EdidList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.EdidList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.EdidList}
 */
proto.msp.mnt.EdidList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Edid;
      reader.readMessage(value,proto.msp.mnt.Edid.deserializeBinaryFromReader);
      msg.addEdid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.EdidList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.EdidList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.EdidList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.EdidList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdidList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.Edid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Edid edid = 1;
 * @return {!Array<!proto.msp.mnt.Edid>}
 */
proto.msp.mnt.EdidList.prototype.getEdidList = function() {
  return /** @type{!Array<!proto.msp.mnt.Edid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Edid, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.Edid>} value
 * @return {!proto.msp.mnt.EdidList} returns this
*/
proto.msp.mnt.EdidList.prototype.setEdidList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.Edid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Edid}
 */
proto.msp.mnt.EdidList.prototype.addEdid = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.Edid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.EdidList} returns this
 */
proto.msp.mnt.EdidList.prototype.clearEdidList = function() {
  return this.setEdidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    umtid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtGroup}
 */
proto.msp.mnt.UmtGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtGroup;
  return proto.msp.mnt.UmtGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtGroup}
 */
proto.msp.mnt.UmtGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUmtid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUmtid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.UmtGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtGroup} returns this
 */
proto.msp.mnt.UmtGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 umtid = 2;
 * @return {number}
 */
proto.msp.mnt.UmtGroup.prototype.getUmtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtGroup} returns this
 */
proto.msp.mnt.UmtGroup.prototype.setUmtid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.msp.mnt.UmtGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtGroup} returns this
 */
proto.msp.mnt.UmtGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string parentid = 4;
 * @return {string}
 */
proto.msp.mnt.UmtGroup.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtGroup} returns this
 */
proto.msp.mnt.UmtGroup.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string domain = 5;
 * @return {string}
 */
proto.msp.mnt.UmtGroup.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtGroup} returns this
 */
proto.msp.mnt.UmtGroup.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtgroupList: jspb.Message.toObjectList(msg.getUmtgroupList(),
    proto.msp.mnt.UmtGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtGroupList}
 */
proto.msp.mnt.UmtGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtGroupList;
  return proto.msp.mnt.UmtGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtGroupList}
 */
proto.msp.mnt.UmtGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtGroup;
      reader.readMessage(value,proto.msp.mnt.UmtGroup.deserializeBinaryFromReader);
      msg.addUmtgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UmtGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtGroup umtgroup = 1;
 * @return {!Array<!proto.msp.mnt.UmtGroup>}
 */
proto.msp.mnt.UmtGroupList.prototype.getUmtgroupList = function() {
  return /** @type{!Array<!proto.msp.mnt.UmtGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UmtGroup, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UmtGroup>} value
 * @return {!proto.msp.mnt.UmtGroupList} returns this
*/
proto.msp.mnt.UmtGroupList.prototype.setUmtgroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UmtGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UmtGroup}
 */
proto.msp.mnt.UmtGroupList.prototype.addUmtgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UmtGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtGroupList} returns this
 */
proto.msp.mnt.UmtGroupList.prototype.clearUmtgroupList = function() {
  return this.setUmtgroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtChn.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtChn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtChn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChn.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gbid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parentid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    ip: jspb.Message.getFieldWithDefault(msg, 7, ""),
    firm: jspb.Message.getFieldWithDefault(msg, 8, ""),
    longitude: jspb.Message.getFieldWithDefault(msg, 9, ""),
    latitude: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtChn}
 */
proto.msp.mnt.UmtChn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtChn;
  return proto.msp.mnt.UmtChn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtChn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtChn}
 */
proto.msp.mnt.UmtChn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUmtid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGbid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtChn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtChn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtChn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGbid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFirm();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLongitude();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLatitude();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional fixed32 umtid = 1;
 * @return {number}
 */
proto.msp.mnt.UmtChn.prototype.getUmtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setUmtid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.UmtChn.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gbid = 4;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getGbid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setGbid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parentid = 5;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool online = 6;
 * @return {boolean}
 */
proto.msp.mnt.UmtChn.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string ip = 7;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string firm = 8;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getFirm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setFirm = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string longitude = 9;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string latitude = 10;
 * @return {string}
 */
proto.msp.mnt.UmtChn.prototype.getLatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.UmtChn} returns this
 */
proto.msp.mnt.UmtChn.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtChnList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtChnList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtChnList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtChnList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtchnList: jspb.Message.toObjectList(msg.getUmtchnList(),
    proto.msp.mnt.UmtChn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtChnList}
 */
proto.msp.mnt.UmtChnList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtChnList;
  return proto.msp.mnt.UmtChnList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtChnList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtChnList}
 */
proto.msp.mnt.UmtChnList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtChn;
      reader.readMessage(value,proto.msp.mnt.UmtChn.deserializeBinaryFromReader);
      msg.addUmtchn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtChnList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtChnList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtChnList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtchnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UmtChn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtChn umtchn = 1;
 * @return {!Array<!proto.msp.mnt.UmtChn>}
 */
proto.msp.mnt.UmtChnList.prototype.getUmtchnList = function() {
  return /** @type{!Array<!proto.msp.mnt.UmtChn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UmtChn, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UmtChn>} value
 * @return {!proto.msp.mnt.UmtChnList} returns this
*/
proto.msp.mnt.UmtChnList.prototype.setUmtchnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UmtChn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UmtChn}
 */
proto.msp.mnt.UmtChnList.prototype.addUmtchn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UmtChn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtChnList} returns this
 */
proto.msp.mnt.UmtChnList.prototype.clearUmtchnList = function() {
  return this.setUmtchnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtChnState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtChnState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtChnState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnState.toObject = function(includeInstance, msg) {
  var f, obj = {
    dev: (f = msg.getDev()) && proto.msp.mnt.UmtChn.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtChnState}
 */
proto.msp.mnt.UmtChnState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtChnState;
  return proto.msp.mnt.UmtChnState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtChnState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtChnState}
 */
proto.msp.mnt.UmtChnState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtChn;
      reader.readMessage(value,proto.msp.mnt.UmtChn.deserializeBinaryFromReader);
      msg.setDev(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtChnState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtChnState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtChnState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDev();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.UmtChn.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional UmtChn dev = 1;
 * @return {?proto.msp.mnt.UmtChn}
 */
proto.msp.mnt.UmtChnState.prototype.getDev = function() {
  return /** @type{?proto.msp.mnt.UmtChn} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.UmtChn, 1));
};


/**
 * @param {?proto.msp.mnt.UmtChn|undefined} value
 * @return {!proto.msp.mnt.UmtChnState} returns this
*/
proto.msp.mnt.UmtChnState.prototype.setDev = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.UmtChnState} returns this
 */
proto.msp.mnt.UmtChnState.prototype.clearDev = function() {
  return this.setDev(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.UmtChnState.prototype.hasDev = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.UmtChnState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UmtChnState} returns this
 */
proto.msp.mnt.UmtChnState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UmtChnStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UmtChnStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UmtChnStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UmtChnStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtchnstateList: jspb.Message.toObjectList(msg.getUmtchnstateList(),
    proto.msp.mnt.UmtChnState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UmtChnStateList}
 */
proto.msp.mnt.UmtChnStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UmtChnStateList;
  return proto.msp.mnt.UmtChnStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UmtChnStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UmtChnStateList}
 */
proto.msp.mnt.UmtChnStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UmtChnState;
      reader.readMessage(value,proto.msp.mnt.UmtChnState.deserializeBinaryFromReader);
      msg.addUmtchnstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UmtChnStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UmtChnStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UmtChnStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UmtChnStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtchnstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UmtChnState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtChnState umtchnstate = 1;
 * @return {!Array<!proto.msp.mnt.UmtChnState>}
 */
proto.msp.mnt.UmtChnStateList.prototype.getUmtchnstateList = function() {
  return /** @type{!Array<!proto.msp.mnt.UmtChnState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UmtChnState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UmtChnState>} value
 * @return {!proto.msp.mnt.UmtChnStateList} returns this
*/
proto.msp.mnt.UmtChnStateList.prototype.setUmtchnstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UmtChnState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UmtChnState}
 */
proto.msp.mnt.UmtChnStateList.prototype.addUmtchnstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UmtChnState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UmtChnStateList} returns this
 */
proto.msp.mnt.UmtChnStateList.prototype.clearUmtchnstateList = function() {
  return this.setUmtchnstateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ComCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ComCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ComCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ComCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    proto: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    databits: jspb.Message.getFieldWithDefault(msg, 5, 0),
    stopbits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    parity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    baudrate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    id: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ComCfg}
 */
proto.msp.mnt.ComCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ComCfg;
  return proto.msp.mnt.ComCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ComCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ComCfg}
 */
proto.msp.mnt.ComCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setProto(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDatabits(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStopbits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBaudrate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ComCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ComCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ComCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ComCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProto();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getState();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDatabits();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getStopbits();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getParity();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getBaudrate();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional fixed32 proto = 1;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getProto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setProto = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool state = 4;
 * @return {boolean}
 */
proto.msp.mnt.ComCfg.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional fixed32 databits = 5;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getDatabits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setDatabits = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 stopbits = 6;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getStopbits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setStopbits = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 parity = 7;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getParity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setParity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 baudrate = 8;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getBaudrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setBaudrate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 id = 9;
 * @return {number}
 */
proto.msp.mnt.ComCfg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComCfg} returns this
 */
proto.msp.mnt.ComCfg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ComPtz.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ComPtz.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ComPtz} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ComPtz.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ComPtz}
 */
proto.msp.mnt.ComPtz.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ComPtz;
  return proto.msp.mnt.ComPtz.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ComPtz} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ComPtz}
 */
proto.msp.mnt.ComPtz.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ComPtz.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ComPtz.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ComPtz} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ComPtz.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.ComPtz.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.ComPtz} returns this
 */
proto.msp.mnt.ComPtz.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool enable = 2;
 * @return {boolean}
 */
proto.msp.mnt.ComPtz.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.ComPtz} returns this
 */
proto.msp.mnt.ComPtz.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Property}
 */
proto.msp.mnt.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Property;
  return proto.msp.mnt.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Property}
 */
proto.msp.mnt.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Property.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Property} returns this
 */
proto.msp.mnt.Property.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.mnt.Property.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Property} returns this
 */
proto.msp.mnt.Property.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.DevBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.DevBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.DevBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mac: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sn: jspb.Message.getFieldWithDefault(msg, 7, ""),
    model: jspb.Message.getFieldWithDefault(msg, 8, ""),
    hwver: jspb.Message.getFieldWithDefault(msg, 9, ""),
    softver: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fwnum: jspb.Message.getFieldWithDefault(msg, 11, 0),
    port: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.DevBasic}
 */
proto.msp.mnt.DevBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.DevBasic;
  return proto.msp.mnt.DevBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.DevBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.DevBasic}
 */
proto.msp.mnt.DevBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHwver(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFwnum(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.DevBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.DevBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.DevBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getHid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHwver();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFwnum();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 hid = 4;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getHid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setHid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 pid = 5;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string mac = 6;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sn = 7;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string model = 8;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string hwver = 9;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getHwver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setHwver = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string softver = 10;
 * @return {string}
 */
proto.msp.mnt.DevBasic.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional fixed32 fwnum = 11;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getFwnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setFwnum = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 port = 12;
 * @return {number}
 */
proto.msp.mnt.DevBasic.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevBasic} returns this
 */
proto.msp.mnt.DevBasic.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.DevInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.DevInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.DevInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    portcap: jspb.Message.getFieldWithDefault(msg, 6, 0),
    base: (f = msg.getBase()) && proto.msp.mnt.DevBasic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.DevInfo}
 */
proto.msp.mnt.DevInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.DevInfo;
  return proto.msp.mnt.DevInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.DevInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.DevInfo}
 */
proto.msp.mnt.DevInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPortcap(value);
      break;
    case 7:
      var value = new proto.msp.mnt.DevBasic;
      reader.readMessage(value,proto.msp.mnt.DevBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.DevInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.DevInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.DevInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getPortcap();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.msp.mnt.DevBasic.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.DevInfo.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.mnt.DevInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.mnt.DevInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool online = 4;
 * @return {boolean}
 */
proto.msp.mnt.DevInfo.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional fixed32 status = 5;
 * @return {number}
 */
proto.msp.mnt.DevInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 portcap = 6;
 * @return {number}
 */
proto.msp.mnt.DevInfo.prototype.getPortcap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.setPortcap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional DevBasic base = 7;
 * @return {?proto.msp.mnt.DevBasic}
 */
proto.msp.mnt.DevInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.mnt.DevBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.DevBasic, 7));
};


/**
 * @param {?proto.msp.mnt.DevBasic|undefined} value
 * @return {!proto.msp.mnt.DevInfo} returns this
*/
proto.msp.mnt.DevInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.DevInfo} returns this
 */
proto.msp.mnt.DevInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.DevInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.DevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.DevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.DevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.DevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.mnt.DevInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.DevList}
 */
proto.msp.mnt.DevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.DevList;
  return proto.msp.mnt.DevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.DevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.DevList}
 */
proto.msp.mnt.DevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.DevInfo;
      reader.readMessage(value,proto.msp.mnt.DevInfo.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.DevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.DevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.DevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.DevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.DevInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DevInfo dev = 1;
 * @return {!Array<!proto.msp.mnt.DevInfo>}
 */
proto.msp.mnt.DevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.mnt.DevInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.DevInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.DevInfo>} value
 * @return {!proto.msp.mnt.DevList} returns this
*/
proto.msp.mnt.DevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.DevInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.DevInfo}
 */
proto.msp.mnt.DevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.DevInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.DevList} returns this
 */
proto.msp.mnt.DevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.SearchCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.SearchCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.SearchCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.SearchCfg}
 */
proto.msp.mnt.SearchCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.SearchCfg;
  return proto.msp.mnt.SearchCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.SearchCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.SearchCfg}
 */
proto.msp.mnt.SearchCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.SearchCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.SearchCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.SearchCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
};


/**
 * optional fixed32 timeout = 1;
 * @return {number}
 */
proto.msp.mnt.SearchCfg.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SearchCfg} returns this
 */
proto.msp.mnt.SearchCfg.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.SearchDev.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.SearchDev.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.SearchDev} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchDev.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    model: jspb.Message.getFieldWithDefault(msg, 3, ""),
    slot: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mac: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 7, ""),
    gw: jspb.Message.getFieldWithDefault(msg, 8, ""),
    runtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    regip: jspb.Message.getFieldWithDefault(msg, 10, ""),
    regport: jspb.Message.getFieldWithDefault(msg, 11, 0),
    softver: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.SearchDev}
 */
proto.msp.mnt.SearchDev.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.SearchDev;
  return proto.msp.mnt.SearchDev.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.SearchDev} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.SearchDev}
 */
proto.msp.mnt.SearchDev.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMask(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGw(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRuntime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegip(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRegport(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.SearchDev.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.SearchDev.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.SearchDev} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchDev.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMask();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGw();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRuntime();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getRegip();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRegport();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model = 3;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 slot = 4;
 * @return {number}
 */
proto.msp.mnt.SearchDev.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string mac = 5;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ip = 6;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mask = 7;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setMask = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string gw = 8;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getGw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setGw = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 runtime = 9;
 * @return {number}
 */
proto.msp.mnt.SearchDev.prototype.getRuntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setRuntime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string regip = 10;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getRegip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setRegip = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional fixed32 regport = 11;
 * @return {number}
 */
proto.msp.mnt.SearchDev.prototype.getRegport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setRegport = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string softver = 12;
 * @return {string}
 */
proto.msp.mnt.SearchDev.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SearchDev} returns this
 */
proto.msp.mnt.SearchDev.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.SearchDevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.SearchDevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.SearchDevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.SearchDevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchDevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.mnt.SearchDev.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.SearchDevList}
 */
proto.msp.mnt.SearchDevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.SearchDevList;
  return proto.msp.mnt.SearchDevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.SearchDevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.SearchDevList}
 */
proto.msp.mnt.SearchDevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.SearchDev;
      reader.readMessage(value,proto.msp.mnt.SearchDev.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.SearchDevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.SearchDevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.SearchDevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SearchDevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.SearchDev.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SearchDev dev = 1;
 * @return {!Array<!proto.msp.mnt.SearchDev>}
 */
proto.msp.mnt.SearchDevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.mnt.SearchDev>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.SearchDev, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.SearchDev>} value
 * @return {!proto.msp.mnt.SearchDevList} returns this
*/
proto.msp.mnt.SearchDevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.SearchDev=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.SearchDev}
 */
proto.msp.mnt.SearchDevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.SearchDev, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.SearchDevList} returns this
 */
proto.msp.mnt.SearchDevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RegDev.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RegDev.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RegDev} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RegDev.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    regip: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RegDev}
 */
proto.msp.mnt.RegDev.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RegDev;
  return proto.msp.mnt.RegDev.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RegDev} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RegDev}
 */
proto.msp.mnt.RegDev.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RegDev.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RegDev.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RegDev} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RegDev.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mac = 1;
 * @return {string}
 */
proto.msp.mnt.RegDev.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RegDev} returns this
 */
proto.msp.mnt.RegDev.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.mnt.RegDev.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RegDev} returns this
 */
proto.msp.mnt.RegDev.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string regip = 3;
 * @return {string}
 */
proto.msp.mnt.RegDev.prototype.getRegip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RegDev} returns this
 */
proto.msp.mnt.RegDev.prototype.setRegip = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.RegDevList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RegDevList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RegDevList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RegDevList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RegDevList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devList: jspb.Message.toObjectList(msg.getDevList(),
    proto.msp.mnt.RegDev.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RegDevList}
 */
proto.msp.mnt.RegDevList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RegDevList;
  return proto.msp.mnt.RegDevList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RegDevList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RegDevList}
 */
proto.msp.mnt.RegDevList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.RegDev;
      reader.readMessage(value,proto.msp.mnt.RegDev.deserializeBinaryFromReader);
      msg.addDev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RegDevList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RegDevList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RegDevList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RegDevList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.RegDev.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RegDev dev = 1;
 * @return {!Array<!proto.msp.mnt.RegDev>}
 */
proto.msp.mnt.RegDevList.prototype.getDevList = function() {
  return /** @type{!Array<!proto.msp.mnt.RegDev>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.RegDev, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.RegDev>} value
 * @return {!proto.msp.mnt.RegDevList} returns this
*/
proto.msp.mnt.RegDevList.prototype.setDevList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.RegDev=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.RegDev}
 */
proto.msp.mnt.RegDevList.prototype.addDev = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.RegDev, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.RegDevList} returns this
 */
proto.msp.mnt.RegDevList.prototype.clearDevList = function() {
  return this.setDevList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FwInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FwInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FwInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FwInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    no: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    softver: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FwInfo}
 */
proto.msp.mnt.FwInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FwInfo;
  return proto.msp.mnt.FwInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FwInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FwInfo}
 */
proto.msp.mnt.FwInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FwInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FwInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FwInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FwInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNo();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSoftver();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 no = 1;
 * @return {number}
 */
proto.msp.mnt.FwInfo.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FwInfo} returns this
 */
proto.msp.mnt.FwInfo.prototype.setNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.FwInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FwInfo} returns this
 */
proto.msp.mnt.FwInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string softver = 3;
 * @return {string}
 */
proto.msp.mnt.FwInfo.prototype.getSoftver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FwInfo} returns this
 */
proto.msp.mnt.FwInfo.prototype.setSoftver = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.FwList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FwList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FwList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FwList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FwList.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fwList: jspb.Message.toObjectList(msg.getFwList(),
    proto.msp.mnt.FwInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FwList}
 */
proto.msp.mnt.FwList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FwList;
  return proto.msp.mnt.FwList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FwList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FwList}
 */
proto.msp.mnt.FwList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = new proto.msp.mnt.FwInfo;
      reader.readMessage(value,proto.msp.mnt.FwInfo.deserializeBinaryFromReader);
      msg.addFw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FwList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FwList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FwList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FwList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFwList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.FwInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.FwList.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FwList} returns this
 */
proto.msp.mnt.FwList.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FwInfo fw = 2;
 * @return {!Array<!proto.msp.mnt.FwInfo>}
 */
proto.msp.mnt.FwList.prototype.getFwList = function() {
  return /** @type{!Array<!proto.msp.mnt.FwInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.FwInfo, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.FwInfo>} value
 * @return {!proto.msp.mnt.FwList} returns this
*/
proto.msp.mnt.FwList.prototype.setFwList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.FwInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.FwInfo}
 */
proto.msp.mnt.FwList.prototype.addFw = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.FwInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.FwList} returns this
 */
proto.msp.mnt.FwList.prototype.clearFwList = function() {
  return this.setFwList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BatchCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BatchCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BatchCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BatchCfg}
 */
proto.msp.mnt.BatchCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BatchCfg;
  return proto.msp.mnt.BatchCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BatchCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BatchCfg}
 */
proto.msp.mnt.BatchCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BatchCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BatchCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BatchCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.BatchCfg.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BatchCfg} returns this
 */
proto.msp.mnt.BatchCfg.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.mnt.BatchCfg.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BatchCfg} returns this
 */
proto.msp.mnt.BatchCfg.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 type = 3;
 * @return {number}
 */
proto.msp.mnt.BatchCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BatchCfg} returns this
 */
proto.msp.mnt.BatchCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.BatchCfgList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BatchCfgList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BatchCfgList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BatchCfgList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchCfgList.toObject = function(includeInstance, msg) {
  var f, obj = {
    meth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchList: jspb.Message.toObjectList(msg.getBatchList(),
    proto.msp.mnt.BatchCfg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BatchCfgList}
 */
proto.msp.mnt.BatchCfgList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BatchCfgList;
  return proto.msp.mnt.BatchCfgList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BatchCfgList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BatchCfgList}
 */
proto.msp.mnt.BatchCfgList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 2:
      var value = new proto.msp.mnt.BatchCfg;
      reader.readMessage(value,proto.msp.mnt.BatchCfg.deserializeBinaryFromReader);
      msg.addBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BatchCfgList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BatchCfgList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BatchCfgList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchCfgList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.BatchCfg.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 meth = 1;
 * @return {number}
 */
proto.msp.mnt.BatchCfgList.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BatchCfgList} returns this
 */
proto.msp.mnt.BatchCfgList.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated BatchCfg batch = 2;
 * @return {!Array<!proto.msp.mnt.BatchCfg>}
 */
proto.msp.mnt.BatchCfgList.prototype.getBatchList = function() {
  return /** @type{!Array<!proto.msp.mnt.BatchCfg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.BatchCfg, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.BatchCfg>} value
 * @return {!proto.msp.mnt.BatchCfgList} returns this
*/
proto.msp.mnt.BatchCfgList.prototype.setBatchList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.BatchCfg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.BatchCfg}
 */
proto.msp.mnt.BatchCfgList.prototype.addBatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.BatchCfg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.BatchCfgList} returns this
 */
proto.msp.mnt.BatchCfgList.prototype.clearBatchList = function() {
  return this.setBatchList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    meth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BatchInfo}
 */
proto.msp.mnt.BatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BatchInfo;
  return proto.msp.mnt.BatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BatchInfo}
 */
proto.msp.mnt.BatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional fixed32 meth = 1;
 * @return {number}
 */
proto.msp.mnt.BatchInfo.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BatchInfo} returns this
 */
proto.msp.mnt.BatchInfo.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.msp.mnt.BatchInfo.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BatchInfo} returns this
 */
proto.msp.mnt.BatchInfo.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BatchProg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BatchProg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BatchProg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchProg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BatchProg}
 */
proto.msp.mnt.BatchProg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BatchProg;
  return proto.msp.mnt.BatchProg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BatchProg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BatchProg}
 */
proto.msp.mnt.BatchProg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMeth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BatchProg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BatchProg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BatchProg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BatchProg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeth();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.BatchProg.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BatchProg} returns this
 */
proto.msp.mnt.BatchProg.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 meth = 2;
 * @return {number}
 */
proto.msp.mnt.BatchProg.prototype.getMeth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BatchProg} returns this
 */
proto.msp.mnt.BatchProg.prototype.setMeth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 progress = 3;
 * @return {number}
 */
proto.msp.mnt.BatchProg.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BatchProg} returns this
 */
proto.msp.mnt.BatchProg.prototype.setProgress = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PackageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PackageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PackageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PackageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detail: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PackageInfo}
 */
proto.msp.mnt.PackageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PackageInfo;
  return proto.msp.mnt.PackageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PackageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PackageInfo}
 */
proto.msp.mnt.PackageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PackageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PackageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PackageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PackageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.PackageInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PackageInfo} returns this
 */
proto.msp.mnt.PackageInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.msp.mnt.PackageInfo.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PackageInfo} returns this
 */
proto.msp.mnt.PackageInfo.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string detail = 3;
 * @return {string}
 */
proto.msp.mnt.PackageInfo.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PackageInfo} returns this
 */
proto.msp.mnt.PackageInfo.prototype.setDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Advanced.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Advanced.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Advanced} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Advanced.toObject = function(includeInstance, msg) {
  var f, obj = {
    front: jspb.Message.getFieldWithDefault(msg, 1, 0),
    back: jspb.Message.getFieldWithDefault(msg, 2, 0),
    syncwidth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    syncpolar: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Advanced}
 */
proto.msp.mnt.Advanced.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Advanced;
  return proto.msp.mnt.Advanced.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Advanced} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Advanced}
 */
proto.msp.mnt.Advanced.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFront(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBack(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSyncwidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSyncpolar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Advanced.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Advanced.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Advanced} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Advanced.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFront();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBack();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSyncwidth();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getSyncpolar();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 front = 1;
 * @return {number}
 */
proto.msp.mnt.Advanced.prototype.getFront = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Advanced} returns this
 */
proto.msp.mnt.Advanced.prototype.setFront = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 back = 2;
 * @return {number}
 */
proto.msp.mnt.Advanced.prototype.getBack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Advanced} returns this
 */
proto.msp.mnt.Advanced.prototype.setBack = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 syncwidth = 3;
 * @return {number}
 */
proto.msp.mnt.Advanced.prototype.getSyncwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Advanced} returns this
 */
proto.msp.mnt.Advanced.prototype.setSyncwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 syncpolar = 4;
 * @return {number}
 */
proto.msp.mnt.Advanced.prototype.getSyncpolar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Advanced} returns this
 */
proto.msp.mnt.Advanced.prototype.setSyncpolar = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmTv.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmTv.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmTv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmTv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmTv.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    arrayinList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmTv}
 */
proto.msp.mnt.KvmTv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmTv;
  return proto.msp.mnt.KvmTv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmTv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmTv}
 */
proto.msp.mnt.KvmTv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOutid(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setArrayinList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmTv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmTv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmTv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmTv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getOutid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getArrayinList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.KvmTv.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmTv} returns this
 */
proto.msp.mnt.KvmTv.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 outid = 2;
 * @return {number}
 */
proto.msp.mnt.KvmTv.prototype.getOutid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmTv} returns this
 */
proto.msp.mnt.KvmTv.prototype.setOutid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated fixed32 arrayin = 3;
 * @return {!Array<number>}
 */
proto.msp.mnt.KvmTv.prototype.getArrayinList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.KvmTv} returns this
 */
proto.msp.mnt.KvmTv.prototype.setArrayinList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmTv} returns this
 */
proto.msp.mnt.KvmTv.prototype.addArrayin = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmTv} returns this
 */
proto.msp.mnt.KvmTv.prototype.clearArrayinList = function() {
  return this.setArrayinList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmInfo.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    row: jspb.Message.getFieldWithDefault(msg, 3, 0),
    col: jspb.Message.getFieldWithDefault(msg, 4, 0),
    module: jspb.Message.getFieldWithDefault(msg, 5, 0),
    menu: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    arraytvList: jspb.Message.toObjectList(msg.getArraytvList(),
    proto.msp.mnt.KvmTv.toObject, includeInstance),
    arraysrcList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmInfo}
 */
proto.msp.mnt.KvmInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmInfo;
  return proto.msp.mnt.KvmInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmInfo}
 */
proto.msp.mnt.KvmInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCol(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMenu(value);
      break;
    case 7:
      var value = new proto.msp.mnt.KvmTv;
      reader.readMessage(value,proto.msp.mnt.KvmTv.deserializeBinaryFromReader);
      msg.addArraytv(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setArraysrcList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getRow();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getMenu();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getArraytvList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.msp.mnt.KvmTv.serializeBinaryToWriter
    );
  }
  f = message.getArraysrcList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.KvmInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.KvmInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 row = 3;
 * @return {number}
 */
proto.msp.mnt.KvmInfo.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 col = 4;
 * @return {number}
 */
proto.msp.mnt.KvmInfo.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setCol = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 module = 5;
 * @return {number}
 */
proto.msp.mnt.KvmInfo.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool menu = 6;
 * @return {boolean}
 */
proto.msp.mnt.KvmInfo.prototype.getMenu = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setMenu = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated KvmTv arraytv = 7;
 * @return {!Array<!proto.msp.mnt.KvmTv>}
 */
proto.msp.mnt.KvmInfo.prototype.getArraytvList = function() {
  return /** @type{!Array<!proto.msp.mnt.KvmTv>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.KvmTv, 7));
};


/**
 * @param {!Array<!proto.msp.mnt.KvmTv>} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
*/
proto.msp.mnt.KvmInfo.prototype.setArraytvList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.msp.mnt.KvmTv=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmTv}
 */
proto.msp.mnt.KvmInfo.prototype.addArraytv = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.msp.mnt.KvmTv, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.clearArraytvList = function() {
  return this.setArraytvList([]);
};


/**
 * repeated fixed32 arraysrc = 8;
 * @return {!Array<number>}
 */
proto.msp.mnt.KvmInfo.prototype.getArraysrcList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.setArraysrcList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.addArraysrc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmInfo} returns this
 */
proto.msp.mnt.KvmInfo.prototype.clearArraysrcList = function() {
  return this.setArraysrcList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvminfoList: jspb.Message.toObjectList(msg.getKvminfoList(),
    proto.msp.mnt.KvmInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmInfoList}
 */
proto.msp.mnt.KvmInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmInfoList;
  return proto.msp.mnt.KvmInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmInfoList}
 */
proto.msp.mnt.KvmInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.KvmInfo;
      reader.readMessage(value,proto.msp.mnt.KvmInfo.deserializeBinaryFromReader);
      msg.addKvminfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKvminfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.KvmInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KvmInfo kvminfo = 1;
 * @return {!Array<!proto.msp.mnt.KvmInfo>}
 */
proto.msp.mnt.KvmInfoList.prototype.getKvminfoList = function() {
  return /** @type{!Array<!proto.msp.mnt.KvmInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.KvmInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.KvmInfo>} value
 * @return {!proto.msp.mnt.KvmInfoList} returns this
*/
proto.msp.mnt.KvmInfoList.prototype.setKvminfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.KvmInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmInfo}
 */
proto.msp.mnt.KvmInfoList.prototype.addKvminfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.KvmInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmInfoList} returns this
 */
proto.msp.mnt.KvmInfoList.prototype.clearKvminfoList = function() {
  return this.setKvminfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.MonitorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.MonitorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.MonitorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MonitorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    module: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scantype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    height: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fresh: jspb.Message.getFieldWithDefault(msg, 7, 0),
    advhor: (f = msg.getAdvhor()) && proto.msp.mnt.Advanced.toObject(includeInstance, f),
    advver: (f = msg.getAdvver()) && proto.msp.mnt.Advanced.toObject(includeInstance, f),
    flag: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.MonitorInfo}
 */
proto.msp.mnt.MonitorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.MonitorInfo;
  return proto.msp.mnt.MonitorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.MonitorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.MonitorInfo}
 */
proto.msp.mnt.MonitorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setScantype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFresh(value);
      break;
    case 8:
      var value = new proto.msp.mnt.Advanced;
      reader.readMessage(value,proto.msp.mnt.Advanced.deserializeBinaryFromReader);
      msg.setAdvhor(value);
      break;
    case 9:
      var value = new proto.msp.mnt.Advanced;
      reader.readMessage(value,proto.msp.mnt.Advanced.deserializeBinaryFromReader);
      msg.setAdvver(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.MonitorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.MonitorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.MonitorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MonitorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getScantype();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getFresh();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getAdvhor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msp.mnt.Advanced.serializeBinaryToWriter
    );
  }
  f = message.getAdvver();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.msp.mnt.Advanced.serializeBinaryToWriter
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
};


/**
 * optional fixed32 tvid = 1;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 module = 3;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 scantype = 4;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getScantype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setScantype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 width = 5;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 height = 6;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 fresh = 7;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getFresh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setFresh = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Advanced advhor = 8;
 * @return {?proto.msp.mnt.Advanced}
 */
proto.msp.mnt.MonitorInfo.prototype.getAdvhor = function() {
  return /** @type{?proto.msp.mnt.Advanced} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Advanced, 8));
};


/**
 * @param {?proto.msp.mnt.Advanced|undefined} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
*/
proto.msp.mnt.MonitorInfo.prototype.setAdvhor = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.clearAdvhor = function() {
  return this.setAdvhor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.MonitorInfo.prototype.hasAdvhor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Advanced advver = 9;
 * @return {?proto.msp.mnt.Advanced}
 */
proto.msp.mnt.MonitorInfo.prototype.getAdvver = function() {
  return /** @type{?proto.msp.mnt.Advanced} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Advanced, 9));
};


/**
 * @param {?proto.msp.mnt.Advanced|undefined} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
*/
proto.msp.mnt.MonitorInfo.prototype.setAdvver = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.clearAdvver = function() {
  return this.setAdvver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.MonitorInfo.prototype.hasAdvver = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional fixed32 flag = 10;
 * @return {number}
 */
proto.msp.mnt.MonitorInfo.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MonitorInfo} returns this
 */
proto.msp.mnt.MonitorInfo.prototype.setFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmPush.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmPush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmPush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmPush.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmPush}
 */
proto.msp.mnt.KvmPush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmPush;
  return proto.msp.mnt.KvmPush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmPush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmPush}
 */
proto.msp.mnt.KvmPush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSubid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmPush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmPush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmPush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmPush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getSubid();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 startx = 2;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 starty = 3;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 width = 4;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 height = 5;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 subid = 6;
 * @return {number}
 */
proto.msp.mnt.KvmPush.prototype.getSubid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmPush} returns this
 */
proto.msp.mnt.KvmPush.prototype.setSubid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PushCfg.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PushCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PushCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PushCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PushCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dstidList: jspb.Message.toObjectList(msg.getDstidList(),
    proto.msp.mnt.KvmPush.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PushCfg}
 */
proto.msp.mnt.PushCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PushCfg;
  return proto.msp.mnt.PushCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PushCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PushCfg}
 */
proto.msp.mnt.PushCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.msp.mnt.KvmPush;
      reader.readMessage(value,proto.msp.mnt.KvmPush.deserializeBinaryFromReader);
      msg.addDstid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PushCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PushCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PushCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PushCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getDstidList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msp.mnt.KvmPush.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.PushCfg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PushCfg} returns this
 */
proto.msp.mnt.PushCfg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.mnt.PushCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PushCfg} returns this
 */
proto.msp.mnt.PushCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated KvmPush dstid = 3;
 * @return {!Array<!proto.msp.mnt.KvmPush>}
 */
proto.msp.mnt.PushCfg.prototype.getDstidList = function() {
  return /** @type{!Array<!proto.msp.mnt.KvmPush>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.KvmPush, 3));
};


/**
 * @param {!Array<!proto.msp.mnt.KvmPush>} value
 * @return {!proto.msp.mnt.PushCfg} returns this
*/
proto.msp.mnt.PushCfg.prototype.setDstidList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.mnt.KvmPush=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmPush}
 */
proto.msp.mnt.PushCfg.prototype.addDstid = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.mnt.KvmPush, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PushCfg} returns this
 */
proto.msp.mnt.PushCfg.prototype.clearDstidList = function() {
  return this.setDstidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    memnum: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmGroup}
 */
proto.msp.mnt.KvmGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmGroup;
  return proto.msp.mnt.KvmGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmGroup}
 */
proto.msp.mnt.KvmGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMemnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getParentid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMemnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.KvmGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmGroup} returns this
 */
proto.msp.mnt.KvmGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 parentid = 2;
 * @return {number}
 */
proto.msp.mnt.KvmGroup.prototype.getParentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmGroup} returns this
 */
proto.msp.mnt.KvmGroup.prototype.setParentid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.KvmGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.KvmGroup} returns this
 */
proto.msp.mnt.KvmGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 memnum = 4;
 * @return {number}
 */
proto.msp.mnt.KvmGroup.prototype.getMemnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmGroup} returns this
 */
proto.msp.mnt.KvmGroup.prototype.setMemnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvmgroupList: jspb.Message.toObjectList(msg.getKvmgroupList(),
    proto.msp.mnt.KvmGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmGroupList}
 */
proto.msp.mnt.KvmGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmGroupList;
  return proto.msp.mnt.KvmGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmGroupList}
 */
proto.msp.mnt.KvmGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.KvmGroup;
      reader.readMessage(value,proto.msp.mnt.KvmGroup.deserializeBinaryFromReader);
      msg.addKvmgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKvmgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.KvmGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KvmGroup kvmgroup = 1;
 * @return {!Array<!proto.msp.mnt.KvmGroup>}
 */
proto.msp.mnt.KvmGroupList.prototype.getKvmgroupList = function() {
  return /** @type{!Array<!proto.msp.mnt.KvmGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.KvmGroup, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.KvmGroup>} value
 * @return {!proto.msp.mnt.KvmGroupList} returns this
*/
proto.msp.mnt.KvmGroupList.prototype.setKvmgroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.KvmGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmGroup}
 */
proto.msp.mnt.KvmGroupList.prototype.addKvmgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.KvmGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmGroupList} returns this
 */
proto.msp.mnt.KvmGroupList.prototype.clearKvmgroupList = function() {
  return this.setKvmgroupList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmGroupInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmGroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmGroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmGroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberList: jspb.Message.toObjectList(msg.getMemberList(),
    proto.msp.mnt.ValueU32.toObject, includeInstance),
    group: (f = msg.getGroup()) && proto.msp.mnt.KvmGroup.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmGroupInfo}
 */
proto.msp.mnt.KvmGroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmGroupInfo;
  return proto.msp.mnt.KvmGroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmGroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmGroupInfo}
 */
proto.msp.mnt.KvmGroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ValueU32;
      reader.readMessage(value,proto.msp.mnt.ValueU32.deserializeBinaryFromReader);
      msg.addMember(value);
      break;
    case 2:
      var value = new proto.msp.mnt.KvmGroup;
      reader.readMessage(value,proto.msp.mnt.KvmGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmGroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmGroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmGroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmGroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.ValueU32.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.KvmGroup.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * repeated ValueU32 member = 1;
 * @return {!Array<!proto.msp.mnt.ValueU32>}
 */
proto.msp.mnt.KvmGroupInfo.prototype.getMemberList = function() {
  return /** @type{!Array<!proto.msp.mnt.ValueU32>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.ValueU32, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.ValueU32>} value
 * @return {!proto.msp.mnt.KvmGroupInfo} returns this
*/
proto.msp.mnt.KvmGroupInfo.prototype.setMemberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.ValueU32=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.KvmGroupInfo.prototype.addMember = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.ValueU32, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmGroupInfo} returns this
 */
proto.msp.mnt.KvmGroupInfo.prototype.clearMemberList = function() {
  return this.setMemberList([]);
};


/**
 * optional KvmGroup group = 2;
 * @return {?proto.msp.mnt.KvmGroup}
 */
proto.msp.mnt.KvmGroupInfo.prototype.getGroup = function() {
  return /** @type{?proto.msp.mnt.KvmGroup} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.KvmGroup, 2));
};


/**
 * @param {?proto.msp.mnt.KvmGroup|undefined} value
 * @return {!proto.msp.mnt.KvmGroupInfo} returns this
*/
proto.msp.mnt.KvmGroupInfo.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.KvmGroupInfo} returns this
 */
proto.msp.mnt.KvmGroupInfo.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.KvmGroupInfo.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed32 id = 3;
 * @return {number}
 */
proto.msp.mnt.KvmGroupInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmGroupInfo} returns this
 */
proto.msp.mnt.KvmGroupInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FileParam.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FileParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FileParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    datatype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FileParam}
 */
proto.msp.mnt.FileParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FileParam;
  return proto.msp.mnt.FileParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FileParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FileParam}
 */
proto.msp.mnt.FileParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDatatype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FileParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FileParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FileParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getDatatype();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 width = 1;
 * @return {number}
 */
proto.msp.mnt.FileParam.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileParam} returns this
 */
proto.msp.mnt.FileParam.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 height = 2;
 * @return {number}
 */
proto.msp.mnt.FileParam.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileParam} returns this
 */
proto.msp.mnt.FileParam.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 datatype = 3;
 * @return {number}
 */
proto.msp.mnt.FileParam.prototype.getDatatype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileParam} returns this
 */
proto.msp.mnt.FileParam.prototype.setDatatype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.msp.mnt.FileParam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileParam} returns this
 */
proto.msp.mnt.FileParam.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional fixed32 size = 5;
 * @return {number}
 */
proto.msp.mnt.FileParam.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileParam} returns this
 */
proto.msp.mnt.FileParam.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmFile.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmFile.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    curnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0),
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.msp.mnt.FileParam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmFile}
 */
proto.msp.mnt.KvmFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmFile;
  return proto.msp.mnt.KvmFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmFile}
 */
proto.msp.mnt.KvmFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCurnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTotal(value);
      break;
    case 5:
      var value = new proto.msp.mnt.FileParam;
      reader.readMessage(value,proto.msp.mnt.FileParam.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getCurnum();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.msp.mnt.FileParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 type = 1;
 * @return {number}
 */
proto.msp.mnt.KvmFile.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFile} returns this
 */
proto.msp.mnt.KvmFile.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 curnum = 2;
 * @return {number}
 */
proto.msp.mnt.KvmFile.prototype.getCurnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFile} returns this
 */
proto.msp.mnt.KvmFile.prototype.setCurnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 offset = 3;
 * @return {number}
 */
proto.msp.mnt.KvmFile.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFile} returns this
 */
proto.msp.mnt.KvmFile.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 total = 4;
 * @return {number}
 */
proto.msp.mnt.KvmFile.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFile} returns this
 */
proto.msp.mnt.KvmFile.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated FileParam param = 5;
 * @return {!Array<!proto.msp.mnt.FileParam>}
 */
proto.msp.mnt.KvmFile.prototype.getParamList = function() {
  return /** @type{!Array<!proto.msp.mnt.FileParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.FileParam, 5));
};


/**
 * @param {!Array<!proto.msp.mnt.FileParam>} value
 * @return {!proto.msp.mnt.KvmFile} returns this
*/
proto.msp.mnt.KvmFile.prototype.setParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msp.mnt.FileParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.FileParam}
 */
proto.msp.mnt.KvmFile.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msp.mnt.FileParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmFile} returns this
 */
proto.msp.mnt.KvmFile.prototype.clearParamList = function() {
  return this.setParamList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmFileNotify.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmFileNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmFileNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmFileNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmFileNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kvmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    idList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmFileNotify}
 */
proto.msp.mnt.KvmFileNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmFileNotify;
  return proto.msp.mnt.KvmFileNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmFileNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmFileNotify}
 */
proto.msp.mnt.KvmFileNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setKvmnum(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmFileNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmFileNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmFileNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmFileNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getKvmnum();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getIdList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 num = 1;
 * @return {number}
 */
proto.msp.mnt.KvmFileNotify.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFileNotify} returns this
 */
proto.msp.mnt.KvmFileNotify.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 kvmnum = 2;
 * @return {number}
 */
proto.msp.mnt.KvmFileNotify.prototype.getKvmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmFileNotify} returns this
 */
proto.msp.mnt.KvmFileNotify.prototype.setKvmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated fixed32 id = 3;
 * @return {!Array<number>}
 */
proto.msp.mnt.KvmFileNotify.prototype.getIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.KvmFileNotify} returns this
 */
proto.msp.mnt.KvmFileNotify.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmFileNotify} returns this
 */
proto.msp.mnt.KvmFileNotify.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmFileNotify} returns this
 */
proto.msp.mnt.KvmFileNotify.prototype.clearIdList = function() {
  return this.setIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmCfgState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmCfgState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmCfgState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmCfgState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kvm: (f = msg.getKvm()) && proto.msp.mnt.KvmInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmCfgState}
 */
proto.msp.mnt.KvmCfgState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmCfgState;
  return proto.msp.mnt.KvmCfgState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmCfgState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmCfgState}
 */
proto.msp.mnt.KvmCfgState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.mnt.KvmInfo;
      reader.readMessage(value,proto.msp.mnt.KvmInfo.deserializeBinaryFromReader);
      msg.setKvm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmCfgState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmCfgState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmCfgState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmCfgState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getKvm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.KvmInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 state = 1;
 * @return {number}
 */
proto.msp.mnt.KvmCfgState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmCfgState} returns this
 */
proto.msp.mnt.KvmCfgState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional KvmInfo kvm = 2;
 * @return {?proto.msp.mnt.KvmInfo}
 */
proto.msp.mnt.KvmCfgState.prototype.getKvm = function() {
  return /** @type{?proto.msp.mnt.KvmInfo} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.KvmInfo, 2));
};


/**
 * @param {?proto.msp.mnt.KvmInfo|undefined} value
 * @return {!proto.msp.mnt.KvmCfgState} returns this
*/
proto.msp.mnt.KvmCfgState.prototype.setKvm = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.KvmCfgState} returns this
 */
proto.msp.mnt.KvmCfgState.prototype.clearKvm = function() {
  return this.setKvm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.KvmCfgState.prototype.hasKvm = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dstip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    keylink: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    localkey: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    trslink: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    check: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmState}
 */
proto.msp.mnt.KvmState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmState;
  return proto.msp.mnt.KvmState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmState}
 */
proto.msp.mnt.KvmState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstip(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeylink(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocalkey(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrslink(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheck(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDstip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getKeylink();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLocalkey();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTrslink();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCheck();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.KvmState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.msp.mnt.KvmState.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dstip = 3;
 * @return {string}
 */
proto.msp.mnt.KvmState.prototype.getDstip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setDstip = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool online = 4;
 * @return {boolean}
 */
proto.msp.mnt.KvmState.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool keylink = 5;
 * @return {boolean}
 */
proto.msp.mnt.KvmState.prototype.getKeylink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setKeylink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool localkey = 6;
 * @return {boolean}
 */
proto.msp.mnt.KvmState.prototype.getLocalkey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setLocalkey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool trslink = 7;
 * @return {boolean}
 */
proto.msp.mnt.KvmState.prototype.getTrslink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setTrslink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool check = 8;
 * @return {boolean}
 */
proto.msp.mnt.KvmState.prototype.getCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setCheck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional fixed32 type = 9;
 * @return {number}
 */
proto.msp.mnt.KvmState.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.KvmState} returns this
 */
proto.msp.mnt.KvmState.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.KvmStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.KvmStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.KvmStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.KvmStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvmstateList: jspb.Message.toObjectList(msg.getKvmstateList(),
    proto.msp.mnt.KvmState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.KvmStateList}
 */
proto.msp.mnt.KvmStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.KvmStateList;
  return proto.msp.mnt.KvmStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.KvmStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.KvmStateList}
 */
proto.msp.mnt.KvmStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.KvmState;
      reader.readMessage(value,proto.msp.mnt.KvmState.deserializeBinaryFromReader);
      msg.addKvmstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.KvmStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.KvmStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.KvmStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.KvmStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKvmstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.KvmState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KvmState kvmstate = 1;
 * @return {!Array<!proto.msp.mnt.KvmState>}
 */
proto.msp.mnt.KvmStateList.prototype.getKvmstateList = function() {
  return /** @type{!Array<!proto.msp.mnt.KvmState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.KvmState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.KvmState>} value
 * @return {!proto.msp.mnt.KvmStateList} returns this
*/
proto.msp.mnt.KvmStateList.prototype.setKvmstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.KvmState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.KvmState}
 */
proto.msp.mnt.KvmStateList.prototype.addKvmstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.KvmState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.KvmStateList} returns this
 */
proto.msp.mnt.KvmStateList.prototype.clearKvmstateList = function() {
  return this.setKvmstateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PowerPrm.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PowerPrm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PowerPrm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PowerPrm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PowerPrm.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chnidList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    ip: jspb.Message.getFieldWithDefault(msg, 4, ""),
    on: jspb.Message.getFieldWithDefault(msg, 5, ""),
    off: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mac: jspb.Message.getFieldWithDefault(msg, 7, ""),
    slot: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PowerPrm}
 */
proto.msp.mnt.PowerPrm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PowerPrm;
  return proto.msp.mnt.PowerPrm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PowerPrm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PowerPrm}
 */
proto.msp.mnt.PowerPrm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setChnidList(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOn(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOff(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PowerPrm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PowerPrm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PowerPrm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PowerPrm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getChnidList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      3,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOff();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
};


/**
 * optional fixed32 protocol = 1;
 * @return {number}
 */
proto.msp.mnt.PowerPrm.prototype.getProtocol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 mode = 2;
 * @return {number}
 */
proto.msp.mnt.PowerPrm.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated fixed32 chnid = 3;
 * @return {!Array<number>}
 */
proto.msp.mnt.PowerPrm.prototype.getChnidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setChnidList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.addChnid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.clearChnidList = function() {
  return this.setChnidList([]);
};


/**
 * optional string ip = 4;
 * @return {string}
 */
proto.msp.mnt.PowerPrm.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string on = 5;
 * @return {string}
 */
proto.msp.mnt.PowerPrm.prototype.getOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setOn = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string off = 6;
 * @return {string}
 */
proto.msp.mnt.PowerPrm.prototype.getOff = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setOff = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mac = 7;
 * @return {string}
 */
proto.msp.mnt.PowerPrm.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional fixed32 slot = 8;
 * @return {number}
 */
proto.msp.mnt.PowerPrm.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PowerPrm} returns this
 */
proto.msp.mnt.PowerPrm.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.ChnList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.ChnList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.ChnList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.ChnList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnidList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.ChnList}
 */
proto.msp.mnt.ChnList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.ChnList;
  return proto.msp.mnt.ChnList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.ChnList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.ChnList}
 */
proto.msp.mnt.ChnList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setChnidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.ChnList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.ChnList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.ChnList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.ChnList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnidList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      1,
      f
    );
  }
};


/**
 * repeated fixed32 chnid = 1;
 * @return {!Array<number>}
 */
proto.msp.mnt.ChnList.prototype.getChnidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.ChnList} returns this
 */
proto.msp.mnt.ChnList.prototype.setChnidList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.ChnList} returns this
 */
proto.msp.mnt.ChnList.prototype.addChnid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.ChnList} returns this
 */
proto.msp.mnt.ChnList.prototype.clearChnidList = function() {
  return this.setChnidList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PowerPrms.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PowerPrms.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PowerPrms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PowerPrms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PowerPrms.toObject = function(includeInstance, msg) {
  var f, obj = {
    powerprmList: jspb.Message.toObjectList(msg.getPowerprmList(),
    proto.msp.mnt.PowerPrm.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PowerPrms}
 */
proto.msp.mnt.PowerPrms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PowerPrms;
  return proto.msp.mnt.PowerPrms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PowerPrms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PowerPrms}
 */
proto.msp.mnt.PowerPrms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PowerPrm;
      reader.readMessage(value,proto.msp.mnt.PowerPrm.deserializeBinaryFromReader);
      msg.addPowerprm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PowerPrms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PowerPrms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PowerPrms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PowerPrms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPowerprmList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PowerPrm.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PowerPrm powerprm = 1;
 * @return {!Array<!proto.msp.mnt.PowerPrm>}
 */
proto.msp.mnt.PowerPrms.prototype.getPowerprmList = function() {
  return /** @type{!Array<!proto.msp.mnt.PowerPrm>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PowerPrm, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PowerPrm>} value
 * @return {!proto.msp.mnt.PowerPrms} returns this
*/
proto.msp.mnt.PowerPrms.prototype.setPowerprmList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PowerPrm=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PowerPrm}
 */
proto.msp.mnt.PowerPrms.prototype.addPowerprm = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PowerPrm, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PowerPrms} returns this
 */
proto.msp.mnt.PowerPrms.prototype.clearPowerprmList = function() {
  return this.setPowerprmList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PcInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PcInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PcInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cnntmode: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PcInfo}
 */
proto.msp.mnt.PcInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PcInfo;
  return proto.msp.mnt.PcInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PcInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PcInfo}
 */
proto.msp.mnt.PcInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCnntmode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PcInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PcInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PcInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getCnntmode();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.PcInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcInfo} returns this
 */
proto.msp.mnt.PcInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.PcInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PcInfo} returns this
 */
proto.msp.mnt.PcInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.msp.mnt.PcInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PcInfo} returns this
 */
proto.msp.mnt.PcInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 port = 4;
 * @return {number}
 */
proto.msp.mnt.PcInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcInfo} returns this
 */
proto.msp.mnt.PcInfo.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 cnntmode = 5;
 * @return {number}
 */
proto.msp.mnt.PcInfo.prototype.getCnntmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcInfo} returns this
 */
proto.msp.mnt.PcInfo.prototype.setCnntmode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PcInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PcInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PcInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PcInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    pcinfoList: jspb.Message.toObjectList(msg.getPcinfoList(),
    proto.msp.mnt.PcInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PcInfoList}
 */
proto.msp.mnt.PcInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PcInfoList;
  return proto.msp.mnt.PcInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PcInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PcInfoList}
 */
proto.msp.mnt.PcInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PcInfo;
      reader.readMessage(value,proto.msp.mnt.PcInfo.deserializeBinaryFromReader);
      msg.addPcinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PcInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PcInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PcInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PcInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PcInfo pcinfo = 1;
 * @return {!Array<!proto.msp.mnt.PcInfo>}
 */
proto.msp.mnt.PcInfoList.prototype.getPcinfoList = function() {
  return /** @type{!Array<!proto.msp.mnt.PcInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PcInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PcInfo>} value
 * @return {!proto.msp.mnt.PcInfoList} returns this
*/
proto.msp.mnt.PcInfoList.prototype.setPcinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PcInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PcInfo}
 */
proto.msp.mnt.PcInfoList.prototype.addPcinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PcInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PcInfoList} returns this
 */
proto.msp.mnt.PcInfoList.prototype.clearPcinfoList = function() {
  return this.setPcinfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PcList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PcList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PcList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PcList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcList.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PcList}
 */
proto.msp.mnt.PcList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PcList;
  return proto.msp.mnt.PcList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PcList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PcList}
 */
proto.msp.mnt.PcList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PcList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PcList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PcList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      1,
      f
    );
  }
};


/**
 * repeated fixed32 id = 1;
 * @return {!Array<number>}
 */
proto.msp.mnt.PcList.prototype.getIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.PcList} returns this
 */
proto.msp.mnt.PcList.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PcList} returns this
 */
proto.msp.mnt.PcList.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PcList} returns this
 */
proto.msp.mnt.PcList.prototype.clearIdList = function() {
  return this.setIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Scheme.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Scheme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Scheme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Scheme.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wndnum: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Scheme}
 */
proto.msp.mnt.Scheme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Scheme;
  return proto.msp.mnt.Scheme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Scheme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Scheme}
 */
proto.msp.mnt.Scheme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWndnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Scheme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Scheme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Scheme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Scheme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getWndnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.Scheme.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Scheme} returns this
 */
proto.msp.mnt.Scheme.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.Scheme.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Scheme} returns this
 */
proto.msp.mnt.Scheme.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.mnt.Scheme.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Scheme} returns this
 */
proto.msp.mnt.Scheme.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 wndnum = 4;
 * @return {number}
 */
proto.msp.mnt.Scheme.prototype.getWndnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Scheme} returns this
 */
proto.msp.mnt.Scheme.prototype.setWndnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Schemes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Schemes.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Schemes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Schemes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Schemes.toObject = function(includeInstance, msg) {
  var f, obj = {
    isend: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    schemeList: jspb.Message.toObjectList(msg.getSchemeList(),
    proto.msp.mnt.Scheme.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Schemes}
 */
proto.msp.mnt.Schemes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Schemes;
  return proto.msp.mnt.Schemes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Schemes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Schemes}
 */
proto.msp.mnt.Schemes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsend(value);
      break;
    case 2:
      var value = new proto.msp.mnt.Scheme;
      reader.readMessage(value,proto.msp.mnt.Scheme.deserializeBinaryFromReader);
      msg.addScheme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Schemes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Schemes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Schemes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Schemes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsend();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSchemeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.Scheme.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isend = 1;
 * @return {boolean}
 */
proto.msp.mnt.Schemes.prototype.getIsend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.Schemes} returns this
 */
proto.msp.mnt.Schemes.prototype.setIsend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Scheme scheme = 2;
 * @return {!Array<!proto.msp.mnt.Scheme>}
 */
proto.msp.mnt.Schemes.prototype.getSchemeList = function() {
  return /** @type{!Array<!proto.msp.mnt.Scheme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Scheme, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.Scheme>} value
 * @return {!proto.msp.mnt.Schemes} returns this
*/
proto.msp.mnt.Schemes.prototype.setSchemeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.Scheme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Scheme}
 */
proto.msp.mnt.Schemes.prototype.addScheme = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.Scheme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Schemes} returns this
 */
proto.msp.mnt.Schemes.prototype.clearSchemeList = function() {
  return this.setSchemeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Tswid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Tswid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Tswid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Tswid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sceneid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Tswid}
 */
proto.msp.mnt.Tswid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Tswid;
  return proto.msp.mnt.Tswid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Tswid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Tswid}
 */
proto.msp.mnt.Tswid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSceneid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Tswid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Tswid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Tswid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Tswid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Tswid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Tswid} returns this
 */
proto.msp.mnt.Tswid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 sceneid = 2;
 * @return {number}
 */
proto.msp.mnt.Tswid.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Tswid} returns this
 */
proto.msp.mnt.Tswid.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.mnt.Tswid.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Tswid} returns this
 */
proto.msp.mnt.Tswid.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PollPrm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PollPrm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PollPrm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollPrm.toObject = function(includeInstance, msg) {
  var f, obj = {
    keep: jspb.Message.getFieldWithDefault(msg, 1, 0),
    issame: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    interval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    beid: (f = msg.getBeid()) && proto.msp.mnt.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PollPrm}
 */
proto.msp.mnt.PollPrm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PollPrm;
  return proto.msp.mnt.PollPrm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PollPrm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PollPrm}
 */
proto.msp.mnt.PollPrm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setKeep(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setInterval(value);
      break;
    case 4:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PollPrm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PollPrm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PollPrm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollPrm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeep();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getIssame();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 keep = 1;
 * @return {number}
 */
proto.msp.mnt.PollPrm.prototype.getKeep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollPrm} returns this
 */
proto.msp.mnt.PollPrm.prototype.setKeep = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool issame = 2;
 * @return {boolean}
 */
proto.msp.mnt.PollPrm.prototype.getIssame = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.PollPrm} returns this
 */
proto.msp.mnt.PollPrm.prototype.setIssame = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 interval = 3;
 * @return {number}
 */
proto.msp.mnt.PollPrm.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollPrm} returns this
 */
proto.msp.mnt.PollPrm.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Tswid beid = 4;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.PollPrm.prototype.getBeid = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 4));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.PollPrm} returns this
*/
proto.msp.mnt.PollPrm.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.PollPrm} returns this
 */
proto.msp.mnt.PollPrm.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.PollPrm.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Poll.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Poll.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Poll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Poll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Poll.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollmemList: jspb.Message.toObjectList(msg.getPollmemList(),
    proto.msp.mnt.PollMem.toObject, includeInstance),
    param: (f = msg.getParam()) && proto.msp.mnt.PollPrm.toObject(includeInstance, f),
    beid: (f = msg.getBeid()) && proto.msp.mnt.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Poll}
 */
proto.msp.mnt.Poll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Poll;
  return proto.msp.mnt.Poll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Poll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Poll}
 */
proto.msp.mnt.Poll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PollMem;
      reader.readMessage(value,proto.msp.mnt.PollMem.deserializeBinaryFromReader);
      msg.addPollmem(value);
      break;
    case 2:
      var value = new proto.msp.mnt.PollPrm;
      reader.readMessage(value,proto.msp.mnt.PollPrm.deserializeBinaryFromReader);
      msg.setParam(value);
      break;
    case 3:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Poll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Poll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Poll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Poll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollmemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PollMem.serializeBinaryToWriter
    );
  }
  f = message.getParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.PollPrm.serializeBinaryToWriter
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollMem pollmem = 1;
 * @return {!Array<!proto.msp.mnt.PollMem>}
 */
proto.msp.mnt.Poll.prototype.getPollmemList = function() {
  return /** @type{!Array<!proto.msp.mnt.PollMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PollMem, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PollMem>} value
 * @return {!proto.msp.mnt.Poll} returns this
*/
proto.msp.mnt.Poll.prototype.setPollmemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PollMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PollMem}
 */
proto.msp.mnt.Poll.prototype.addPollmem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PollMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Poll} returns this
 */
proto.msp.mnt.Poll.prototype.clearPollmemList = function() {
  return this.setPollmemList([]);
};


/**
 * optional PollPrm param = 2;
 * @return {?proto.msp.mnt.PollPrm}
 */
proto.msp.mnt.Poll.prototype.getParam = function() {
  return /** @type{?proto.msp.mnt.PollPrm} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.PollPrm, 2));
};


/**
 * @param {?proto.msp.mnt.PollPrm|undefined} value
 * @return {!proto.msp.mnt.Poll} returns this
*/
proto.msp.mnt.Poll.prototype.setParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Poll} returns this
 */
proto.msp.mnt.Poll.prototype.clearParam = function() {
  return this.setParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Poll.prototype.hasParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tswid beid = 3;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.Poll.prototype.getBeid = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 3));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.Poll} returns this
*/
proto.msp.mnt.Poll.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Poll} returns this
 */
proto.msp.mnt.Poll.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Poll.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PollMem.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PollMem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PollMem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollMem.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PollMem}
 */
proto.msp.mnt.PollMem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PollMem;
  return proto.msp.mnt.PollMem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PollMem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PollMem}
 */
proto.msp.mnt.PollMem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PollMem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PollMem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PollMem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollMem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 interval = 1;
 * @return {number}
 */
proto.msp.mnt.PollMem.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollMem} returns this
 */
proto.msp.mnt.PollMem.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.PollMem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollMem} returns this
 */
proto.msp.mnt.PollMem.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.PollMem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PollMem} returns this
 */
proto.msp.mnt.PollMem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PollMems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PollMems.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PollMems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PollMems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollMems.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollmemList: jspb.Message.toObjectList(msg.getPollmemList(),
    proto.msp.mnt.PollMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PollMems}
 */
proto.msp.mnt.PollMems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PollMems;
  return proto.msp.mnt.PollMems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PollMems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PollMems}
 */
proto.msp.mnt.PollMems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PollMem;
      reader.readMessage(value,proto.msp.mnt.PollMem.deserializeBinaryFromReader);
      msg.addPollmem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PollMems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PollMems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PollMems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollMems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollmemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PollMem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollMem pollmem = 1;
 * @return {!Array<!proto.msp.mnt.PollMem>}
 */
proto.msp.mnt.PollMems.prototype.getPollmemList = function() {
  return /** @type{!Array<!proto.msp.mnt.PollMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PollMem, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PollMem>} value
 * @return {!proto.msp.mnt.PollMems} returns this
*/
proto.msp.mnt.PollMems.prototype.setPollmemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PollMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PollMem}
 */
proto.msp.mnt.PollMems.prototype.addPollmem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PollMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PollMems} returns this
 */
proto.msp.mnt.PollMems.prototype.clearPollmemList = function() {
  return this.setPollmemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.SchemeState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.SchemeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.SchemeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SchemeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.msp.mnt.ValueU32.toObject(includeInstance, f),
    scheme: (f = msg.getScheme()) && proto.msp.mnt.Scheme.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.SchemeState}
 */
proto.msp.mnt.SchemeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.SchemeState;
  return proto.msp.mnt.SchemeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.SchemeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.SchemeState}
 */
proto.msp.mnt.SchemeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ValueU32;
      reader.readMessage(value,proto.msp.mnt.ValueU32.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.mnt.Scheme;
      reader.readMessage(value,proto.msp.mnt.Scheme.deserializeBinaryFromReader);
      msg.setScheme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.SchemeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.SchemeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.SchemeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SchemeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.ValueU32.serializeBinaryToWriter
    );
  }
  f = message.getScheme();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.Scheme.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueU32 state = 1;
 * @return {?proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.SchemeState.prototype.getState = function() {
  return /** @type{?proto.msp.mnt.ValueU32} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.ValueU32, 1));
};


/**
 * @param {?proto.msp.mnt.ValueU32|undefined} value
 * @return {!proto.msp.mnt.SchemeState} returns this
*/
proto.msp.mnt.SchemeState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.SchemeState} returns this
 */
proto.msp.mnt.SchemeState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.SchemeState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scheme scheme = 2;
 * @return {?proto.msp.mnt.Scheme}
 */
proto.msp.mnt.SchemeState.prototype.getScheme = function() {
  return /** @type{?proto.msp.mnt.Scheme} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Scheme, 2));
};


/**
 * @param {?proto.msp.mnt.Scheme|undefined} value
 * @return {!proto.msp.mnt.SchemeState} returns this
*/
proto.msp.mnt.SchemeState.prototype.setScheme = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.SchemeState} returns this
 */
proto.msp.mnt.SchemeState.prototype.clearScheme = function() {
  return this.setScheme(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.SchemeState.prototype.hasScheme = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PollState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PollState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PollState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beid: (f = msg.getBeid()) && proto.msp.mnt.Tswid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PollState}
 */
proto.msp.mnt.PollState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PollState;
  return proto.msp.mnt.PollState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PollState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PollState}
 */
proto.msp.mnt.PollState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PollState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PollState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PollState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 state = 1;
 * @return {number}
 */
proto.msp.mnt.PollState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollState} returns this
 */
proto.msp.mnt.PollState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.PollState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PollState} returns this
 */
proto.msp.mnt.PollState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Tswid beid = 3;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.PollState.prototype.getBeid = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 3));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.PollState} returns this
*/
proto.msp.mnt.PollState.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.PollState} returns this
 */
proto.msp.mnt.PollState.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.PollState.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PollStates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PollStates.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PollStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PollStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    pollstateList: jspb.Message.toObjectList(msg.getPollstateList(),
    proto.msp.mnt.PollState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PollStates}
 */
proto.msp.mnt.PollStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PollStates;
  return proto.msp.mnt.PollStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PollStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PollStates}
 */
proto.msp.mnt.PollStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PollState;
      reader.readMessage(value,proto.msp.mnt.PollState.deserializeBinaryFromReader);
      msg.addPollstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PollStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PollStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PollStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PollStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPollstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PollState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PollState pollstate = 1;
 * @return {!Array<!proto.msp.mnt.PollState>}
 */
proto.msp.mnt.PollStates.prototype.getPollstateList = function() {
  return /** @type{!Array<!proto.msp.mnt.PollState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PollState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PollState>} value
 * @return {!proto.msp.mnt.PollStates} returns this
*/
proto.msp.mnt.PollStates.prototype.setPollstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PollState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PollState}
 */
proto.msp.mnt.PollStates.prototype.addPollstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PollState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PollStates} returns this
 */
proto.msp.mnt.PollStates.prototype.clearPollstateList = function() {
  return this.setPollstateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.FilterForm.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FilterForm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FilterForm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FilterForm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FilterForm.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ipList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FilterForm}
 */
proto.msp.mnt.FilterForm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FilterForm;
  return proto.msp.mnt.FilterForm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FilterForm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FilterForm}
 */
proto.msp.mnt.FilterForm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FilterForm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FilterForm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FilterForm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FilterForm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getIpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional fixed32 value = 1;
 * @return {number}
 */
proto.msp.mnt.FilterForm.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FilterForm} returns this
 */
proto.msp.mnt.FilterForm.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string ip = 2;
 * @return {!Array<string>}
 */
proto.msp.mnt.FilterForm.prototype.getIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msp.mnt.FilterForm} returns this
 */
proto.msp.mnt.FilterForm.prototype.setIpList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.FilterForm} returns this
 */
proto.msp.mnt.FilterForm.prototype.addIp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.FilterForm} returns this
 */
proto.msp.mnt.FilterForm.prototype.clearIpList = function() {
  return this.setIpList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    zone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    year: jspb.Message.getFieldWithDefault(msg, 2, 0),
    month: jspb.Message.getFieldWithDefault(msg, 3, 0),
    day: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hour: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    second: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Time}
 */
proto.msp.mnt.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Time;
  return proto.msp.mnt.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Time}
 */
proto.msp.mnt.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMonth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHour(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getHour();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
};


/**
 * optional string zone = 1;
 * @return {string}
 */
proto.msp.mnt.Time.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 year = 2;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 month = 3;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 day = 4;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 hour = 5;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 minute = 6;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setMinute = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 second = 7;
 * @return {number}
 */
proto.msp.mnt.Time.prototype.getSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Time} returns this
 */
proto.msp.mnt.Time.prototype.setSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.AccessCode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.AccessCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.AccessCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.AccessCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opt: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.AccessCode}
 */
proto.msp.mnt.AccessCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.AccessCode;
  return proto.msp.mnt.AccessCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.AccessCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.AccessCode}
 */
proto.msp.mnt.AccessCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.AccessCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.AccessCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.AccessCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.AccessCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpt();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.msp.mnt.AccessCode.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.AccessCode} returns this
 */
proto.msp.mnt.AccessCode.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool opt = 2;
 * @return {boolean}
 */
proto.msp.mnt.AccessCode.prototype.getOpt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.AccessCode} returns this
 */
proto.msp.mnt.AccessCode.prototype.setOpt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.SysLicence.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.SysLicence.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.SysLicence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.SysLicence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SysLicence.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    enccap: jspb.Message.getFieldWithDefault(msg, 6, 0),
    module: jspb.Message.getFieldWithDefault(msg, 7, 0),
    expdataList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.SysLicence}
 */
proto.msp.mnt.SysLicence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.SysLicence;
  return proto.msp.mnt.SysLicence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.SysLicence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.SysLicence}
 */
proto.msp.mnt.SysLicence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEnccap(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setExpdataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.SysLicence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.SysLicence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.SysLicence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.SysLicence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getEnccap();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getExpdataList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      8,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.msp.mnt.SysLicence.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.msp.mnt.SysLicence.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.msp.mnt.SysLicence.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.mnt.SysLicence.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 state = 5;
 * @return {number}
 */
proto.msp.mnt.SysLicence.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 enccap = 6;
 * @return {number}
 */
proto.msp.mnt.SysLicence.prototype.getEnccap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setEnccap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 module = 7;
 * @return {number}
 */
proto.msp.mnt.SysLicence.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated fixed32 expdata = 8;
 * @return {!Array<number>}
 */
proto.msp.mnt.SysLicence.prototype.getExpdataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.setExpdataList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.addExpdata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.SysLicence} returns this
 */
proto.msp.mnt.SysLicence.prototype.clearExpdataList = function() {
  return this.setExpdataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.LicenceState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.LicenceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.LicenceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LicenceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    effecdue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.LicenceState}
 */
proto.msp.mnt.LicenceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.LicenceState;
  return proto.msp.mnt.LicenceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.LicenceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.LicenceState}
 */
proto.msp.mnt.LicenceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEffecdue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.LicenceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.LicenceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.LicenceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LicenceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEffecdue();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed32 module = 1;
 * @return {number}
 */
proto.msp.mnt.LicenceState.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.LicenceState} returns this
 */
proto.msp.mnt.LicenceState.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool value = 2;
 * @return {boolean}
 */
proto.msp.mnt.LicenceState.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.LicenceState} returns this
 */
proto.msp.mnt.LicenceState.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 effecdue = 3;
 * @return {number}
 */
proto.msp.mnt.LicenceState.prototype.getEffecdue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.LicenceState} returns this
 */
proto.msp.mnt.LicenceState.prototype.setEffecdue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.LicenceStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.LicenceStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.LicenceStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.LicenceStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LicenceStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenceList: jspb.Message.toObjectList(msg.getLicenceList(),
    proto.msp.mnt.LicenceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.LicenceStateList}
 */
proto.msp.mnt.LicenceStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.LicenceStateList;
  return proto.msp.mnt.LicenceStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.LicenceStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.LicenceStateList}
 */
proto.msp.mnt.LicenceStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.LicenceState;
      reader.readMessage(value,proto.msp.mnt.LicenceState.deserializeBinaryFromReader);
      msg.addLicence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.LicenceStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.LicenceStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.LicenceStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LicenceStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.LicenceState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LicenceState licence = 1;
 * @return {!Array<!proto.msp.mnt.LicenceState>}
 */
proto.msp.mnt.LicenceStateList.prototype.getLicenceList = function() {
  return /** @type{!Array<!proto.msp.mnt.LicenceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.LicenceState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.LicenceState>} value
 * @return {!proto.msp.mnt.LicenceStateList} returns this
*/
proto.msp.mnt.LicenceStateList.prototype.setLicenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.LicenceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.LicenceState}
 */
proto.msp.mnt.LicenceStateList.prototype.addLicence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.LicenceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.LicenceStateList} returns this
 */
proto.msp.mnt.LicenceStateList.prototype.clearLicenceList = function() {
  return this.setLicenceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    checksum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    opt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FileInfo}
 */
proto.msp.mnt.FileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FileInfo;
  return proto.msp.mnt.FileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FileInfo}
 */
proto.msp.mnt.FileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChecksum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOpt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getChecksum();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpt();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 size = 1;
 * @return {number}
 */
proto.msp.mnt.FileInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileInfo} returns this
 */
proto.msp.mnt.FileInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 checksum = 2;
 * @return {number}
 */
proto.msp.mnt.FileInfo.prototype.getChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileInfo} returns this
 */
proto.msp.mnt.FileInfo.prototype.setChecksum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.FileInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileInfo} returns this
 */
proto.msp.mnt.FileInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 opt = 4;
 * @return {number}
 */
proto.msp.mnt.FileInfo.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileInfo} returns this
 */
proto.msp.mnt.FileInfo.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isuse: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Resource}
 */
proto.msp.mnt.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Resource;
  return proto.msp.mnt.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Resource}
 */
proto.msp.mnt.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setIsuse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getIsuse();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.mnt.Resource.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Resource} returns this
 */
proto.msp.mnt.Resource.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.mnt.Resource.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Resource} returns this
 */
proto.msp.mnt.Resource.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.mnt.Resource.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Resource} returns this
 */
proto.msp.mnt.Resource.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 isuse = 4;
 * @return {number}
 */
proto.msp.mnt.Resource.prototype.getIsuse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Resource} returns this
 */
proto.msp.mnt.Resource.prototype.setIsuse = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Recoder.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Recoder.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Recoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Recoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Recoder.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    states: jspb.Message.getFieldWithDefault(msg, 5, 0),
    resourceList: jspb.Message.toObjectList(msg.getResourceList(),
    proto.msp.mnt.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Recoder}
 */
proto.msp.mnt.Recoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Recoder;
  return proto.msp.mnt.Recoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Recoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Recoder}
 */
proto.msp.mnt.Recoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStates(value);
      break;
    case 6:
      var value = new proto.msp.mnt.Resource;
      reader.readMessage(value,proto.msp.mnt.Resource.deserializeBinaryFromReader);
      msg.addResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Recoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Recoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Recoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Recoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getStates();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getResourceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.msp.mnt.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.Recoder.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.Recoder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.mnt.Recoder.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.mnt.Recoder.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 states = 5;
 * @return {number}
 */
proto.msp.mnt.Recoder.prototype.getStates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.setStates = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Resource resource = 6;
 * @return {!Array<!proto.msp.mnt.Resource>}
 */
proto.msp.mnt.Recoder.prototype.getResourceList = function() {
  return /** @type{!Array<!proto.msp.mnt.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Resource, 6));
};


/**
 * @param {!Array<!proto.msp.mnt.Resource>} value
 * @return {!proto.msp.mnt.Recoder} returns this
*/
proto.msp.mnt.Recoder.prototype.setResourceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msp.mnt.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Resource}
 */
proto.msp.mnt.Recoder.prototype.addResource = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msp.mnt.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Recoder} returns this
 */
proto.msp.mnt.Recoder.prototype.clearResourceList = function() {
  return this.setResourceList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Recoders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Recoders.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Recoders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Recoders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Recoders.toObject = function(includeInstance, msg) {
  var f, obj = {
    recoderList: jspb.Message.toObjectList(msg.getRecoderList(),
    proto.msp.mnt.Recoder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Recoders}
 */
proto.msp.mnt.Recoders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Recoders;
  return proto.msp.mnt.Recoders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Recoders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Recoders}
 */
proto.msp.mnt.Recoders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Recoder;
      reader.readMessage(value,proto.msp.mnt.Recoder.deserializeBinaryFromReader);
      msg.addRecoder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Recoders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Recoders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Recoders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Recoders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecoderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.Recoder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recoder recoder = 1;
 * @return {!Array<!proto.msp.mnt.Recoder>}
 */
proto.msp.mnt.Recoders.prototype.getRecoderList = function() {
  return /** @type{!Array<!proto.msp.mnt.Recoder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Recoder, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.Recoder>} value
 * @return {!proto.msp.mnt.Recoders} returns this
*/
proto.msp.mnt.Recoders.prototype.setRecoderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.Recoder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Recoder}
 */
proto.msp.mnt.Recoders.prototype.addRecoder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.Recoder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Recoders} returns this
 */
proto.msp.mnt.Recoders.prototype.clearRecoderList = function() {
  return this.setRecoderList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RecoderBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RecoderBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RecoderBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RecoderBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    box: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    portnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RecoderBoard}
 */
proto.msp.mnt.RecoderBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RecoderBoard;
  return proto.msp.mnt.RecoderBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RecoderBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RecoderBoard}
 */
proto.msp.mnt.RecoderBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPortnum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RecoderBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RecoderBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RecoderBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RecoderBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getPortnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.RecoderBoard.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RecoderBoard} returns this
 */
proto.msp.mnt.RecoderBoard.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 box = 2;
 * @return {number}
 */
proto.msp.mnt.RecoderBoard.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RecoderBoard} returns this
 */
proto.msp.mnt.RecoderBoard.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.mnt.RecoderBoard.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RecoderBoard} returns this
 */
proto.msp.mnt.RecoderBoard.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 portnum = 4;
 * @return {number}
 */
proto.msp.mnt.RecoderBoard.prototype.getPortnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RecoderBoard} returns this
 */
proto.msp.mnt.RecoderBoard.prototype.setPortnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 state = 5;
 * @return {number}
 */
proto.msp.mnt.RecoderBoard.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RecoderBoard} returns this
 */
proto.msp.mnt.RecoderBoard.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.RecoderBoards.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RecoderBoards.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RecoderBoards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RecoderBoards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RecoderBoards.toObject = function(includeInstance, msg) {
  var f, obj = {
    recoderboardList: jspb.Message.toObjectList(msg.getRecoderboardList(),
    proto.msp.mnt.RecoderBoard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RecoderBoards}
 */
proto.msp.mnt.RecoderBoards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RecoderBoards;
  return proto.msp.mnt.RecoderBoards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RecoderBoards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RecoderBoards}
 */
proto.msp.mnt.RecoderBoards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.RecoderBoard;
      reader.readMessage(value,proto.msp.mnt.RecoderBoard.deserializeBinaryFromReader);
      msg.addRecoderboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RecoderBoards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RecoderBoards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RecoderBoards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RecoderBoards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecoderboardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.RecoderBoard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RecoderBoard recoderboard = 1;
 * @return {!Array<!proto.msp.mnt.RecoderBoard>}
 */
proto.msp.mnt.RecoderBoards.prototype.getRecoderboardList = function() {
  return /** @type{!Array<!proto.msp.mnt.RecoderBoard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.RecoderBoard, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.RecoderBoard>} value
 * @return {!proto.msp.mnt.RecoderBoards} returns this
*/
proto.msp.mnt.RecoderBoards.prototype.setRecoderboardList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.RecoderBoard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.RecoderBoard}
 */
proto.msp.mnt.RecoderBoards.prototype.addRecoderboard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.RecoderBoard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.RecoderBoards} returns this
 */
proto.msp.mnt.RecoderBoards.prototype.clearRecoderboardList = function() {
  return this.setRecoderboardList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PlatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PlatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PlatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mmsp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    box: jspb.Message.getFieldWithDefault(msg, 5, 0),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    enable: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 8, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 9, ""),
    port: jspb.Message.getFieldWithDefault(msg, 10, 0),
    username: jspb.Message.getFieldWithDefault(msg, 11, ""),
    password: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PlatInfo}
 */
proto.msp.mnt.PlatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PlatInfo;
  return proto.msp.mnt.PlatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PlatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PlatInfo}
 */
proto.msp.mnt.PlatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMmsp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setEnable(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PlatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PlatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PlatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMmsp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getEnable();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string mmsp = 1;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getMmsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setMmsp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string msp = 2;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getMsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setMsp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 mode = 4;
 * @return {number}
 */
proto.msp.mnt.PlatInfo.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 box = 5;
 * @return {number}
 */
proto.msp.mnt.PlatInfo.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 state = 6;
 * @return {number}
 */
proto.msp.mnt.PlatInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 enable = 7;
 * @return {number}
 */
proto.msp.mnt.PlatInfo.prototype.getEnable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setEnable = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string ip = 8;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string domain = 9;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional fixed32 port = 10;
 * @return {number}
 */
proto.msp.mnt.PlatInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string username = 11;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string password = 12;
 * @return {string}
 */
proto.msp.mnt.PlatInfo.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatInfo} returns this
 */
proto.msp.mnt.PlatInfo.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PlatInfos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PlatInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PlatInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PlatInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    platinfoList: jspb.Message.toObjectList(msg.getPlatinfoList(),
    proto.msp.mnt.PlatInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PlatInfos}
 */
proto.msp.mnt.PlatInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PlatInfos;
  return proto.msp.mnt.PlatInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PlatInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PlatInfos}
 */
proto.msp.mnt.PlatInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PlatInfo;
      reader.readMessage(value,proto.msp.mnt.PlatInfo.deserializeBinaryFromReader);
      msg.addPlatinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PlatInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PlatInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PlatInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PlatInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlatInfo platinfo = 1;
 * @return {!Array<!proto.msp.mnt.PlatInfo>}
 */
proto.msp.mnt.PlatInfos.prototype.getPlatinfoList = function() {
  return /** @type{!Array<!proto.msp.mnt.PlatInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PlatInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PlatInfo>} value
 * @return {!proto.msp.mnt.PlatInfos} returns this
*/
proto.msp.mnt.PlatInfos.prototype.setPlatinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PlatInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PlatInfo}
 */
proto.msp.mnt.PlatInfos.prototype.addPlatinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PlatInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PlatInfos} returns this
 */
proto.msp.mnt.PlatInfos.prototype.clearPlatinfoList = function() {
  return this.setPlatinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.CascChnl.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.CascChnl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.CascChnl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascChnl.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cbox: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cslot: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cport: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cip: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.CascChnl}
 */
proto.msp.mnt.CascChnl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.CascChnl;
  return proto.msp.mnt.CascChnl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.CascChnl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.CascChnl}
 */
proto.msp.mnt.CascChnl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBox(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCbox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCslot(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCport(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.CascChnl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.CascChnl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.CascChnl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascChnl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getCbox();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getCslot();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getCport();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getCip();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional fixed32 box = 1;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setBox = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 slot = 2;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 cbox = 5;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getCbox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setCbox = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 cslot = 6;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getCslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setCslot = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 cport = 7;
 * @return {number}
 */
proto.msp.mnt.CascChnl.prototype.getCport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setCport = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string cip = 8;
 * @return {string}
 */
proto.msp.mnt.CascChnl.prototype.getCip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.CascChnl} returns this
 */
proto.msp.mnt.CascChnl.prototype.setCip = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.CascChnls.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.CascChnls.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.CascChnls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.CascChnls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascChnls.toObject = function(includeInstance, msg) {
  var f, obj = {
    cascchnlList: jspb.Message.toObjectList(msg.getCascchnlList(),
    proto.msp.mnt.CascChnl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.CascChnls}
 */
proto.msp.mnt.CascChnls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.CascChnls;
  return proto.msp.mnt.CascChnls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.CascChnls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.CascChnls}
 */
proto.msp.mnt.CascChnls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.CascChnl;
      reader.readMessage(value,proto.msp.mnt.CascChnl.deserializeBinaryFromReader);
      msg.addCascchnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.CascChnls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.CascChnls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.CascChnls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascChnls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCascchnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.CascChnl.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CascChnl cascchnl = 1;
 * @return {!Array<!proto.msp.mnt.CascChnl>}
 */
proto.msp.mnt.CascChnls.prototype.getCascchnlList = function() {
  return /** @type{!Array<!proto.msp.mnt.CascChnl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.CascChnl, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.CascChnl>} value
 * @return {!proto.msp.mnt.CascChnls} returns this
*/
proto.msp.mnt.CascChnls.prototype.setCascchnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.CascChnl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.CascChnl}
 */
proto.msp.mnt.CascChnls.prototype.addCascchnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.CascChnl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.CascChnls} returns this
 */
proto.msp.mnt.CascChnls.prototype.clearCascchnlList = function() {
  return this.setCascchnlList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.CascPipe.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.CascPipe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.CascPipe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascPipe.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    param: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.CascPipe}
 */
proto.msp.mnt.CascPipe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.CascPipe;
  return proto.msp.mnt.CascPipe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.CascPipe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.CascPipe}
 */
proto.msp.mnt.CascPipe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.CascPipe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.CascPipe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.CascPipe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CascPipe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParam();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sn = 1;
 * @return {string}
 */
proto.msp.mnt.CascPipe.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.CascPipe} returns this
 */
proto.msp.mnt.CascPipe.prototype.setSn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.msp.mnt.CascPipe.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.CascPipe} returns this
 */
proto.msp.mnt.CascPipe.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string param = 3;
 * @return {string}
 */
proto.msp.mnt.CascPipe.prototype.getParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.CascPipe} returns this
 */
proto.msp.mnt.CascPipe.prototype.setParam = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.CashChnlPrm.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.CashChnlPrm.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.CashChnlPrm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.CashChnlPrm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CashChnlPrm.toObject = function(includeInstance, msg) {
  var f, obj = {
    opt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cascchnlList: jspb.Message.toObjectList(msg.getCascchnlList(),
    proto.msp.mnt.CascChnl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.CashChnlPrm}
 */
proto.msp.mnt.CashChnlPrm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.CashChnlPrm;
  return proto.msp.mnt.CashChnlPrm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.CashChnlPrm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.CashChnlPrm}
 */
proto.msp.mnt.CashChnlPrm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOpt(value);
      break;
    case 2:
      var value = new proto.msp.mnt.CascChnl;
      reader.readMessage(value,proto.msp.mnt.CascChnl.deserializeBinaryFromReader);
      msg.addCascchnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.CashChnlPrm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.CashChnlPrm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.CashChnlPrm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.CashChnlPrm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpt();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getCascchnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.CascChnl.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 opt = 1;
 * @return {number}
 */
proto.msp.mnt.CashChnlPrm.prototype.getOpt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.CashChnlPrm} returns this
 */
proto.msp.mnt.CashChnlPrm.prototype.setOpt = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CascChnl cascchnl = 2;
 * @return {!Array<!proto.msp.mnt.CascChnl>}
 */
proto.msp.mnt.CashChnlPrm.prototype.getCascchnlList = function() {
  return /** @type{!Array<!proto.msp.mnt.CascChnl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.CascChnl, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.CascChnl>} value
 * @return {!proto.msp.mnt.CashChnlPrm} returns this
*/
proto.msp.mnt.CashChnlPrm.prototype.setCascchnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.CascChnl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.CascChnl}
 */
proto.msp.mnt.CashChnlPrm.prototype.addCascchnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.CascChnl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.CashChnlPrm} returns this
 */
proto.msp.mnt.CashChnlPrm.prototype.clearCascchnlList = function() {
  return this.setCascchnlList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    kvm: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    rate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    row: jspb.Message.getFieldWithDefault(msg, 5, 0),
    col: jspb.Message.getFieldWithDefault(msg, 6, 0),
    width: jspb.Message.getFieldWithDefault(msg, 7, 0),
    height: jspb.Message.getFieldWithDefault(msg, 8, 0),
    cellnum: jspb.Message.getFieldWithDefault(msg, 9, 0),
    backid: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvBasic}
 */
proto.msp.mnt.TvBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvBasic;
  return proto.msp.mnt.TvBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvBasic}
 */
proto.msp.mnt.TvBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKvm(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCol(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCellnum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBackid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getKvm();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getRow();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getCellnum();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getBackid();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.mnt.TvBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool kvm = 3;
 * @return {boolean}
 */
proto.msp.mnt.TvBasic.prototype.getKvm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setKvm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional fixed32 rate = 4;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 row = 5;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 col = 6;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setCol = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 width = 7;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 height = 8;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 cellnum = 9;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getCellnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setCellnum = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 backid = 10;
 * @return {number}
 */
proto.msp.mnt.TvBasic.prototype.getBackid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBasic} returns this
 */
proto.msp.mnt.TvBasic.prototype.setBackid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.TvList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvbasicList: jspb.Message.toObjectList(msg.getTvbasicList(),
    proto.msp.mnt.TvBasic.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvList}
 */
proto.msp.mnt.TvList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvList;
  return proto.msp.mnt.TvList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvList}
 */
proto.msp.mnt.TvList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.TvBasic;
      reader.readMessage(value,proto.msp.mnt.TvBasic.deserializeBinaryFromReader);
      msg.addTvbasic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvbasicList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.TvBasic.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvBasic tvbasic = 1;
 * @return {!Array<!proto.msp.mnt.TvBasic>}
 */
proto.msp.mnt.TvList.prototype.getTvbasicList = function() {
  return /** @type{!Array<!proto.msp.mnt.TvBasic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.TvBasic, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.TvBasic>} value
 * @return {!proto.msp.mnt.TvList} returns this
*/
proto.msp.mnt.TvList.prototype.setTvbasicList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.TvBasic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.TvBasic}
 */
proto.msp.mnt.TvList.prototype.addTvbasic = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.TvBasic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.TvList} returns this
 */
proto.msp.mnt.TvList.prototype.clearTvbasicList = function() {
  return this.setTvbasicList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvCell.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvCell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvCell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvCell.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chnid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvCell}
 */
proto.msp.mnt.TvCell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvCell;
  return proto.msp.mnt.TvCell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvCell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvCell}
 */
proto.msp.mnt.TvCell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChnid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvCell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvCell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvCell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvCell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getChnid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getHight();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 chnid = 2;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getChnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setChnid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 startx = 3;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 starty = 4;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 width = 5;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 hight = 6;
 * @return {number}
 */
proto.msp.mnt.TvCell.prototype.getHight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvCell} returns this
 */
proto.msp.mnt.TvCell.prototype.setHight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.TvCellList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvCellList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvCellList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvCellList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvCellList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvcellList: jspb.Message.toObjectList(msg.getTvcellList(),
    proto.msp.mnt.TvCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvCellList}
 */
proto.msp.mnt.TvCellList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvCellList;
  return proto.msp.mnt.TvCellList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvCellList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvCellList}
 */
proto.msp.mnt.TvCellList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.TvCell;
      reader.readMessage(value,proto.msp.mnt.TvCell.deserializeBinaryFromReader);
      msg.addTvcell(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvCellList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvCellList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvCellList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvCellList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvcellList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.TvCell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvCell tvcell = 1;
 * @return {!Array<!proto.msp.mnt.TvCell>}
 */
proto.msp.mnt.TvCellList.prototype.getTvcellList = function() {
  return /** @type{!Array<!proto.msp.mnt.TvCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.TvCell, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.TvCell>} value
 * @return {!proto.msp.mnt.TvCellList} returns this
*/
proto.msp.mnt.TvCellList.prototype.setTvcellList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.TvCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.TvCell}
 */
proto.msp.mnt.TvCellList.prototype.addTvcell = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.TvCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.TvCellList} returns this
 */
proto.msp.mnt.TvCellList.prototype.clearTvcellList = function() {
  return this.setTvcellList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.TvInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.msp.mnt.TvBasic.toObject(includeInstance, f),
    pb_package: jspb.Message.getFieldWithDefault(msg, 2, 0),
    celllsList: jspb.Message.toObjectList(msg.getCelllsList(),
    proto.msp.mnt.TvCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvInfo}
 */
proto.msp.mnt.TvInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvInfo;
  return proto.msp.mnt.TvInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvInfo}
 */
proto.msp.mnt.TvInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.TvBasic;
      reader.readMessage(value,proto.msp.mnt.TvBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPackage(value);
      break;
    case 3:
      var value = new proto.msp.mnt.TvCell;
      reader.readMessage(value,proto.msp.mnt.TvCell.deserializeBinaryFromReader);
      msg.addCellls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.TvBasic.serializeBinaryToWriter
    );
  }
  f = message.getPackage();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getCelllsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msp.mnt.TvCell.serializeBinaryToWriter
    );
  }
};


/**
 * optional TvBasic base = 1;
 * @return {?proto.msp.mnt.TvBasic}
 */
proto.msp.mnt.TvInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.mnt.TvBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.TvBasic, 1));
};


/**
 * @param {?proto.msp.mnt.TvBasic|undefined} value
 * @return {!proto.msp.mnt.TvInfo} returns this
*/
proto.msp.mnt.TvInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.TvInfo} returns this
 */
proto.msp.mnt.TvInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.TvInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 package = 2;
 * @return {number}
 */
proto.msp.mnt.TvInfo.prototype.getPackage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvInfo} returns this
 */
proto.msp.mnt.TvInfo.prototype.setPackage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TvCell cellls = 3;
 * @return {!Array<!proto.msp.mnt.TvCell>}
 */
proto.msp.mnt.TvInfo.prototype.getCelllsList = function() {
  return /** @type{!Array<!proto.msp.mnt.TvCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.TvCell, 3));
};


/**
 * @param {!Array<!proto.msp.mnt.TvCell>} value
 * @return {!proto.msp.mnt.TvInfo} returns this
*/
proto.msp.mnt.TvInfo.prototype.setCelllsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.mnt.TvCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.TvCell}
 */
proto.msp.mnt.TvInfo.prototype.addCellls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.mnt.TvCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.TvInfo} returns this
 */
proto.msp.mnt.TvInfo.prototype.clearCelllsList = function() {
  return this.setCelllsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvBack.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvBack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvBack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBack.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    startx: jspb.Message.getFieldWithDefault(msg, 6, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 7, 0),
    width: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvBack}
 */
proto.msp.mnt.TvBack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvBack;
  return proto.msp.mnt.TvBack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvBack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvBack}
 */
proto.msp.mnt.TvBack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvBack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvBack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvBack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getExist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool exist = 2;
 * @return {boolean}
 */
proto.msp.mnt.TvBack.prototype.getExist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setExist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 state = 3;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 tvid = 4;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.msp.mnt.TvBack.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed32 startx = 6;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 starty = 7;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 width = 8;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 height = 9;
 * @return {number}
 */
proto.msp.mnt.TvBack.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.TvBack} returns this
 */
proto.msp.mnt.TvBack.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.TvBackList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvBackList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvBackList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvBackList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBackList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvbackList: jspb.Message.toObjectList(msg.getTvbackList(),
    proto.msp.mnt.TvBack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvBackList}
 */
proto.msp.mnt.TvBackList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvBackList;
  return proto.msp.mnt.TvBackList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvBackList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvBackList}
 */
proto.msp.mnt.TvBackList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.TvBack;
      reader.readMessage(value,proto.msp.mnt.TvBack.deserializeBinaryFromReader);
      msg.addTvback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvBackList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvBackList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvBackList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvBackList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvbackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.TvBack.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvBack tvback = 1;
 * @return {!Array<!proto.msp.mnt.TvBack>}
 */
proto.msp.mnt.TvBackList.prototype.getTvbackList = function() {
  return /** @type{!Array<!proto.msp.mnt.TvBack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.TvBack, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.TvBack>} value
 * @return {!proto.msp.mnt.TvBackList} returns this
*/
proto.msp.mnt.TvBackList.prototype.setTvbackList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.TvBack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.TvBack}
 */
proto.msp.mnt.TvBackList.prototype.addTvback = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.TvBack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.TvBackList} returns this
 */
proto.msp.mnt.TvBackList.prototype.clearTvbackList = function() {
  return this.setTvbackList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BackTrans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BackTrans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BackTrans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackTrans.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    no: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BackTrans}
 */
proto.msp.mnt.BackTrans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BackTrans;
  return proto.msp.mnt.BackTrans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BackTrans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BackTrans}
 */
proto.msp.mnt.BackTrans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BackTrans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BackTrans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BackTrans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackTrans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getNo();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.BackTrans.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BackTrans} returns this
 */
proto.msp.mnt.BackTrans.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 tvid = 2;
 * @return {number}
 */
proto.msp.mnt.BackTrans.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BackTrans} returns this
 */
proto.msp.mnt.BackTrans.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 no = 3;
 * @return {number}
 */
proto.msp.mnt.BackTrans.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BackTrans} returns this
 */
proto.msp.mnt.BackTrans.prototype.setNo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.msp.mnt.BackTrans.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.BackTrans} returns this
 */
proto.msp.mnt.BackTrans.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.BackTransList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BackTransList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BackTransList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BackTransList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackTransList.toObject = function(includeInstance, msg) {
  var f, obj = {
    backtransList: jspb.Message.toObjectList(msg.getBacktransList(),
    proto.msp.mnt.BackTrans.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BackTransList}
 */
proto.msp.mnt.BackTransList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BackTransList;
  return proto.msp.mnt.BackTransList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BackTransList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BackTransList}
 */
proto.msp.mnt.BackTransList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.BackTrans;
      reader.readMessage(value,proto.msp.mnt.BackTrans.deserializeBinaryFromReader);
      msg.addBacktrans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BackTransList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BackTransList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BackTransList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackTransList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBacktransList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.BackTrans.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BackTrans backtrans = 1;
 * @return {!Array<!proto.msp.mnt.BackTrans>}
 */
proto.msp.mnt.BackTransList.prototype.getBacktransList = function() {
  return /** @type{!Array<!proto.msp.mnt.BackTrans>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.BackTrans, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.BackTrans>} value
 * @return {!proto.msp.mnt.BackTransList} returns this
*/
proto.msp.mnt.BackTransList.prototype.setBacktransList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.BackTrans=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.BackTrans}
 */
proto.msp.mnt.BackTransList.prototype.addBacktrans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.BackTrans, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.BackTransList} returns this
 */
proto.msp.mnt.BackTransList.prototype.clearBacktransList = function() {
  return this.setBacktransList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.BackState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.BackState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.BackState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    back: (f = msg.getBack()) && proto.msp.mnt.TvBack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.BackState}
 */
proto.msp.mnt.BackState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.BackState;
  return proto.msp.mnt.BackState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.BackState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.BackState}
 */
proto.msp.mnt.BackState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.mnt.TvBack;
      reader.readMessage(value,proto.msp.mnt.TvBack.deserializeBinaryFromReader);
      msg.setBack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.BackState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.BackState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.BackState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.BackState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.TvBack.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 state = 1;
 * @return {number}
 */
proto.msp.mnt.BackState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.BackState} returns this
 */
proto.msp.mnt.BackState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TvBack back = 2;
 * @return {?proto.msp.mnt.TvBack}
 */
proto.msp.mnt.BackState.prototype.getBack = function() {
  return /** @type{?proto.msp.mnt.TvBack} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.TvBack, 2));
};


/**
 * @param {?proto.msp.mnt.TvBack|undefined} value
 * @return {!proto.msp.mnt.BackState} returns this
*/
proto.msp.mnt.BackState.prototype.setBack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.BackState} returns this
 */
proto.msp.mnt.BackState.prototype.clearBack = function() {
  return this.setBack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.BackState.prototype.hasBack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OSD.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OSD.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OSD} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSD.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    visible: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    adaption: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    startx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 5, 0),
    width: jspb.Message.getFieldWithDefault(msg, 6, 0),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fontname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    fontstyle: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fontsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fontform: jspb.Message.getFieldWithDefault(msg, 11, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 12, 0),
    fontclr: jspb.Message.getFieldWithDefault(msg, 13, 0),
    context: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OSD}
 */
proto.msp.mnt.OSD.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OSD;
  return proto.msp.mnt.OSD.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OSD} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OSD}
 */
proto.msp.mnt.OSD.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdaption(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFontname(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontstyle(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontsize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontform(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDirection(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontclr(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OSD.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OSD.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OSD} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSD.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAdaption();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getFontname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFontstyle();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getFontsize();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getFontform();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getFontclr();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool visible = 2;
 * @return {boolean}
 */
proto.msp.mnt.OSD.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setVisible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool adaption = 3;
 * @return {boolean}
 */
proto.msp.mnt.OSD.prototype.getAdaption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setAdaption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional fixed32 startx = 4;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 starty = 5;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 width = 6;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 height = 7;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string fontname = 8;
 * @return {string}
 */
proto.msp.mnt.OSD.prototype.getFontname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setFontname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 fontstyle = 9;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getFontstyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setFontstyle = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 fontsize = 10;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getFontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setFontsize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional fixed32 fontform = 11;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getFontform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setFontform = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 direction = 12;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setDirection = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 fontclr = 13;
 * @return {number}
 */
proto.msp.mnt.OSD.prototype.getFontclr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setFontclr = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string context = 14;
 * @return {string}
 */
proto.msp.mnt.OSD.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.OSD} returns this
 */
proto.msp.mnt.OSD.prototype.setContext = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.OSDList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OSDList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OSDList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OSDList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSDList.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    osdList: jspb.Message.toObjectList(msg.getOsdList(),
    proto.msp.mnt.OSD.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OSDList}
 */
proto.msp.mnt.OSDList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OSDList;
  return proto.msp.mnt.OSDList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OSDList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OSDList}
 */
proto.msp.mnt.OSDList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.msp.mnt.OSD;
      reader.readMessage(value,proto.msp.mnt.OSD.deserializeBinaryFromReader);
      msg.addOsd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OSDList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OSDList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OSDList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSDList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getOsdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.OSD.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.OSDList.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSDList} returns this
 */
proto.msp.mnt.OSDList.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OSD osd = 2;
 * @return {!Array<!proto.msp.mnt.OSD>}
 */
proto.msp.mnt.OSDList.prototype.getOsdList = function() {
  return /** @type{!Array<!proto.msp.mnt.OSD>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.OSD, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.OSD>} value
 * @return {!proto.msp.mnt.OSDList} returns this
*/
proto.msp.mnt.OSDList.prototype.setOsdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.OSD=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.OSD}
 */
proto.msp.mnt.OSDList.prototype.addOsd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.OSD, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.OSDList} returns this
 */
proto.msp.mnt.OSDList.prototype.clearOsdList = function() {
  return this.setOsdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OsdStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OsdStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OsdStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exist: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OsdStatus}
 */
proto.msp.mnt.OsdStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OsdStatus;
  return proto.msp.mnt.OsdStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OsdStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OsdStatus}
 */
proto.msp.mnt.OsdStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setExist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OsdStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OsdStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OsdStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getExist();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 tvid = 1;
 * @return {number}
 */
proto.msp.mnt.OsdStatus.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdStatus} returns this
 */
proto.msp.mnt.OsdStatus.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.OsdStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdStatus} returns this
 */
proto.msp.mnt.OsdStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 state = 3;
 * @return {number}
 */
proto.msp.mnt.OsdStatus.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdStatus} returns this
 */
proto.msp.mnt.OsdStatus.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 exist = 4;
 * @return {number}
 */
proto.msp.mnt.OsdStatus.prototype.getExist = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdStatus} returns this
 */
proto.msp.mnt.OsdStatus.prototype.setExist = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.OsdStatusList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OsdStatusList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OsdStatusList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OsdStatusList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdStatusList.toObject = function(includeInstance, msg) {
  var f, obj = {
    osdstatusList: jspb.Message.toObjectList(msg.getOsdstatusList(),
    proto.msp.mnt.OsdStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OsdStatusList}
 */
proto.msp.mnt.OsdStatusList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OsdStatusList;
  return proto.msp.mnt.OsdStatusList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OsdStatusList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OsdStatusList}
 */
proto.msp.mnt.OsdStatusList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.OsdStatus;
      reader.readMessage(value,proto.msp.mnt.OsdStatus.deserializeBinaryFromReader);
      msg.addOsdstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OsdStatusList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OsdStatusList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OsdStatusList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdStatusList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOsdstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.OsdStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OsdStatus osdstatus = 1;
 * @return {!Array<!proto.msp.mnt.OsdStatus>}
 */
proto.msp.mnt.OsdStatusList.prototype.getOsdstatusList = function() {
  return /** @type{!Array<!proto.msp.mnt.OsdStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.OsdStatus, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.OsdStatus>} value
 * @return {!proto.msp.mnt.OsdStatusList} returns this
*/
proto.msp.mnt.OsdStatusList.prototype.setOsdstatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.OsdStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.OsdStatus}
 */
proto.msp.mnt.OsdStatusList.prototype.addOsdstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.OsdStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.OsdStatusList} returns this
 */
proto.msp.mnt.OsdStatusList.prototype.clearOsdstatusList = function() {
  return this.setOsdstatusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.FileTrans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.FileTrans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.FileTrans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileTrans.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    path: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.FileTrans}
 */
proto.msp.mnt.FileTrans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.FileTrans;
  return proto.msp.mnt.FileTrans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.FileTrans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.FileTrans}
 */
proto.msp.mnt.FileTrans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.FileTrans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.FileTrans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.FileTrans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.FileTrans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.msp.mnt.FileTrans.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileTrans} returns this
 */
proto.msp.mnt.FileTrans.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 port = 2;
 * @return {number}
 */
proto.msp.mnt.FileTrans.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.FileTrans} returns this
 */
proto.msp.mnt.FileTrans.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.msp.mnt.FileTrans.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileTrans} returns this
 */
proto.msp.mnt.FileTrans.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.msp.mnt.FileTrans.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileTrans} returns this
 */
proto.msp.mnt.FileTrans.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.msp.mnt.FileTrans.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.FileTrans} returns this
 */
proto.msp.mnt.FileTrans.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OsdFile.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OsdFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OsdFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    checksum: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OsdFile}
 */
proto.msp.mnt.OsdFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OsdFile;
  return proto.msp.mnt.OsdFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OsdFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OsdFile}
 */
proto.msp.mnt.OsdFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChecksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OsdFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OsdFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OsdFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OsdFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getChecksum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 tvid = 1;
 * @return {number}
 */
proto.msp.mnt.OsdFile.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdFile} returns this
 */
proto.msp.mnt.OsdFile.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.OsdFile.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdFile} returns this
 */
proto.msp.mnt.OsdFile.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 filesize = 3;
 * @return {number}
 */
proto.msp.mnt.OsdFile.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdFile} returns this
 */
proto.msp.mnt.OsdFile.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 checksum = 4;
 * @return {number}
 */
proto.msp.mnt.OsdFile.prototype.getChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OsdFile} returns this
 */
proto.msp.mnt.OsdFile.prototype.setChecksum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.OSDCtrl.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.OSDCtrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.OSDCtrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSDCtrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    use: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.OSDCtrl}
 */
proto.msp.mnt.OSDCtrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.OSDCtrl;
  return proto.msp.mnt.OSDCtrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.OSDCtrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.OSDCtrl}
 */
proto.msp.mnt.OSDCtrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.OSDCtrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.OSDCtrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.OSDCtrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.OSDCtrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getUse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.OSDCtrl.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.OSDCtrl} returns this
 */
proto.msp.mnt.OSDCtrl.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool use = 2;
 * @return {boolean}
 */
proto.msp.mnt.OSDCtrl.prototype.getUse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.OSDCtrl} returns this
 */
proto.msp.mnt.OSDCtrl.prototype.setUse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.TvState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.TvState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.TvState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.msp.mnt.ValueU32.toObject(includeInstance, f),
    base: (f = msg.getBase()) && proto.msp.mnt.TvBasic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.TvState}
 */
proto.msp.mnt.TvState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.TvState;
  return proto.msp.mnt.TvState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.TvState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.TvState}
 */
proto.msp.mnt.TvState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.ValueU32;
      reader.readMessage(value,proto.msp.mnt.ValueU32.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.mnt.TvBasic;
      reader.readMessage(value,proto.msp.mnt.TvBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.TvState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.TvState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.TvState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.TvState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.ValueU32.serializeBinaryToWriter
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.TvBasic.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueU32 state = 1;
 * @return {?proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.TvState.prototype.getState = function() {
  return /** @type{?proto.msp.mnt.ValueU32} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.ValueU32, 1));
};


/**
 * @param {?proto.msp.mnt.ValueU32|undefined} value
 * @return {!proto.msp.mnt.TvState} returns this
*/
proto.msp.mnt.TvState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.TvState} returns this
 */
proto.msp.mnt.TvState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.TvState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TvBasic base = 2;
 * @return {?proto.msp.mnt.TvBasic}
 */
proto.msp.mnt.TvState.prototype.getBase = function() {
  return /** @type{?proto.msp.mnt.TvBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.TvBasic, 2));
};


/**
 * @param {?proto.msp.mnt.TvBasic|undefined} value
 * @return {!proto.msp.mnt.TvState} returns this
*/
proto.msp.mnt.TvState.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.TvState} returns this
 */
proto.msp.mnt.TvState.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.TvState.prototype.hasBase = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pass: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Login}
 */
proto.msp.mnt.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Login;
  return proto.msp.mnt.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Login}
 */
proto.msp.mnt.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.msp.mnt.Login.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Login} returns this
 */
proto.msp.mnt.Login.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pass = 2;
 * @return {string}
 */
proto.msp.mnt.Login.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Login} returns this
 */
proto.msp.mnt.Login.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.LoginAck.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.LoginAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.LoginAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LoginAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.LoginAck}
 */
proto.msp.mnt.LoginAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.LoginAck;
  return proto.msp.mnt.LoginAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.LoginAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.LoginAck}
 */
proto.msp.mnt.LoginAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.LoginAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.LoginAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.LoginAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.LoginAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.LoginAck.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.LoginAck} returns this
 */
proto.msp.mnt.LoginAck.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 count = 2;
 * @return {number}
 */
proto.msp.mnt.LoginAck.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.LoginAck} returns this
 */
proto.msp.mnt.LoginAck.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PlatSn.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PlatSn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PlatSn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatSn.toObject = function(includeInstance, msg) {
  var f, obj = {
    platsn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PlatSn}
 */
proto.msp.mnt.PlatSn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PlatSn;
  return proto.msp.mnt.PlatSn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PlatSn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PlatSn}
 */
proto.msp.mnt.PlatSn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatsn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PlatSn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PlatSn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PlatSn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PlatSn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatsn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string platsn = 1;
 * @return {string}
 */
proto.msp.mnt.PlatSn.prototype.getPlatsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PlatSn} returns this
 */
proto.msp.mnt.PlatSn.prototype.setPlatsn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.msp.mnt.PlatSn.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PlatSn} returns this
 */
proto.msp.mnt.PlatSn.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Kdmid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Kdmid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Kdmid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Kdmid.toObject = function(includeInstance, msg) {
  var f, obj = {
    kdmid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Kdmid}
 */
proto.msp.mnt.Kdmid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Kdmid;
  return proto.msp.mnt.Kdmid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Kdmid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Kdmid}
 */
proto.msp.mnt.Kdmid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKdmid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Kdmid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Kdmid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Kdmid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Kdmid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKdmid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string KDMID = 1;
 * @return {string}
 */
proto.msp.mnt.Kdmid.prototype.getKdmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Kdmid} returns this
 */
proto.msp.mnt.Kdmid.prototype.setKdmid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.User.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    online: jspb.Message.getFieldWithDefault(msg, 5, 0),
    islock: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isuse: jspb.Message.getFieldWithDefault(msg, 7, 0),
    validity: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.User}
 */
proto.msp.mnt.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.User;
  return proto.msp.mnt.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.User}
 */
proto.msp.mnt.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnline(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIslock(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsuse(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setValidity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getOnline();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIslock();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsuse();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getValidity();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pass = 3;
 * @return {string}
 */
proto.msp.mnt.User.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 online = 5;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setOnline = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 islock = 6;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getIslock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setIslock = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 isuse = 7;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getIsuse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setIsuse = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 validity = 8;
 * @return {number}
 */
proto.msp.mnt.User.prototype.getValidity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.User} returns this
 */
proto.msp.mnt.User.prototype.setValidity = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserRes.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserRes}
 */
proto.msp.mnt.UserRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserRes;
  return proto.msp.mnt.UserRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserRes}
 */
proto.msp.mnt.UserRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.msp.mnt.UserRes.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UserRes} returns this
 */
proto.msp.mnt.UserRes.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.mnt.UserRes.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UserRes} returns this
 */
proto.msp.mnt.UserRes.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UserResList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserResList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserResList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserResList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserResList.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resList: jspb.Message.toObjectList(msg.getResList(),
    proto.msp.mnt.UserRes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserResList}
 */
proto.msp.mnt.UserResList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserResList;
  return proto.msp.mnt.UserResList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserResList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserResList}
 */
proto.msp.mnt.UserResList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.msp.mnt.UserRes;
      reader.readMessage(value,proto.msp.mnt.UserRes.deserializeBinaryFromReader);
      msg.addRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserResList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserResList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserResList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserResList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getResList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.mnt.UserRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 userid = 1;
 * @return {number}
 */
proto.msp.mnt.UserResList.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UserResList} returns this
 */
proto.msp.mnt.UserResList.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UserRes res = 2;
 * @return {!Array<!proto.msp.mnt.UserRes>}
 */
proto.msp.mnt.UserResList.prototype.getResList = function() {
  return /** @type{!Array<!proto.msp.mnt.UserRes>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UserRes, 2));
};


/**
 * @param {!Array<!proto.msp.mnt.UserRes>} value
 * @return {!proto.msp.mnt.UserResList} returns this
*/
proto.msp.mnt.UserResList.prototype.setResList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.mnt.UserRes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UserRes}
 */
proto.msp.mnt.UserResList.prototype.addRes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.mnt.UserRes, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UserResList} returns this
 */
proto.msp.mnt.UserResList.prototype.clearResList = function() {
  return this.setResList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.msp.mnt.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserList}
 */
proto.msp.mnt.UserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserList;
  return proto.msp.mnt.UserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserList}
 */
proto.msp.mnt.UserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.User;
      reader.readMessage(value,proto.msp.mnt.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User user = 1;
 * @return {!Array<!proto.msp.mnt.User>}
 */
proto.msp.mnt.UserList.prototype.getUserList = function() {
  return /** @type{!Array<!proto.msp.mnt.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.User, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.User>} value
 * @return {!proto.msp.mnt.UserList} returns this
*/
proto.msp.mnt.UserList.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.User}
 */
proto.msp.mnt.UserList.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UserList} returns this
 */
proto.msp.mnt.UserList.prototype.clearUserList = function() {
  return this.setUserList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserLockState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserLockState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserLockState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserLockState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserLockState}
 */
proto.msp.mnt.UserLockState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserLockState;
  return proto.msp.mnt.UserLockState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserLockState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserLockState}
 */
proto.msp.mnt.UserLockState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserLockState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserLockState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserLockState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserLockState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getState();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.UserLockState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.UserLockState} returns this
 */
proto.msp.mnt.UserLockState.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool state = 2;
 * @return {boolean}
 */
proto.msp.mnt.UserLockState.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.UserLockState} returns this
 */
proto.msp.mnt.UserLockState.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserState.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.msp.mnt.User.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.msp.mnt.ValueU32.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserState}
 */
proto.msp.mnt.UserState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserState;
  return proto.msp.mnt.UserState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserState}
 */
proto.msp.mnt.UserState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.User;
      reader.readMessage(value,proto.msp.mnt.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.msp.mnt.ValueU32;
      reader.readMessage(value,proto.msp.mnt.ValueU32.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.User.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.ValueU32.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.msp.mnt.User}
 */
proto.msp.mnt.UserState.prototype.getUser = function() {
  return /** @type{?proto.msp.mnt.User} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.User, 1));
};


/**
 * @param {?proto.msp.mnt.User|undefined} value
 * @return {!proto.msp.mnt.UserState} returns this
*/
proto.msp.mnt.UserState.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.UserState} returns this
 */
proto.msp.mnt.UserState.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.UserState.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValueU32 state = 2;
 * @return {?proto.msp.mnt.ValueU32}
 */
proto.msp.mnt.UserState.prototype.getState = function() {
  return /** @type{?proto.msp.mnt.ValueU32} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.ValueU32, 2));
};


/**
 * @param {?proto.msp.mnt.ValueU32|undefined} value
 * @return {!proto.msp.mnt.UserState} returns this
*/
proto.msp.mnt.UserState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.UserState} returns this
 */
proto.msp.mnt.UserState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.UserState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.UserStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.UserStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.UserStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.UserStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    userstateList: jspb.Message.toObjectList(msg.getUserstateList(),
    proto.msp.mnt.UserState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.UserStateList}
 */
proto.msp.mnt.UserStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.UserStateList;
  return proto.msp.mnt.UserStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.UserStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.UserStateList}
 */
proto.msp.mnt.UserStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.UserState;
      reader.readMessage(value,proto.msp.mnt.UserState.deserializeBinaryFromReader);
      msg.addUserstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.UserStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.UserStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.UserStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.UserStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.UserState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserState userstate = 1;
 * @return {!Array<!proto.msp.mnt.UserState>}
 */
proto.msp.mnt.UserStateList.prototype.getUserstateList = function() {
  return /** @type{!Array<!proto.msp.mnt.UserState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.UserState, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.UserState>} value
 * @return {!proto.msp.mnt.UserStateList} returns this
*/
proto.msp.mnt.UserStateList.prototype.setUserstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.UserState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.UserState}
 */
proto.msp.mnt.UserStateList.prototype.addUserstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.UserState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.UserStateList} returns this
 */
proto.msp.mnt.UserStateList.prototype.clearUserstateList = function() {
  return this.setUserstateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.WinState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.WinState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.WinState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.WinState.toObject = function(includeInstance, msg) {
  var f, obj = {
    window: (f = msg.getWindow()) && proto.msp.mnt.Window.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.WinState}
 */
proto.msp.mnt.WinState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.WinState;
  return proto.msp.mnt.WinState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.WinState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.WinState}
 */
proto.msp.mnt.WinState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Window;
      reader.readMessage(value,proto.msp.mnt.Window.deserializeBinaryFromReader);
      msg.setWindow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.WinState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.WinState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.WinState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.WinState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWindow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.Window.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional Window window = 1;
 * @return {?proto.msp.mnt.Window}
 */
proto.msp.mnt.WinState.prototype.getWindow = function() {
  return /** @type{?proto.msp.mnt.Window} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Window, 1));
};


/**
 * @param {?proto.msp.mnt.Window|undefined} value
 * @return {!proto.msp.mnt.WinState} returns this
*/
proto.msp.mnt.WinState.prototype.setWindow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.WinState} returns this
 */
proto.msp.mnt.WinState.prototype.clearWindow = function() {
  return this.setWindow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.WinState.prototype.hasWindow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.mnt.WinState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.WinState} returns this
 */
proto.msp.mnt.WinState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Subwindow.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Subwindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Subwindow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Subwindow.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    srcid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Subwindow}
 */
proto.msp.mnt.Subwindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Subwindow;
  return proto.msp.mnt.Subwindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Subwindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Subwindow}
 */
proto.msp.mnt.Subwindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSrcid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Subwindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Subwindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Subwindow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Subwindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSrcid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Subwindow.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Subwindow} returns this
 */
proto.msp.mnt.Subwindow.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 srcid = 2;
 * @return {number}
 */
proto.msp.mnt.Subwindow.prototype.getSrcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Subwindow} returns this
 */
proto.msp.mnt.Subwindow.prototype.setSrcid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.msp.mnt.Subwindow.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.Subwindow} returns this
 */
proto.msp.mnt.Subwindow.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.MergeWnd.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.MergeWnd.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.MergeWnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.MergeWnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MergeWnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.msp.mnt.Tswid.toObject(includeInstance, f),
    style: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subwindowList: jspb.Message.toObjectList(msg.getSubwindowList(),
    proto.msp.mnt.Subwindow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.MergeWnd}
 */
proto.msp.mnt.MergeWnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.MergeWnd;
  return proto.msp.mnt.MergeWnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.MergeWnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.MergeWnd}
 */
proto.msp.mnt.MergeWnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStyle(value);
      break;
    case 3:
      var value = new proto.msp.mnt.Subwindow;
      reader.readMessage(value,proto.msp.mnt.Subwindow.deserializeBinaryFromReader);
      msg.addSubwindow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.MergeWnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.MergeWnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.MergeWnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MergeWnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getSubwindowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msp.mnt.Subwindow.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tswid id = 1;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.MergeWnd.prototype.getId = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 1));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.MergeWnd} returns this
*/
proto.msp.mnt.MergeWnd.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.MergeWnd} returns this
 */
proto.msp.mnt.MergeWnd.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.MergeWnd.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 style = 2;
 * @return {number}
 */
proto.msp.mnt.MergeWnd.prototype.getStyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.MergeWnd} returns this
 */
proto.msp.mnt.MergeWnd.prototype.setStyle = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Subwindow subwindow = 3;
 * @return {!Array<!proto.msp.mnt.Subwindow>}
 */
proto.msp.mnt.MergeWnd.prototype.getSubwindowList = function() {
  return /** @type{!Array<!proto.msp.mnt.Subwindow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Subwindow, 3));
};


/**
 * @param {!Array<!proto.msp.mnt.Subwindow>} value
 * @return {!proto.msp.mnt.MergeWnd} returns this
*/
proto.msp.mnt.MergeWnd.prototype.setSubwindowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.mnt.Subwindow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Subwindow}
 */
proto.msp.mnt.MergeWnd.prototype.addSubwindow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.mnt.Subwindow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.MergeWnd} returns this
 */
proto.msp.mnt.MergeWnd.prototype.clearSubwindowList = function() {
  return this.setSubwindowList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.MergeWnds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.MergeWnds.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.MergeWnds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.MergeWnds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MergeWnds.toObject = function(includeInstance, msg) {
  var f, obj = {
    mergewndList: jspb.Message.toObjectList(msg.getMergewndList(),
    proto.msp.mnt.MergeWnd.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.MergeWnds}
 */
proto.msp.mnt.MergeWnds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.MergeWnds;
  return proto.msp.mnt.MergeWnds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.MergeWnds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.MergeWnds}
 */
proto.msp.mnt.MergeWnds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.MergeWnd;
      reader.readMessage(value,proto.msp.mnt.MergeWnd.deserializeBinaryFromReader);
      msg.addMergewnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.MergeWnds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.MergeWnds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.MergeWnds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.MergeWnds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMergewndList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.MergeWnd.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MergeWnd mergewnd = 1;
 * @return {!Array<!proto.msp.mnt.MergeWnd>}
 */
proto.msp.mnt.MergeWnds.prototype.getMergewndList = function() {
  return /** @type{!Array<!proto.msp.mnt.MergeWnd>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.MergeWnd, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.MergeWnd>} value
 * @return {!proto.msp.mnt.MergeWnds} returns this
*/
proto.msp.mnt.MergeWnds.prototype.setMergewndList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.MergeWnd=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.MergeWnd}
 */
proto.msp.mnt.MergeWnds.prototype.addMergewnd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.MergeWnd, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.MergeWnds} returns this
 */
proto.msp.mnt.MergeWnds.prototype.clearMergewndList = function() {
  return this.setMergewndList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Rect.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Rect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Rect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Rect.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    w: jspb.Message.getFieldWithDefault(msg, 3, 0),
    h: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Rect}
 */
proto.msp.mnt.Rect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Rect;
  return proto.msp.mnt.Rect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Rect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Rect}
 */
proto.msp.mnt.Rect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setW(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Rect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Rect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Rect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Rect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getW();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getH();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 x = 1;
 * @return {number}
 */
proto.msp.mnt.Rect.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Rect} returns this
 */
proto.msp.mnt.Rect.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 y = 2;
 * @return {number}
 */
proto.msp.mnt.Rect.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Rect} returns this
 */
proto.msp.mnt.Rect.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 w = 3;
 * @return {number}
 */
proto.msp.mnt.Rect.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Rect} returns this
 */
proto.msp.mnt.Rect.prototype.setW = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 h = 4;
 * @return {number}
 */
proto.msp.mnt.Rect.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Rect} returns this
 */
proto.msp.mnt.Rect.prototype.setH = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Window.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Window.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Window} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Window.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sceneid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    srcid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    layout: (f = msg.getLayout()) && proto.msp.mnt.Rect.toObject(includeInstance, f),
    style: jspb.Message.getFieldWithDefault(msg, 6, 0),
    audio: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    layer: jspb.Message.getFieldWithDefault(msg, 8, 0),
    iscut: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    cut: (f = msg.getCut()) && proto.msp.mnt.Rect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Window}
 */
proto.msp.mnt.Window.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Window;
  return proto.msp.mnt.Window.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Window} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Window}
 */
proto.msp.mnt.Window.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSceneid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSrcid(value);
      break;
    case 5:
      var value = new proto.msp.mnt.Rect;
      reader.readMessage(value,proto.msp.mnt.Rect.deserializeBinaryFromReader);
      msg.setLayout(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStyle(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAudio(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLayer(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscut(value);
      break;
    case 10:
      var value = new proto.msp.mnt.Rect;
      reader.readMessage(value,proto.msp.mnt.Rect.deserializeBinaryFromReader);
      msg.setCut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Window.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Window.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Window} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Window.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getSrcid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getLayout();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.msp.mnt.Rect.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getAudio();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLayer();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getIscut();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCut();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.msp.mnt.Rect.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 sceneid = 2;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 srcid = 4;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getSrcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setSrcid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Rect layout = 5;
 * @return {?proto.msp.mnt.Rect}
 */
proto.msp.mnt.Window.prototype.getLayout = function() {
  return /** @type{?proto.msp.mnt.Rect} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Rect, 5));
};


/**
 * @param {?proto.msp.mnt.Rect|undefined} value
 * @return {!proto.msp.mnt.Window} returns this
*/
proto.msp.mnt.Window.prototype.setLayout = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.clearLayout = function() {
  return this.setLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Window.prototype.hasLayout = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional fixed32 style = 6;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getStyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setStyle = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool audio = 7;
 * @return {boolean}
 */
proto.msp.mnt.Window.prototype.getAudio = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setAudio = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional fixed32 layer = 8;
 * @return {number}
 */
proto.msp.mnt.Window.prototype.getLayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setLayer = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool iscut = 9;
 * @return {boolean}
 */
proto.msp.mnt.Window.prototype.getIscut = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.setIscut = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional Rect cut = 10;
 * @return {?proto.msp.mnt.Rect}
 */
proto.msp.mnt.Window.prototype.getCut = function() {
  return /** @type{?proto.msp.mnt.Rect} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Rect, 10));
};


/**
 * @param {?proto.msp.mnt.Rect|undefined} value
 * @return {!proto.msp.mnt.Window} returns this
*/
proto.msp.mnt.Window.prototype.setCut = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Window} returns this
 */
proto.msp.mnt.Window.prototype.clearCut = function() {
  return this.setCut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Window.prototype.hasCut = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.Windows.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Windows.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Windows.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Windows} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Windows.toObject = function(includeInstance, msg) {
  var f, obj = {
    windowList: jspb.Message.toObjectList(msg.getWindowList(),
    proto.msp.mnt.Window.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Windows}
 */
proto.msp.mnt.Windows.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Windows;
  return proto.msp.mnt.Windows.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Windows} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Windows}
 */
proto.msp.mnt.Windows.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Window;
      reader.readMessage(value,proto.msp.mnt.Window.deserializeBinaryFromReader);
      msg.addWindow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Windows.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Windows.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Windows} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Windows.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWindowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.Window.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Window window = 1;
 * @return {!Array<!proto.msp.mnt.Window>}
 */
proto.msp.mnt.Windows.prototype.getWindowList = function() {
  return /** @type{!Array<!proto.msp.mnt.Window>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.Window, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.Window>} value
 * @return {!proto.msp.mnt.Windows} returns this
*/
proto.msp.mnt.Windows.prototype.setWindowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.Window=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.Window}
 */
proto.msp.mnt.Windows.prototype.addWindow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.Window, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.Windows} returns this
 */
proto.msp.mnt.Windows.prototype.clearWindowList = function() {
  return this.setWindowList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.WndDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.WndDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.WndDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.WndDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.msp.mnt.Tswid.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.WndDesc}
 */
proto.msp.mnt.WndDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.WndDesc;
  return proto.msp.mnt.WndDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.WndDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.WndDesc}
 */
proto.msp.mnt.WndDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.WndDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.WndDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.WndDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.WndDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Tswid id = 1;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.WndDesc.prototype.getId = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 1));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.WndDesc} returns this
*/
proto.msp.mnt.WndDesc.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.WndDesc} returns this
 */
proto.msp.mnt.WndDesc.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.WndDesc.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.msp.mnt.WndDesc.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.WndDesc} returns this
 */
proto.msp.mnt.WndDesc.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Reorder.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Reorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Reorder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Reorder.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sceneid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    order: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Reorder}
 */
proto.msp.mnt.Reorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Reorder;
  return proto.msp.mnt.Reorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Reorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Reorder}
 */
proto.msp.mnt.Reorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSceneid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Reorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Reorder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Reorder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Reorder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getSceneid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Reorder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Reorder} returns this
 */
proto.msp.mnt.Reorder.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 sceneid = 2;
 * @return {number}
 */
proto.msp.mnt.Reorder.prototype.getSceneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Reorder} returns this
 */
proto.msp.mnt.Reorder.prototype.setSceneid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 tvid = 3;
 * @return {number}
 */
proto.msp.mnt.Reorder.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Reorder} returns this
 */
proto.msp.mnt.Reorder.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 order = 4;
 * @return {number}
 */
proto.msp.mnt.Reorder.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Reorder} returns this
 */
proto.msp.mnt.Reorder.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.Ptz.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.Ptz.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.Ptz} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Ptz.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beid: (f = msg.getBeid()) && proto.msp.mnt.Tswid.toObject(includeInstance, f),
    param: jspb.Message.getFieldWithDefault(msg, 3, 0),
    code: jspb.Message.getFieldWithDefault(msg, 4, 0),
    on: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.Ptz}
 */
proto.msp.mnt.Ptz.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.Ptz;
  return proto.msp.mnt.Ptz.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.Ptz} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.Ptz}
 */
proto.msp.mnt.Ptz.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.msp.mnt.Tswid;
      reader.readMessage(value,proto.msp.mnt.Tswid.deserializeBinaryFromReader);
      msg.setBeid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.Ptz.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.Ptz.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.Ptz} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.Ptz.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBeid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.mnt.Tswid.serializeBinaryToWriter
    );
  }
  f = message.getParam();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getOn();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.Ptz.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Ptz} returns this
 */
proto.msp.mnt.Ptz.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Tswid beid = 2;
 * @return {?proto.msp.mnt.Tswid}
 */
proto.msp.mnt.Ptz.prototype.getBeid = function() {
  return /** @type{?proto.msp.mnt.Tswid} */ (
    jspb.Message.getWrapperField(this, proto.msp.mnt.Tswid, 2));
};


/**
 * @param {?proto.msp.mnt.Tswid|undefined} value
 * @return {!proto.msp.mnt.Ptz} returns this
*/
proto.msp.mnt.Ptz.prototype.setBeid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.mnt.Ptz} returns this
 */
proto.msp.mnt.Ptz.prototype.clearBeid = function() {
  return this.setBeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.mnt.Ptz.prototype.hasBeid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed32 param = 3;
 * @return {number}
 */
proto.msp.mnt.Ptz.prototype.getParam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Ptz} returns this
 */
proto.msp.mnt.Ptz.prototype.setParam = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 code = 4;
 * @return {number}
 */
proto.msp.mnt.Ptz.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Ptz} returns this
 */
proto.msp.mnt.Ptz.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 on = 5;
 * @return {number}
 */
proto.msp.mnt.Ptz.prototype.getOn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.Ptz} returns this
 */
proto.msp.mnt.Ptz.prototype.setOn = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.RealPlay.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.RealPlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.RealPlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RealPlay.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gbid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.RealPlay}
 */
proto.msp.mnt.RealPlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.RealPlay;
  return proto.msp.mnt.RealPlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.RealPlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.RealPlay}
 */
proto.msp.mnt.RealPlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGbid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.RealPlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.RealPlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.RealPlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.RealPlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getGbid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.RealPlay.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.RealPlay} returns this
 */
proto.msp.mnt.RealPlay.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gbid = 2;
 * @return {string}
 */
proto.msp.mnt.RealPlay.prototype.getGbid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RealPlay} returns this
 */
proto.msp.mnt.RealPlay.prototype.setGbid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.msp.mnt.RealPlay.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.RealPlay} returns this
 */
proto.msp.mnt.RealPlay.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PcBdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PcBdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PcBdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcBdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    online: jspb.Message.getFieldWithDefault(msg, 4, 0),
    power: jspb.Message.getFieldWithDefault(msg, 5, 0),
    runtime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PcBdInfo}
 */
proto.msp.mnt.PcBdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PcBdInfo;
  return proto.msp.mnt.PcBdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PcBdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PcBdInfo}
 */
proto.msp.mnt.PcBdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOnline(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPower(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRuntime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PcBdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PcBdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PcBdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcBdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getOnline();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getRuntime();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.mnt.PcBdInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.msp.mnt.PcBdInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 slot = 3;
 * @return {number}
 */
proto.msp.mnt.PcBdInfo.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 online = 4;
 * @return {number}
 */
proto.msp.mnt.PcBdInfo.prototype.getOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setOnline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 power = 5;
 * @return {number}
 */
proto.msp.mnt.PcBdInfo.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 runtime = 6;
 * @return {number}
 */
proto.msp.mnt.PcBdInfo.prototype.getRuntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfo} returns this
 */
proto.msp.mnt.PcBdInfo.prototype.setRuntime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.mnt.PcBdInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.mnt.PcBdInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.mnt.PcBdInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.mnt.PcBdInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcBdInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    pcinfoList: jspb.Message.toObjectList(msg.getPcinfoList(),
    proto.msp.mnt.PcBdInfo.toObject, includeInstance),
    pcid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.mnt.PcBdInfoList}
 */
proto.msp.mnt.PcBdInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.mnt.PcBdInfoList;
  return proto.msp.mnt.PcBdInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.mnt.PcBdInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.mnt.PcBdInfoList}
 */
proto.msp.mnt.PcBdInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.mnt.PcBdInfo;
      reader.readMessage(value,proto.msp.mnt.PcBdInfo.deserializeBinaryFromReader);
      msg.addPcinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPcid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.mnt.PcBdInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.mnt.PcBdInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.mnt.PcBdInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.mnt.PcBdInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.mnt.PcBdInfo.serializeBinaryToWriter
    );
  }
  f = message.getPcid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * repeated PcBdInfo pcinfo = 1;
 * @return {!Array<!proto.msp.mnt.PcBdInfo>}
 */
proto.msp.mnt.PcBdInfoList.prototype.getPcinfoList = function() {
  return /** @type{!Array<!proto.msp.mnt.PcBdInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.mnt.PcBdInfo, 1));
};


/**
 * @param {!Array<!proto.msp.mnt.PcBdInfo>} value
 * @return {!proto.msp.mnt.PcBdInfoList} returns this
*/
proto.msp.mnt.PcBdInfoList.prototype.setPcinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.mnt.PcBdInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.mnt.PcBdInfo}
 */
proto.msp.mnt.PcBdInfoList.prototype.addPcinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.mnt.PcBdInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.mnt.PcBdInfoList} returns this
 */
proto.msp.mnt.PcBdInfoList.prototype.clearPcinfoList = function() {
  return this.setPcinfoList([]);
};


/**
 * optional fixed32 pcid = 2;
 * @return {number}
 */
proto.msp.mnt.PcBdInfoList.prototype.getPcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.mnt.PcBdInfoList} returns this
 */
proto.msp.mnt.PcBdInfoList.prototype.setPcid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.msp.mnt.EDATAST = {
  EDTOK: 0,
  EDTTOKEN: 1,
  EDTLINK: 2,
  EDTMSG: 3
};

/**
 * @enum {number}
 */
proto.msp.mnt.EDEVTYPE = {
  EDEVALL: 0,
  EDEVASVR: 2,
  EDEVIN: 3,
  EDEVOUT: 4,
  EDEVBOX: 6,
  EDEVTX: 7,
  EDEVRX: 8,
  EDEVDEC: 9,
  EDEVVSVR: 15,
  EDEVNMC: 16,
  EDEV1837: 17,
  EDEVMPU: 18,
  EDEVDANTE: 19
};

/**
 * @enum {number}
 */
proto.msp.mnt.EMMETH = {
  EMREBOOT: 0,
  EMRESTORE: 1,
  EMSETBOX: 2,
  EMUPGRADE: 3
};

/**
 * @enum {number}
 */
proto.msp.mnt.ELICENCEST = {
  ELICNONE: 0,
  ELICNOT: 20093,
  ELICEXP: 20094,
  ELICTYPEERR: 20095,
  ELICEHOSTERR: 20096,
  ELICEDATAERR: 20097
};

/**
 * @enum {number}
 */
proto.msp.mnt.ELICENCEBIT = {
  ELICBITKVM: 0,
  ELICBITVIDEO: 1,
  ELICBITAUDIO: 2,
  ELICBITREST: 3,
  ELICBITZK: 4,
  ELICBITVS: 5
};

/**
 * @enum {number}
 */
proto.msp.mnt.OPCODE = {
  OPTOP: 0,
  OPBOTTOM: 1,
  OPUP: 2,
  OPDOWN: 3,
  OPOPEN: 4,
  OPCLOSE: 5,
  OPCLEAN: 6
};

/**
 * @enum {number}
 */
proto.msp.mnt.PTZCODE = {
  CODENONE: 0,
  ZOOMLARGER: 11,
  ZOOMSMALL: 12,
  FOCUSNEAR: 13,
  FOCUSFAR: 14,
  LIGHTLARGER: 15,
  LIGHTSMALL: 16,
  MOVEUP: 21,
  MOVEDOWN: 22,
  MOVELEFT: 23,
  MOVERIGHT: 24,
  MOVELUP: 25,
  MOVERUP: 26,
  MOVELDOWN: 27,
  MOVERDOWN: 28,
  MOVEAUTO: 29,
  GOTOPRESET: 39,
  SETPRESET: 40
};

goog.object.extend(exports, proto.msp.mnt);
