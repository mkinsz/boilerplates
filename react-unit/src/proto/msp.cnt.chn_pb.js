// source: msp.cnt.chn.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var msp_cnt_pb = require('./msp.cnt_pb.js');
goog.object.extend(proto, msp_cnt_pb);
goog.exportSymbol('proto.msp.cnt.chn.ChnBasic', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnEdid', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnGroup', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnGroupList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnGroupState', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnInfo', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnInfoList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnMode', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnNetEnalbe', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ChnNetEnalbeList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ComCfg', null, global);
goog.exportSymbol('proto.msp.cnt.chn.ComPtz', null, global);
goog.exportSymbol('proto.msp.cnt.chn.Edid', null, global);
goog.exportSymbol('proto.msp.cnt.chn.EdidList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.GroupMemList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.Property', null, global);
goog.exportSymbol('proto.msp.cnt.chn.QueryChn', null, global);
goog.exportSymbol('proto.msp.cnt.chn.QueryChnList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtChn', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtChnList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtChnState', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtChnStateList', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtGroup', null, global);
goog.exportSymbol('proto.msp.cnt.chn.UmtGroupList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.QueryChn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.QueryChn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.QueryChn.displayName = 'proto.msp.cnt.chn.QueryChn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.QueryChnList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.QueryChnList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.QueryChnList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.QueryChnList.displayName = 'proto.msp.cnt.chn.QueryChnList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnBasic.displayName = 'proto.msp.cnt.chn.ChnBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnInfo.displayName = 'proto.msp.cnt.chn.ChnInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.ChnInfoList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.ChnInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnInfoList.displayName = 'proto.msp.cnt.chn.ChnInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnGroup.displayName = 'proto.msp.cnt.chn.ChnGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnGroupState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnGroupState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnGroupState.displayName = 'proto.msp.cnt.chn.ChnGroupState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.ChnGroupList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.ChnGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnGroupList.displayName = 'proto.msp.cnt.chn.ChnGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.GroupMemList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.GroupMemList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.GroupMemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.GroupMemList.displayName = 'proto.msp.cnt.chn.GroupMemList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnNetEnalbe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnNetEnalbe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnNetEnalbe.displayName = 'proto.msp.cnt.chn.ChnNetEnalbe';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnNetEnalbeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.ChnNetEnalbeList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.ChnNetEnalbeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnNetEnalbeList.displayName = 'proto.msp.cnt.chn.ChnNetEnalbeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnMode.displayName = 'proto.msp.cnt.chn.ChnMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ChnEdid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ChnEdid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ChnEdid.displayName = 'proto.msp.cnt.chn.ChnEdid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.Edid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.Edid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.Edid.displayName = 'proto.msp.cnt.chn.Edid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.EdidList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.EdidList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.EdidList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.EdidList.displayName = 'proto.msp.cnt.chn.EdidList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.UmtGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtGroup.displayName = 'proto.msp.cnt.chn.UmtGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.UmtGroupList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.UmtGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtGroupList.displayName = 'proto.msp.cnt.chn.UmtGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtChn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.UmtChn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtChn.displayName = 'proto.msp.cnt.chn.UmtChn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtChnList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.UmtChnList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.UmtChnList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtChnList.displayName = 'proto.msp.cnt.chn.UmtChnList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtChnState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.UmtChnState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtChnState.displayName = 'proto.msp.cnt.chn.UmtChnState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.UmtChnStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.chn.UmtChnStateList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.chn.UmtChnStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.UmtChnStateList.displayName = 'proto.msp.cnt.chn.UmtChnStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ComCfg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ComCfg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ComCfg.displayName = 'proto.msp.cnt.chn.ComCfg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.ComPtz = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.ComPtz, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.ComPtz.displayName = 'proto.msp.cnt.chn.ComPtz';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.chn.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.chn.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.chn.Property.displayName = 'proto.msp.cnt.chn.Property';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.QueryChn.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.QueryChn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.QueryChn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.QueryChn.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    alias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.QueryChn}
 */
proto.msp.cnt.chn.QueryChn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.QueryChn;
  return proto.msp.cnt.chn.QueryChn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.QueryChn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.QueryChn}
 */
proto.msp.cnt.chn.QueryChn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.QueryChn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.QueryChn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.QueryChn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.QueryChn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.QueryChn.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.QueryChn} returns this
 */
proto.msp.cnt.chn.QueryChn.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.msp.cnt.chn.QueryChn.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.QueryChn} returns this
 */
proto.msp.cnt.chn.QueryChn.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string alias = 3;
 * @return {string}
 */
proto.msp.cnt.chn.QueryChn.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.QueryChn} returns this
 */
proto.msp.cnt.chn.QueryChn.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 type = 4;
 * @return {number}
 */
proto.msp.cnt.chn.QueryChn.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.QueryChn} returns this
 */
proto.msp.cnt.chn.QueryChn.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.QueryChnList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.QueryChnList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.QueryChnList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.QueryChnList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.QueryChnList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.cnt.chn.QueryChn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.QueryChnList}
 */
proto.msp.cnt.chn.QueryChnList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.QueryChnList;
  return proto.msp.cnt.chn.QueryChnList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.QueryChnList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.QueryChnList}
 */
proto.msp.cnt.chn.QueryChnList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.QueryChn;
      reader.readMessage(value,proto.msp.cnt.chn.QueryChn.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.QueryChnList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.QueryChnList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.QueryChnList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.QueryChnList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.QueryChn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryChn chn = 1;
 * @return {!Array<!proto.msp.cnt.chn.QueryChn>}
 */
proto.msp.cnt.chn.QueryChnList.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.QueryChn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.QueryChn, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.QueryChn>} value
 * @return {!proto.msp.cnt.chn.QueryChnList} returns this
*/
proto.msp.cnt.chn.QueryChnList.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.QueryChn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.QueryChn}
 */
proto.msp.cnt.chn.QueryChnList.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.QueryChn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.QueryChnList} returns this
 */
proto.msp.cnt.chn.QueryChnList.prototype.clearChnList = function() {
  return this.setChnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chntype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    porttype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    line: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    signal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    hid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    audiotype: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnBasic}
 */
proto.msp.cnt.chn.ChnBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnBasic;
  return proto.msp.cnt.chn.ChnBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnBasic}
 */
proto.msp.cnt.chn.ChnBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChntype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPorttype(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLine(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignal(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAudiotype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getChntype();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getPorttype();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLine();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSignal();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAudiotype();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 chntype = 3;
 * @return {number}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getChntype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setChntype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 porttype = 4;
 * @return {number}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getPorttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setPorttype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool online = 5;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool line = 6;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getLine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setLine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool signal = 7;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getSignal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setSignal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string hid = 8;
 * @return {string}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setHid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 audiotype = 9;
 * @return {number}
 */
proto.msp.cnt.chn.ChnBasic.prototype.getAudiotype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnBasic} returns this
 */
proto.msp.cnt.chn.ChnBasic.prototype.setAudiotype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.msp.cnt.chn.ChnBasic.toObject(includeInstance, f),
    resw: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resh: jspb.Message.getFieldWithDefault(msg, 3, 0),
    streamnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    avsync: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    aid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    anum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    astate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ause: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    state: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnInfo}
 */
proto.msp.cnt.chn.ChnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnInfo;
  return proto.msp.cnt.chn.ChnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnInfo}
 */
proto.msp.cnt.chn.ChnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.ChnBasic;
      reader.readMessage(value,proto.msp.cnt.chn.ChnBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setResw(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setResh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStreamnum(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvsync(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAstate(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuse(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.cnt.chn.ChnBasic.serializeBinaryToWriter
    );
  }
  f = message.getResw();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getResh();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getStreamnum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getAvsync();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAid();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getAnum();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getAstate();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getAuse();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
};


/**
 * optional ChnBasic base = 1;
 * @return {?proto.msp.cnt.chn.ChnBasic}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.cnt.chn.ChnBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.chn.ChnBasic, 1));
};


/**
 * @param {?proto.msp.cnt.chn.ChnBasic|undefined} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
*/
proto.msp.cnt.chn.ChnInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 resw = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getResw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setResw = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 resh = 3;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getResh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setResh = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 streamnum = 4;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getStreamnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setStreamnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool avsync = 5;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getAvsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setAvsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional fixed32 aid = 6;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setAid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 anum = 7;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getAnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setAnum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 astate = 8;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getAstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setAstate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool ause = 9;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getAuse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setAuse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional fixed32 state = 10;
 * @return {number}
 */
proto.msp.cnt.chn.ChnInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnInfo} returns this
 */
proto.msp.cnt.chn.ChnInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.ChnInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnList: jspb.Message.toObjectList(msg.getChnList(),
    proto.msp.cnt.chn.ChnInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnInfoList}
 */
proto.msp.cnt.chn.ChnInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnInfoList;
  return proto.msp.cnt.chn.ChnInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnInfoList}
 */
proto.msp.cnt.chn.ChnInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.ChnInfo;
      reader.readMessage(value,proto.msp.cnt.chn.ChnInfo.deserializeBinaryFromReader);
      msg.addChn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.ChnInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnInfo chn = 1;
 * @return {!Array<!proto.msp.cnt.chn.ChnInfo>}
 */
proto.msp.cnt.chn.ChnInfoList.prototype.getChnList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.ChnInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.ChnInfo, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.ChnInfo>} value
 * @return {!proto.msp.cnt.chn.ChnInfoList} returns this
*/
proto.msp.cnt.chn.ChnInfoList.prototype.setChnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.ChnInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.ChnInfo}
 */
proto.msp.cnt.chn.ChnInfoList.prototype.addChn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.ChnInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.ChnInfoList} returns this
 */
proto.msp.cnt.chn.ChnInfoList.prototype.clearChnList = function() {
  return this.setChnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    parentid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnGroup}
 */
proto.msp.cnt.chn.ChnGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnGroup;
  return proto.msp.cnt.chn.ChnGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnGroup}
 */
proto.msp.cnt.chn.ChnGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNextid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getNextid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getParentid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.chn.ChnGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.ChnGroup} returns this
 */
proto.msp.cnt.chn.ChnGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ChnGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnGroup} returns this
 */
proto.msp.cnt.chn.ChnGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 nextid = 3;
 * @return {number}
 */
proto.msp.cnt.chn.ChnGroup.prototype.getNextid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnGroup} returns this
 */
proto.msp.cnt.chn.ChnGroup.prototype.setNextid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 parentid = 4;
 * @return {number}
 */
proto.msp.cnt.chn.ChnGroup.prototype.getParentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnGroup} returns this
 */
proto.msp.cnt.chn.ChnGroup.prototype.setParentid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnGroupState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnGroupState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnGroupState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroupState.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.msp.cnt.chn.ChnGroup.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnGroupState}
 */
proto.msp.cnt.chn.ChnGroupState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnGroupState;
  return proto.msp.cnt.chn.ChnGroupState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnGroupState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnGroupState}
 */
proto.msp.cnt.chn.ChnGroupState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.ChnGroup;
      reader.readMessage(value,proto.msp.cnt.chn.ChnGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnGroupState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnGroupState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnGroupState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroupState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.cnt.chn.ChnGroup.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional ChnGroup group = 1;
 * @return {?proto.msp.cnt.chn.ChnGroup}
 */
proto.msp.cnt.chn.ChnGroupState.prototype.getGroup = function() {
  return /** @type{?proto.msp.cnt.chn.ChnGroup} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.chn.ChnGroup, 1));
};


/**
 * @param {?proto.msp.cnt.chn.ChnGroup|undefined} value
 * @return {!proto.msp.cnt.chn.ChnGroupState} returns this
*/
proto.msp.cnt.chn.ChnGroupState.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.chn.ChnGroupState} returns this
 */
proto.msp.cnt.chn.ChnGroupState.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnGroupState.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ChnGroupState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnGroupState} returns this
 */
proto.msp.cnt.chn.ChnGroupState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.ChnGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chngroupList: jspb.Message.toObjectList(msg.getChngroupList(),
    proto.msp.cnt.chn.ChnGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnGroupList}
 */
proto.msp.cnt.chn.ChnGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnGroupList;
  return proto.msp.cnt.chn.ChnGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnGroupList}
 */
proto.msp.cnt.chn.ChnGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.ChnGroup;
      reader.readMessage(value,proto.msp.cnt.chn.ChnGroup.deserializeBinaryFromReader);
      msg.addChngroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChngroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.ChnGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnGroup chngroup = 1;
 * @return {!Array<!proto.msp.cnt.chn.ChnGroup>}
 */
proto.msp.cnt.chn.ChnGroupList.prototype.getChngroupList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.ChnGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.ChnGroup, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.ChnGroup>} value
 * @return {!proto.msp.cnt.chn.ChnGroupList} returns this
*/
proto.msp.cnt.chn.ChnGroupList.prototype.setChngroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.ChnGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.ChnGroup}
 */
proto.msp.cnt.chn.ChnGroupList.prototype.addChngroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.ChnGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.ChnGroupList} returns this
 */
proto.msp.cnt.chn.ChnGroupList.prototype.clearChngroupList = function() {
  return this.setChngroupList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.GroupMemList.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.GroupMemList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.GroupMemList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.GroupMemList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.GroupMemList.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupmenList: jspb.Message.toObjectList(msg.getGroupmenList(),
    msp_cnt_pb.GroupMem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.GroupMemList}
 */
proto.msp.cnt.chn.GroupMemList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.GroupMemList;
  return proto.msp.cnt.chn.GroupMemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.GroupMemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.GroupMemList}
 */
proto.msp.cnt.chn.GroupMemList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 3:
      var value = new msp_cnt_pb.GroupMem;
      reader.readMessage(value,msp_cnt_pb.GroupMem.deserializeBinaryFromReader);
      msg.addGroupmen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.GroupMemList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.GroupMemList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.GroupMemList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.GroupMemList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getGroupmenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      msp_cnt_pb.GroupMem.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.GroupMemList.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.GroupMemList} returns this
 */
proto.msp.cnt.chn.GroupMemList.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.cnt.chn.GroupMemList.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.GroupMemList} returns this
 */
proto.msp.cnt.chn.GroupMemList.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated msp.cnt.GroupMem groupmen = 3;
 * @return {!Array<!proto.msp.cnt.GroupMem>}
 */
proto.msp.cnt.chn.GroupMemList.prototype.getGroupmenList = function() {
  return /** @type{!Array<!proto.msp.cnt.GroupMem>} */ (
    jspb.Message.getRepeatedWrapperField(this, msp_cnt_pb.GroupMem, 3));
};


/**
 * @param {!Array<!proto.msp.cnt.GroupMem>} value
 * @return {!proto.msp.cnt.chn.GroupMemList} returns this
*/
proto.msp.cnt.chn.GroupMemList.prototype.setGroupmenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.cnt.GroupMem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.GroupMem}
 */
proto.msp.cnt.chn.GroupMemList.prototype.addGroupmen = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.cnt.GroupMem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.GroupMemList} returns this
 */
proto.msp.cnt.chn.GroupMemList.prototype.clearGroupmenList = function() {
  return this.setGroupmenList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnNetEnalbe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnNetEnalbe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnNetEnalbe.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnNetEnalbe}
 */
proto.msp.cnt.chn.ChnNetEnalbe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnNetEnalbe;
  return proto.msp.cnt.chn.ChnNetEnalbe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnNetEnalbe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnNetEnalbe}
 */
proto.msp.cnt.chn.ChnNetEnalbe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnNetEnalbe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnNetEnalbe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnNetEnalbe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnNetEnalbe} returns this
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool enable = 2;
 * @return {boolean}
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ChnNetEnalbe} returns this
 */
proto.msp.cnt.chn.ChnNetEnalbe.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.ChnNetEnalbeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnNetEnalbeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnNetEnalbeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnNetEnalbeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    chnnetnableList: jspb.Message.toObjectList(msg.getChnnetnableList(),
    proto.msp.cnt.chn.ChnNetEnalbe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnNetEnalbeList}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnNetEnalbeList;
  return proto.msp.cnt.chn.ChnNetEnalbeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnNetEnalbeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnNetEnalbeList}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.ChnNetEnalbe;
      reader.readMessage(value,proto.msp.cnt.chn.ChnNetEnalbe.deserializeBinaryFromReader);
      msg.addChnnetnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnNetEnalbeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnNetEnalbeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnNetEnalbeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChnnetnableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.ChnNetEnalbe.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChnNetEnalbe chnnetnable = 1;
 * @return {!Array<!proto.msp.cnt.chn.ChnNetEnalbe>}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.getChnnetnableList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.ChnNetEnalbe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.ChnNetEnalbe, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.ChnNetEnalbe>} value
 * @return {!proto.msp.cnt.chn.ChnNetEnalbeList} returns this
*/
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.setChnnetnableList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.ChnNetEnalbe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.ChnNetEnalbe}
 */
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.addChnnetnable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.ChnNetEnalbe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.ChnNetEnalbeList} returns this
 */
proto.msp.cnt.chn.ChnNetEnalbeList.prototype.clearChnnetnableList = function() {
  return this.setChnnetnableList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnMode.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    module: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hdmi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    line: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnMode}
 */
proto.msp.cnt.chn.ChnMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnMode;
  return proto.msp.cnt.chn.ChnMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnMode}
 */
proto.msp.cnt.chn.ChnMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setModule(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHdmi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getModule();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getHdmi();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.ChnMode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnMode} returns this
 */
proto.msp.cnt.chn.ChnMode.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 module = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ChnMode.prototype.getModule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnMode} returns this
 */
proto.msp.cnt.chn.ChnMode.prototype.setModule = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 hdmi = 3;
 * @return {number}
 */
proto.msp.cnt.chn.ChnMode.prototype.getHdmi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnMode} returns this
 */
proto.msp.cnt.chn.ChnMode.prototype.setHdmi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 line = 4;
 * @return {number}
 */
proto.msp.cnt.chn.ChnMode.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnMode} returns this
 */
proto.msp.cnt.chn.ChnMode.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ChnEdid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ChnEdid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ChnEdid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnEdid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    edid: msg.getEdid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ChnEdid}
 */
proto.msp.cnt.chn.ChnEdid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ChnEdid;
  return proto.msp.cnt.chn.ChnEdid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ChnEdid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ChnEdid}
 */
proto.msp.cnt.chn.ChnEdid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEdid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnEdid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ChnEdid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ChnEdid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ChnEdid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEdid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.ChnEdid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ChnEdid} returns this
 */
proto.msp.cnt.chn.ChnEdid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes edid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msp.cnt.chn.ChnEdid.prototype.getEdid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes edid = 2;
 * This is a type-conversion wrapper around `getEdid()`
 * @return {string}
 */
proto.msp.cnt.chn.ChnEdid.prototype.getEdid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEdid()));
};


/**
 * optional bytes edid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEdid()`
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ChnEdid.prototype.getEdid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEdid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.cnt.chn.ChnEdid} returns this
 */
proto.msp.cnt.chn.ChnEdid.prototype.setEdid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.Edid.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.Edid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.Edid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.Edid.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    module: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cfg: msg.getCfg_asB64(),
    desc: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.Edid}
 */
proto.msp.cnt.chn.Edid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.Edid;
  return proto.msp.cnt.chn.Edid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.Edid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.Edid}
 */
proto.msp.cnt.chn.Edid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCfg(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.Edid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.Edid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.Edid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.Edid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCfg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.Edid.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 width = 2;
 * @return {number}
 */
proto.msp.cnt.chn.Edid.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 height = 3;
 * @return {number}
 */
proto.msp.cnt.chn.Edid.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string module = 4;
 * @return {string}
 */
proto.msp.cnt.chn.Edid.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setModule = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes cfg = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msp.cnt.chn.Edid.prototype.getCfg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes cfg = 5;
 * This is a type-conversion wrapper around `getCfg()`
 * @return {string}
 */
proto.msp.cnt.chn.Edid.prototype.getCfg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCfg()));
};


/**
 * optional bytes cfg = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCfg()`
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.Edid.prototype.getCfg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCfg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setCfg = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string desc = 6;
 * @return {string}
 */
proto.msp.cnt.chn.Edid.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.Edid} returns this
 */
proto.msp.cnt.chn.Edid.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.EdidList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.EdidList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.EdidList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.EdidList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.EdidList.toObject = function(includeInstance, msg) {
  var f, obj = {
    edidList: jspb.Message.toObjectList(msg.getEdidList(),
    proto.msp.cnt.chn.Edid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.EdidList}
 */
proto.msp.cnt.chn.EdidList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.EdidList;
  return proto.msp.cnt.chn.EdidList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.EdidList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.EdidList}
 */
proto.msp.cnt.chn.EdidList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.Edid;
      reader.readMessage(value,proto.msp.cnt.chn.Edid.deserializeBinaryFromReader);
      msg.addEdid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.EdidList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.EdidList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.EdidList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.EdidList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdidList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.Edid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Edid edid = 1;
 * @return {!Array<!proto.msp.cnt.chn.Edid>}
 */
proto.msp.cnt.chn.EdidList.prototype.getEdidList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.Edid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.Edid, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.Edid>} value
 * @return {!proto.msp.cnt.chn.EdidList} returns this
*/
proto.msp.cnt.chn.EdidList.prototype.setEdidList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.Edid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.Edid}
 */
proto.msp.cnt.chn.EdidList.prototype.addEdid = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.Edid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.EdidList} returns this
 */
proto.msp.cnt.chn.EdidList.prototype.clearEdidList = function() {
  return this.setEdidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    umtid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtGroup}
 */
proto.msp.cnt.chn.UmtGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtGroup;
  return proto.msp.cnt.chn.UmtGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtGroup}
 */
proto.msp.cnt.chn.UmtGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUmtid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUmtid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.chn.UmtGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtGroup} returns this
 */
proto.msp.cnt.chn.UmtGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 umtid = 2;
 * @return {number}
 */
proto.msp.cnt.chn.UmtGroup.prototype.getUmtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.UmtGroup} returns this
 */
proto.msp.cnt.chn.UmtGroup.prototype.setUmtid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.msp.cnt.chn.UmtGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtGroup} returns this
 */
proto.msp.cnt.chn.UmtGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string parentid = 4;
 * @return {string}
 */
proto.msp.cnt.chn.UmtGroup.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtGroup} returns this
 */
proto.msp.cnt.chn.UmtGroup.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string domain = 5;
 * @return {string}
 */
proto.msp.cnt.chn.UmtGroup.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtGroup} returns this
 */
proto.msp.cnt.chn.UmtGroup.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.UmtGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtgroupList: jspb.Message.toObjectList(msg.getUmtgroupList(),
    proto.msp.cnt.chn.UmtGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtGroupList}
 */
proto.msp.cnt.chn.UmtGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtGroupList;
  return proto.msp.cnt.chn.UmtGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtGroupList}
 */
proto.msp.cnt.chn.UmtGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.UmtGroup;
      reader.readMessage(value,proto.msp.cnt.chn.UmtGroup.deserializeBinaryFromReader);
      msg.addUmtgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.UmtGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtGroup umtgroup = 1;
 * @return {!Array<!proto.msp.cnt.chn.UmtGroup>}
 */
proto.msp.cnt.chn.UmtGroupList.prototype.getUmtgroupList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.UmtGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.UmtGroup, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.UmtGroup>} value
 * @return {!proto.msp.cnt.chn.UmtGroupList} returns this
*/
proto.msp.cnt.chn.UmtGroupList.prototype.setUmtgroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.UmtGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.UmtGroup}
 */
proto.msp.cnt.chn.UmtGroupList.prototype.addUmtgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.UmtGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.UmtGroupList} returns this
 */
proto.msp.cnt.chn.UmtGroupList.prototype.clearUmtgroupList = function() {
  return this.setUmtgroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtChn.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtChn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtChn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChn.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gbid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parentid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    ip: jspb.Message.getFieldWithDefault(msg, 7, ""),
    firm: jspb.Message.getFieldWithDefault(msg, 8, ""),
    longitude: jspb.Message.getFieldWithDefault(msg, 9, ""),
    latitude: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtChn}
 */
proto.msp.cnt.chn.UmtChn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtChn;
  return proto.msp.cnt.chn.UmtChn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtChn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtChn}
 */
proto.msp.cnt.chn.UmtChn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUmtid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGbid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtChn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtChn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtChn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGbid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFirm();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLongitude();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLatitude();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional fixed32 umtid = 1;
 * @return {number}
 */
proto.msp.cnt.chn.UmtChn.prototype.getUmtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setUmtid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.chn.UmtChn.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gbid = 4;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getGbid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setGbid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parentid = 5;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setParentid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool online = 6;
 * @return {boolean}
 */
proto.msp.cnt.chn.UmtChn.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string ip = 7;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string firm = 8;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getFirm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setFirm = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string longitude = 9;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string latitude = 10;
 * @return {string}
 */
proto.msp.cnt.chn.UmtChn.prototype.getLatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.chn.UmtChn} returns this
 */
proto.msp.cnt.chn.UmtChn.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.UmtChnList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtChnList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtChnList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtChnList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtchnList: jspb.Message.toObjectList(msg.getUmtchnList(),
    proto.msp.cnt.chn.UmtChn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtChnList}
 */
proto.msp.cnt.chn.UmtChnList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtChnList;
  return proto.msp.cnt.chn.UmtChnList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtChnList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtChnList}
 */
proto.msp.cnt.chn.UmtChnList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.UmtChn;
      reader.readMessage(value,proto.msp.cnt.chn.UmtChn.deserializeBinaryFromReader);
      msg.addUmtchn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtChnList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtChnList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtChnList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtchnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.UmtChn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtChn umtchn = 1;
 * @return {!Array<!proto.msp.cnt.chn.UmtChn>}
 */
proto.msp.cnt.chn.UmtChnList.prototype.getUmtchnList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.UmtChn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.UmtChn, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.UmtChn>} value
 * @return {!proto.msp.cnt.chn.UmtChnList} returns this
*/
proto.msp.cnt.chn.UmtChnList.prototype.setUmtchnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.UmtChn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.UmtChn}
 */
proto.msp.cnt.chn.UmtChnList.prototype.addUmtchn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.UmtChn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.UmtChnList} returns this
 */
proto.msp.cnt.chn.UmtChnList.prototype.clearUmtchnList = function() {
  return this.setUmtchnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtChnState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtChnState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtChnState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnState.toObject = function(includeInstance, msg) {
  var f, obj = {
    dev: (f = msg.getDev()) && proto.msp.cnt.chn.UmtChn.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtChnState}
 */
proto.msp.cnt.chn.UmtChnState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtChnState;
  return proto.msp.cnt.chn.UmtChnState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtChnState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtChnState}
 */
proto.msp.cnt.chn.UmtChnState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.UmtChn;
      reader.readMessage(value,proto.msp.cnt.chn.UmtChn.deserializeBinaryFromReader);
      msg.setDev(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtChnState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtChnState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtChnState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDev();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.cnt.chn.UmtChn.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional UmtChn dev = 1;
 * @return {?proto.msp.cnt.chn.UmtChn}
 */
proto.msp.cnt.chn.UmtChnState.prototype.getDev = function() {
  return /** @type{?proto.msp.cnt.chn.UmtChn} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.chn.UmtChn, 1));
};


/**
 * @param {?proto.msp.cnt.chn.UmtChn|undefined} value
 * @return {!proto.msp.cnt.chn.UmtChnState} returns this
*/
proto.msp.cnt.chn.UmtChnState.prototype.setDev = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.chn.UmtChnState} returns this
 */
proto.msp.cnt.chn.UmtChnState.prototype.clearDev = function() {
  return this.setDev(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.chn.UmtChnState.prototype.hasDev = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 state = 2;
 * @return {number}
 */
proto.msp.cnt.chn.UmtChnState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.UmtChnState} returns this
 */
proto.msp.cnt.chn.UmtChnState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.chn.UmtChnStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.UmtChnStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.UmtChnStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.UmtChnStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    umtchnstateList: jspb.Message.toObjectList(msg.getUmtchnstateList(),
    proto.msp.cnt.chn.UmtChnState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.UmtChnStateList}
 */
proto.msp.cnt.chn.UmtChnStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.UmtChnStateList;
  return proto.msp.cnt.chn.UmtChnStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.UmtChnStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.UmtChnStateList}
 */
proto.msp.cnt.chn.UmtChnStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.chn.UmtChnState;
      reader.readMessage(value,proto.msp.cnt.chn.UmtChnState.deserializeBinaryFromReader);
      msg.addUmtchnstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.UmtChnStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.UmtChnStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.UmtChnStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.UmtChnStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUmtchnstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.chn.UmtChnState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UmtChnState umtchnstate = 1;
 * @return {!Array<!proto.msp.cnt.chn.UmtChnState>}
 */
proto.msp.cnt.chn.UmtChnStateList.prototype.getUmtchnstateList = function() {
  return /** @type{!Array<!proto.msp.cnt.chn.UmtChnState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.chn.UmtChnState, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.chn.UmtChnState>} value
 * @return {!proto.msp.cnt.chn.UmtChnStateList} returns this
*/
proto.msp.cnt.chn.UmtChnStateList.prototype.setUmtchnstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.chn.UmtChnState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.chn.UmtChnState}
 */
proto.msp.cnt.chn.UmtChnStateList.prototype.addUmtchnstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.chn.UmtChnState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.chn.UmtChnStateList} returns this
 */
proto.msp.cnt.chn.UmtChnStateList.prototype.clearUmtchnstateList = function() {
  return this.setUmtchnstateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ComCfg.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ComCfg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ComCfg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ComCfg.toObject = function(includeInstance, msg) {
  var f, obj = {
    proto: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    databits: jspb.Message.getFieldWithDefault(msg, 5, 0),
    stopbits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    parity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    baudrate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    id: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ComCfg}
 */
proto.msp.cnt.chn.ComCfg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ComCfg;
  return proto.msp.cnt.chn.ComCfg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ComCfg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ComCfg}
 */
proto.msp.cnt.chn.ComCfg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setProto(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDatabits(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStopbits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setParity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBaudrate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ComCfg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ComCfg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ComCfg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ComCfg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProto();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getState();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDatabits();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getStopbits();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getParity();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getBaudrate();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional fixed32 proto = 1;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getProto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setProto = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 port = 3;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool state = 4;
 * @return {boolean}
 */
proto.msp.cnt.chn.ComCfg.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional fixed32 databits = 5;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getDatabits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setDatabits = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 stopbits = 6;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getStopbits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setStopbits = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 parity = 7;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getParity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setParity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 baudrate = 8;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getBaudrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setBaudrate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 id = 9;
 * @return {number}
 */
proto.msp.cnt.chn.ComCfg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComCfg} returns this
 */
proto.msp.cnt.chn.ComCfg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.ComPtz.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.ComPtz.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.ComPtz} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ComPtz.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.ComPtz}
 */
proto.msp.cnt.chn.ComPtz.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.ComPtz;
  return proto.msp.cnt.chn.ComPtz.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.ComPtz} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.ComPtz}
 */
proto.msp.cnt.chn.ComPtz.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.ComPtz.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.ComPtz.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.ComPtz} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.ComPtz.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.ComPtz.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.ComPtz} returns this
 */
proto.msp.cnt.chn.ComPtz.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool enable = 2;
 * @return {boolean}
 */
proto.msp.cnt.chn.ComPtz.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.chn.ComPtz} returns this
 */
proto.msp.cnt.chn.ComPtz.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.chn.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.chn.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.chn.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.chn.Property}
 */
proto.msp.cnt.chn.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.chn.Property;
  return proto.msp.cnt.chn.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.chn.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.chn.Property}
 */
proto.msp.cnt.chn.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.chn.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.chn.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.chn.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.chn.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.chn.Property.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.Property} returns this
 */
proto.msp.cnt.chn.Property.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 type = 2;
 * @return {number}
 */
proto.msp.cnt.chn.Property.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.chn.Property} returns this
 */
proto.msp.cnt.chn.Property.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.msp.cnt.chn);
