// source: msp.cnt.tv.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var msp_cnt_pb = require('./msp.cnt_pb.js');
goog.object.extend(proto, msp_cnt_pb);
goog.exportSymbol('proto.msp.cnt.tv.BackState', null, global);
goog.exportSymbol('proto.msp.cnt.tv.BackTrans', null, global);
goog.exportSymbol('proto.msp.cnt.tv.BackTransList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OSD', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OSDCtrl', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OSDList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OsdFile', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OsdStatus', null, global);
goog.exportSymbol('proto.msp.cnt.tv.OsdStatusList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvBack', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvBackList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvBasic', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvCell', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvCellList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvInfo', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvList', null, global);
goog.exportSymbol('proto.msp.cnt.tv.TvState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvBasic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.TvBasic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvBasic.displayName = 'proto.msp.cnt.tv.TvBasic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.TvList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.TvList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvList.displayName = 'proto.msp.cnt.tv.TvList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvCell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.TvCell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvCell.displayName = 'proto.msp.cnt.tv.TvCell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvCellList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.TvCellList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.TvCellList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvCellList.displayName = 'proto.msp.cnt.tv.TvCellList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.TvInfo.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.TvInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvInfo.displayName = 'proto.msp.cnt.tv.TvInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvBack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.TvBack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvBack.displayName = 'proto.msp.cnt.tv.TvBack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvBackList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.TvBackList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.TvBackList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvBackList.displayName = 'proto.msp.cnt.tv.TvBackList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.BackTrans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.BackTrans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.BackTrans.displayName = 'proto.msp.cnt.tv.BackTrans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.BackTransList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.BackTransList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.BackTransList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.BackTransList.displayName = 'proto.msp.cnt.tv.BackTransList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.BackState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.BackState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.BackState.displayName = 'proto.msp.cnt.tv.BackState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OSD = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.OSD, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OSD.displayName = 'proto.msp.cnt.tv.OSD';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OSDList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.OSDList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.OSDList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OSDList.displayName = 'proto.msp.cnt.tv.OSDList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OsdStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.OsdStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OsdStatus.displayName = 'proto.msp.cnt.tv.OsdStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OsdStatusList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.cnt.tv.OsdStatusList.repeatedFields_, null);
};
goog.inherits(proto.msp.cnt.tv.OsdStatusList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OsdStatusList.displayName = 'proto.msp.cnt.tv.OsdStatusList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OsdFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.OsdFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OsdFile.displayName = 'proto.msp.cnt.tv.OsdFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.OSDCtrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.OSDCtrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.OSDCtrl.displayName = 'proto.msp.cnt.tv.OSDCtrl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.cnt.tv.TvState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.cnt.tv.TvState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.cnt.tv.TvState.displayName = 'proto.msp.cnt.tv.TvState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvBasic.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvBasic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvBasic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBasic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    kvm: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    rate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    row: jspb.Message.getFieldWithDefault(msg, 5, 0),
    col: jspb.Message.getFieldWithDefault(msg, 6, 0),
    width: jspb.Message.getFieldWithDefault(msg, 7, 0),
    height: jspb.Message.getFieldWithDefault(msg, 8, 0),
    cellnum: jspb.Message.getFieldWithDefault(msg, 9, 0),
    backid: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvBasic}
 */
proto.msp.cnt.tv.TvBasic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvBasic;
  return proto.msp.cnt.tv.TvBasic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvBasic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvBasic}
 */
proto.msp.cnt.tv.TvBasic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKvm(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCol(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setCellnum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setBackid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvBasic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvBasic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvBasic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBasic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getKvm();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getRow();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getCellnum();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getBackid();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.cnt.tv.TvBasic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool kvm = 3;
 * @return {boolean}
 */
proto.msp.cnt.tv.TvBasic.prototype.getKvm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setKvm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional fixed32 rate = 4;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 row = 5;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 col = 6;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setCol = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 width = 7;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 height = 8;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 cellnum = 9;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getCellnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setCellnum = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 backid = 10;
 * @return {number}
 */
proto.msp.cnt.tv.TvBasic.prototype.getBackid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBasic} returns this
 */
proto.msp.cnt.tv.TvBasic.prototype.setBackid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.TvList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvbasicList: jspb.Message.toObjectList(msg.getTvbasicList(),
    proto.msp.cnt.tv.TvBasic.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvList}
 */
proto.msp.cnt.tv.TvList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvList;
  return proto.msp.cnt.tv.TvList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvList}
 */
proto.msp.cnt.tv.TvList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.TvBasic;
      reader.readMessage(value,proto.msp.cnt.tv.TvBasic.deserializeBinaryFromReader);
      msg.addTvbasic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvbasicList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.tv.TvBasic.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvBasic tvbasic = 1;
 * @return {!Array<!proto.msp.cnt.tv.TvBasic>}
 */
proto.msp.cnt.tv.TvList.prototype.getTvbasicList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.TvBasic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.TvBasic, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.TvBasic>} value
 * @return {!proto.msp.cnt.tv.TvList} returns this
*/
proto.msp.cnt.tv.TvList.prototype.setTvbasicList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.tv.TvBasic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.TvBasic}
 */
proto.msp.cnt.tv.TvList.prototype.addTvbasic = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.tv.TvBasic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.TvList} returns this
 */
proto.msp.cnt.tv.TvList.prototype.clearTvbasicList = function() {
  return this.setTvbasicList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvCell.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvCell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvCell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvCell.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chnid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvCell}
 */
proto.msp.cnt.tv.TvCell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvCell;
  return proto.msp.cnt.tv.TvCell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvCell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvCell}
 */
proto.msp.cnt.tv.TvCell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChnid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvCell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvCell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvCell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvCell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getChnid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getHight();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 chnid = 2;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getChnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setChnid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 startx = 3;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 starty = 4;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 width = 5;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 hight = 6;
 * @return {number}
 */
proto.msp.cnt.tv.TvCell.prototype.getHight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvCell} returns this
 */
proto.msp.cnt.tv.TvCell.prototype.setHight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.TvCellList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvCellList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvCellList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvCellList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvCellList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvcellList: jspb.Message.toObjectList(msg.getTvcellList(),
    proto.msp.cnt.tv.TvCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvCellList}
 */
proto.msp.cnt.tv.TvCellList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvCellList;
  return proto.msp.cnt.tv.TvCellList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvCellList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvCellList}
 */
proto.msp.cnt.tv.TvCellList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.TvCell;
      reader.readMessage(value,proto.msp.cnt.tv.TvCell.deserializeBinaryFromReader);
      msg.addTvcell(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvCellList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvCellList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvCellList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvCellList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvcellList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.tv.TvCell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvCell tvcell = 1;
 * @return {!Array<!proto.msp.cnt.tv.TvCell>}
 */
proto.msp.cnt.tv.TvCellList.prototype.getTvcellList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.TvCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.TvCell, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.TvCell>} value
 * @return {!proto.msp.cnt.tv.TvCellList} returns this
*/
proto.msp.cnt.tv.TvCellList.prototype.setTvcellList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.tv.TvCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.TvCell}
 */
proto.msp.cnt.tv.TvCellList.prototype.addTvcell = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.tv.TvCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.TvCellList} returns this
 */
proto.msp.cnt.tv.TvCellList.prototype.clearTvcellList = function() {
  return this.setTvcellList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.TvInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.msp.cnt.tv.TvBasic.toObject(includeInstance, f),
    pb_package: jspb.Message.getFieldWithDefault(msg, 2, 0),
    celllsList: jspb.Message.toObjectList(msg.getCelllsList(),
    proto.msp.cnt.tv.TvCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvInfo}
 */
proto.msp.cnt.tv.TvInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvInfo;
  return proto.msp.cnt.tv.TvInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvInfo}
 */
proto.msp.cnt.tv.TvInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.TvBasic;
      reader.readMessage(value,proto.msp.cnt.tv.TvBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPackage(value);
      break;
    case 3:
      var value = new proto.msp.cnt.tv.TvCell;
      reader.readMessage(value,proto.msp.cnt.tv.TvCell.deserializeBinaryFromReader);
      msg.addCellls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msp.cnt.tv.TvBasic.serializeBinaryToWriter
    );
  }
  f = message.getPackage();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getCelllsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msp.cnt.tv.TvCell.serializeBinaryToWriter
    );
  }
};


/**
 * optional TvBasic base = 1;
 * @return {?proto.msp.cnt.tv.TvBasic}
 */
proto.msp.cnt.tv.TvInfo.prototype.getBase = function() {
  return /** @type{?proto.msp.cnt.tv.TvBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.tv.TvBasic, 1));
};


/**
 * @param {?proto.msp.cnt.tv.TvBasic|undefined} value
 * @return {!proto.msp.cnt.tv.TvInfo} returns this
*/
proto.msp.cnt.tv.TvInfo.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.tv.TvInfo} returns this
 */
proto.msp.cnt.tv.TvInfo.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.tv.TvInfo.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed32 package = 2;
 * @return {number}
 */
proto.msp.cnt.tv.TvInfo.prototype.getPackage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvInfo} returns this
 */
proto.msp.cnt.tv.TvInfo.prototype.setPackage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TvCell cellls = 3;
 * @return {!Array<!proto.msp.cnt.tv.TvCell>}
 */
proto.msp.cnt.tv.TvInfo.prototype.getCelllsList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.TvCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.TvCell, 3));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.TvCell>} value
 * @return {!proto.msp.cnt.tv.TvInfo} returns this
*/
proto.msp.cnt.tv.TvInfo.prototype.setCelllsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msp.cnt.tv.TvCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.TvCell}
 */
proto.msp.cnt.tv.TvInfo.prototype.addCellls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msp.cnt.tv.TvCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.TvInfo} returns this
 */
proto.msp.cnt.tv.TvInfo.prototype.clearCelllsList = function() {
  return this.setCelllsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvBack.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvBack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvBack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBack.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    startx: jspb.Message.getFieldWithDefault(msg, 6, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 7, 0),
    width: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvBack}
 */
proto.msp.cnt.tv.TvBack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvBack;
  return proto.msp.cnt.tv.TvBack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvBack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvBack}
 */
proto.msp.cnt.tv.TvBack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvBack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvBack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvBack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getExist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool exist = 2;
 * @return {boolean}
 */
proto.msp.cnt.tv.TvBack.prototype.getExist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setExist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional fixed32 state = 3;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 tvid = 4;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.msp.cnt.tv.TvBack.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed32 startx = 6;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 starty = 7;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 width = 8;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 height = 9;
 * @return {number}
 */
proto.msp.cnt.tv.TvBack.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.TvBack} returns this
 */
proto.msp.cnt.tv.TvBack.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.TvBackList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvBackList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvBackList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvBackList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBackList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvbackList: jspb.Message.toObjectList(msg.getTvbackList(),
    proto.msp.cnt.tv.TvBack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvBackList}
 */
proto.msp.cnt.tv.TvBackList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvBackList;
  return proto.msp.cnt.tv.TvBackList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvBackList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvBackList}
 */
proto.msp.cnt.tv.TvBackList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.TvBack;
      reader.readMessage(value,proto.msp.cnt.tv.TvBack.deserializeBinaryFromReader);
      msg.addTvback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvBackList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvBackList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvBackList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvBackList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvbackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.tv.TvBack.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TvBack tvback = 1;
 * @return {!Array<!proto.msp.cnt.tv.TvBack>}
 */
proto.msp.cnt.tv.TvBackList.prototype.getTvbackList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.TvBack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.TvBack, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.TvBack>} value
 * @return {!proto.msp.cnt.tv.TvBackList} returns this
*/
proto.msp.cnt.tv.TvBackList.prototype.setTvbackList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.tv.TvBack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.TvBack}
 */
proto.msp.cnt.tv.TvBackList.prototype.addTvback = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.tv.TvBack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.TvBackList} returns this
 */
proto.msp.cnt.tv.TvBackList.prototype.clearTvbackList = function() {
  return this.setTvbackList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.BackTrans.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.BackTrans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.BackTrans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackTrans.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tvid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    no: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.BackTrans}
 */
proto.msp.cnt.tv.BackTrans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.BackTrans;
  return proto.msp.cnt.tv.BackTrans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.BackTrans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.BackTrans}
 */
proto.msp.cnt.tv.BackTrans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setNo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.BackTrans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.BackTrans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.BackTrans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackTrans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getNo();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.BackTrans.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.BackTrans} returns this
 */
proto.msp.cnt.tv.BackTrans.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 tvid = 2;
 * @return {number}
 */
proto.msp.cnt.tv.BackTrans.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.BackTrans} returns this
 */
proto.msp.cnt.tv.BackTrans.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 no = 3;
 * @return {number}
 */
proto.msp.cnt.tv.BackTrans.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.BackTrans} returns this
 */
proto.msp.cnt.tv.BackTrans.prototype.setNo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.msp.cnt.tv.BackTrans.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.tv.BackTrans} returns this
 */
proto.msp.cnt.tv.BackTrans.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.BackTransList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.BackTransList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.BackTransList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.BackTransList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackTransList.toObject = function(includeInstance, msg) {
  var f, obj = {
    backtransList: jspb.Message.toObjectList(msg.getBacktransList(),
    proto.msp.cnt.tv.BackTrans.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.BackTransList}
 */
proto.msp.cnt.tv.BackTransList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.BackTransList;
  return proto.msp.cnt.tv.BackTransList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.BackTransList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.BackTransList}
 */
proto.msp.cnt.tv.BackTransList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.BackTrans;
      reader.readMessage(value,proto.msp.cnt.tv.BackTrans.deserializeBinaryFromReader);
      msg.addBacktrans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.BackTransList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.BackTransList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.BackTransList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackTransList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBacktransList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.tv.BackTrans.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BackTrans backtrans = 1;
 * @return {!Array<!proto.msp.cnt.tv.BackTrans>}
 */
proto.msp.cnt.tv.BackTransList.prototype.getBacktransList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.BackTrans>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.BackTrans, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.BackTrans>} value
 * @return {!proto.msp.cnt.tv.BackTransList} returns this
*/
proto.msp.cnt.tv.BackTransList.prototype.setBacktransList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.tv.BackTrans=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.BackTrans}
 */
proto.msp.cnt.tv.BackTransList.prototype.addBacktrans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.tv.BackTrans, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.BackTransList} returns this
 */
proto.msp.cnt.tv.BackTransList.prototype.clearBacktransList = function() {
  return this.setBacktransList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.BackState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.BackState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.BackState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    back: (f = msg.getBack()) && proto.msp.cnt.tv.TvBack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.BackState}
 */
proto.msp.cnt.tv.BackState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.BackState;
  return proto.msp.cnt.tv.BackState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.BackState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.BackState}
 */
proto.msp.cnt.tv.BackState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.cnt.tv.TvBack;
      reader.readMessage(value,proto.msp.cnt.tv.TvBack.deserializeBinaryFromReader);
      msg.setBack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.BackState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.BackState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.BackState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.BackState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.cnt.tv.TvBack.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 state = 1;
 * @return {number}
 */
proto.msp.cnt.tv.BackState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.BackState} returns this
 */
proto.msp.cnt.tv.BackState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TvBack back = 2;
 * @return {?proto.msp.cnt.tv.TvBack}
 */
proto.msp.cnt.tv.BackState.prototype.getBack = function() {
  return /** @type{?proto.msp.cnt.tv.TvBack} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.tv.TvBack, 2));
};


/**
 * @param {?proto.msp.cnt.tv.TvBack|undefined} value
 * @return {!proto.msp.cnt.tv.BackState} returns this
*/
proto.msp.cnt.tv.BackState.prototype.setBack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.tv.BackState} returns this
 */
proto.msp.cnt.tv.BackState.prototype.clearBack = function() {
  return this.setBack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.tv.BackState.prototype.hasBack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OSD.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OSD.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OSD} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSD.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    visible: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    adaption: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    startx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 5, 0),
    width: jspb.Message.getFieldWithDefault(msg, 6, 0),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fontname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    fontstyle: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fontsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fontform: jspb.Message.getFieldWithDefault(msg, 11, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 12, 0),
    fontclr: jspb.Message.getFieldWithDefault(msg, 13, 0),
    context: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OSD}
 */
proto.msp.cnt.tv.OSD.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OSD;
  return proto.msp.cnt.tv.OSD.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OSD} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OSD}
 */
proto.msp.cnt.tv.OSD.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdaption(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStartx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStarty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFontname(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontstyle(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontsize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontform(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setDirection(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFontclr(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OSD.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OSD.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OSD} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSD.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAdaption();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getFontname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFontstyle();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getFontsize();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getFontform();
  if (f !== 0) {
    writer.writeFixed32(
      11,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0) {
    writer.writeFixed32(
      12,
      f
    );
  }
  f = message.getFontclr();
  if (f !== 0) {
    writer.writeFixed32(
      13,
      f
    );
  }
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool visible = 2;
 * @return {boolean}
 */
proto.msp.cnt.tv.OSD.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setVisible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool adaption = 3;
 * @return {boolean}
 */
proto.msp.cnt.tv.OSD.prototype.getAdaption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setAdaption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional fixed32 startx = 4;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 starty = 5;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 width = 6;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 height = 7;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string fontname = 8;
 * @return {string}
 */
proto.msp.cnt.tv.OSD.prototype.getFontname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setFontname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional fixed32 fontstyle = 9;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getFontstyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setFontstyle = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 fontsize = 10;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getFontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setFontsize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional fixed32 fontform = 11;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getFontform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setFontform = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional fixed32 direction = 12;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setDirection = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional fixed32 fontclr = 13;
 * @return {number}
 */
proto.msp.cnt.tv.OSD.prototype.getFontclr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setFontclr = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string context = 14;
 * @return {string}
 */
proto.msp.cnt.tv.OSD.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.cnt.tv.OSD} returns this
 */
proto.msp.cnt.tv.OSD.prototype.setContext = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.OSDList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OSDList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OSDList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OSDList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSDList.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    osdList: jspb.Message.toObjectList(msg.getOsdList(),
    proto.msp.cnt.tv.OSD.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OSDList}
 */
proto.msp.cnt.tv.OSDList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OSDList;
  return proto.msp.cnt.tv.OSDList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OSDList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OSDList}
 */
proto.msp.cnt.tv.OSDList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.msp.cnt.tv.OSD;
      reader.readMessage(value,proto.msp.cnt.tv.OSD.deserializeBinaryFromReader);
      msg.addOsd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OSDList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OSDList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OSDList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSDList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getOsdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msp.cnt.tv.OSD.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.OSDList.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSDList} returns this
 */
proto.msp.cnt.tv.OSDList.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OSD osd = 2;
 * @return {!Array<!proto.msp.cnt.tv.OSD>}
 */
proto.msp.cnt.tv.OSDList.prototype.getOsdList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.OSD>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.OSD, 2));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.OSD>} value
 * @return {!proto.msp.cnt.tv.OSDList} returns this
*/
proto.msp.cnt.tv.OSDList.prototype.setOsdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msp.cnt.tv.OSD=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.OSD}
 */
proto.msp.cnt.tv.OSDList.prototype.addOsd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msp.cnt.tv.OSD, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.OSDList} returns this
 */
proto.msp.cnt.tv.OSDList.prototype.clearOsdList = function() {
  return this.setOsdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OsdStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OsdStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OsdStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exist: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OsdStatus}
 */
proto.msp.cnt.tv.OsdStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OsdStatus;
  return proto.msp.cnt.tv.OsdStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OsdStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OsdStatus}
 */
proto.msp.cnt.tv.OsdStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setExist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OsdStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OsdStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OsdStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getExist();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 tvid = 1;
 * @return {number}
 */
proto.msp.cnt.tv.OsdStatus.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdStatus} returns this
 */
proto.msp.cnt.tv.OsdStatus.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.tv.OsdStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdStatus} returns this
 */
proto.msp.cnt.tv.OsdStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 state = 3;
 * @return {number}
 */
proto.msp.cnt.tv.OsdStatus.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdStatus} returns this
 */
proto.msp.cnt.tv.OsdStatus.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 exist = 4;
 * @return {number}
 */
proto.msp.cnt.tv.OsdStatus.prototype.getExist = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdStatus} returns this
 */
proto.msp.cnt.tv.OsdStatus.prototype.setExist = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.cnt.tv.OsdStatusList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OsdStatusList.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OsdStatusList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OsdStatusList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdStatusList.toObject = function(includeInstance, msg) {
  var f, obj = {
    osdstatusList: jspb.Message.toObjectList(msg.getOsdstatusList(),
    proto.msp.cnt.tv.OsdStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OsdStatusList}
 */
proto.msp.cnt.tv.OsdStatusList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OsdStatusList;
  return proto.msp.cnt.tv.OsdStatusList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OsdStatusList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OsdStatusList}
 */
proto.msp.cnt.tv.OsdStatusList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msp.cnt.tv.OsdStatus;
      reader.readMessage(value,proto.msp.cnt.tv.OsdStatus.deserializeBinaryFromReader);
      msg.addOsdstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OsdStatusList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OsdStatusList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OsdStatusList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdStatusList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOsdstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msp.cnt.tv.OsdStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OsdStatus osdstatus = 1;
 * @return {!Array<!proto.msp.cnt.tv.OsdStatus>}
 */
proto.msp.cnt.tv.OsdStatusList.prototype.getOsdstatusList = function() {
  return /** @type{!Array<!proto.msp.cnt.tv.OsdStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.cnt.tv.OsdStatus, 1));
};


/**
 * @param {!Array<!proto.msp.cnt.tv.OsdStatus>} value
 * @return {!proto.msp.cnt.tv.OsdStatusList} returns this
*/
proto.msp.cnt.tv.OsdStatusList.prototype.setOsdstatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msp.cnt.tv.OsdStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.cnt.tv.OsdStatus}
 */
proto.msp.cnt.tv.OsdStatusList.prototype.addOsdstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msp.cnt.tv.OsdStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.cnt.tv.OsdStatusList} returns this
 */
proto.msp.cnt.tv.OsdStatusList.prototype.clearOsdstatusList = function() {
  return this.setOsdstatusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OsdFile.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OsdFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OsdFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    tvid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    checksum: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OsdFile}
 */
proto.msp.cnt.tv.OsdFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OsdFile;
  return proto.msp.cnt.tv.OsdFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OsdFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OsdFile}
 */
proto.msp.cnt.tv.OsdFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTvid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setChecksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OsdFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OsdFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OsdFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OsdFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTvid();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getChecksum();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional fixed32 tvid = 1;
 * @return {number}
 */
proto.msp.cnt.tv.OsdFile.prototype.getTvid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdFile} returns this
 */
proto.msp.cnt.tv.OsdFile.prototype.setTvid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed32 id = 2;
 * @return {number}
 */
proto.msp.cnt.tv.OsdFile.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdFile} returns this
 */
proto.msp.cnt.tv.OsdFile.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 filesize = 3;
 * @return {number}
 */
proto.msp.cnt.tv.OsdFile.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdFile} returns this
 */
proto.msp.cnt.tv.OsdFile.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 checksum = 4;
 * @return {number}
 */
proto.msp.cnt.tv.OsdFile.prototype.getChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OsdFile} returns this
 */
proto.msp.cnt.tv.OsdFile.prototype.setChecksum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.OSDCtrl.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.OSDCtrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.OSDCtrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSDCtrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    use: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.OSDCtrl}
 */
proto.msp.cnt.tv.OSDCtrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.OSDCtrl;
  return proto.msp.cnt.tv.OSDCtrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.OSDCtrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.OSDCtrl}
 */
proto.msp.cnt.tv.OSDCtrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.OSDCtrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.OSDCtrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.OSDCtrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.OSDCtrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getUse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional fixed32 id = 1;
 * @return {number}
 */
proto.msp.cnt.tv.OSDCtrl.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.cnt.tv.OSDCtrl} returns this
 */
proto.msp.cnt.tv.OSDCtrl.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool use = 2;
 * @return {boolean}
 */
proto.msp.cnt.tv.OSDCtrl.prototype.getUse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.cnt.tv.OSDCtrl} returns this
 */
proto.msp.cnt.tv.OSDCtrl.prototype.setUse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.cnt.tv.TvState.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.cnt.tv.TvState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.cnt.tv.TvState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && msp_cnt_pb.ValueU32.toObject(includeInstance, f),
    base: (f = msg.getBase()) && proto.msp.cnt.tv.TvBasic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.cnt.tv.TvState}
 */
proto.msp.cnt.tv.TvState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.cnt.tv.TvState;
  return proto.msp.cnt.tv.TvState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.cnt.tv.TvState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.cnt.tv.TvState}
 */
proto.msp.cnt.tv.TvState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new msp_cnt_pb.ValueU32;
      reader.readMessage(value,msp_cnt_pb.ValueU32.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.msp.cnt.tv.TvBasic;
      reader.readMessage(value,proto.msp.cnt.tv.TvBasic.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.cnt.tv.TvState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.cnt.tv.TvState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.cnt.tv.TvState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.cnt.tv.TvState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      msp_cnt_pb.ValueU32.serializeBinaryToWriter
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.cnt.tv.TvBasic.serializeBinaryToWriter
    );
  }
};


/**
 * optional msp.cnt.ValueU32 state = 1;
 * @return {?proto.msp.cnt.ValueU32}
 */
proto.msp.cnt.tv.TvState.prototype.getState = function() {
  return /** @type{?proto.msp.cnt.ValueU32} */ (
    jspb.Message.getWrapperField(this, msp_cnt_pb.ValueU32, 1));
};


/**
 * @param {?proto.msp.cnt.ValueU32|undefined} value
 * @return {!proto.msp.cnt.tv.TvState} returns this
*/
proto.msp.cnt.tv.TvState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.tv.TvState} returns this
 */
proto.msp.cnt.tv.TvState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.tv.TvState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TvBasic base = 2;
 * @return {?proto.msp.cnt.tv.TvBasic}
 */
proto.msp.cnt.tv.TvState.prototype.getBase = function() {
  return /** @type{?proto.msp.cnt.tv.TvBasic} */ (
    jspb.Message.getWrapperField(this, proto.msp.cnt.tv.TvBasic, 2));
};


/**
 * @param {?proto.msp.cnt.tv.TvBasic|undefined} value
 * @return {!proto.msp.cnt.tv.TvState} returns this
*/
proto.msp.cnt.tv.TvState.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.cnt.tv.TvState} returns this
 */
proto.msp.cnt.tv.TvState.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.cnt.tv.TvState.prototype.hasBase = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.msp.cnt.tv);
